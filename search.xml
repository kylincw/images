<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot整合MyBatis</title>
    <url>/2494.html</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>创建SpringBoot项目与整合JDBC一致，使用Druid数据源。pom.xml加入MyBatis依赖。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404152014577.png"  alt="image-20200404152014577"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置数据库连接信息，使用Druid数据源，与其不变。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404152223659.png"  alt="image-20200404152223659"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">kylin</span></span><br><span class="line">    <span class="comment"># 假如时区报错了，就增加一个时区的配置</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line"><span class="attr">    initialSize:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    minIdle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    maxActive:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    maxWait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">    validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">    testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址： https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line"><span class="attr">    filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="attr">    maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404153854304.png"  alt="image-20200404153854304"></p>
<p>给数据库建表，导入department.sql和employee.sql。SpringBoot连接数据库之后自动建表。首先需要再SpringBoot文件中配置两张建表sql的位置</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404155531606.png"  alt="image-20200404155531606"></p>
<p>SpringBoot2.0x版本自动运行建表sql，必须配置参数<code>initialization-mode: always</code></p>
<p>运行项目后，就会自动运行Sql语句。进行建表操作</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404152633313.png"  alt="image-20200404152633313"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404155952056.png"  alt="image-20200404155952056"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404160007955.png"  alt="image-20200404160007955"></p>
<p>为了每次运行此项目都自动运行建表语句，我们把他给注释掉</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404160115063.png"  alt="image-20200404160115063"></p>
<p>创建相对应的JavaBean</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404152809902.png"  alt="image-20200404152809902"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404152837076.png"  alt="image-20200404152837076"></p>
<h2 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h2><p>使用MyBatis注解来进行对数据库的操作</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404153344201.png"  alt="image-20200404153344201"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404153533402.png"  alt="image-20200404153533402"></p>
<p>由于没有Mybatis的配置文件。而数据库表中的d_id,department_name字段与bean中不一致。所以需要配置mybatis自动驼峰命名转换。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404154050880.png"  alt="image-20200404154050880"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404154107205.png"  alt="image-20200404154107205"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404154257033.png"  alt="image-20200404154257033"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404154315556.png"  alt="image-20200404154315556"></p>
<p>自定义MyBatis的配置规则，给容器中添加一个ConfigurationCustomizer。相当于mybatis.xml配置文件</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404154600019.png"  alt="image-20200404154600019"></p>
<p><code>configuration.setMapUnderscoreToCamelCase(true);</code>开启自动驼峰命名转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(org.apache.ibatis.session.Configuration configuration)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//开启自动驼峰命名转换 department_name</span></span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写controller</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404153627933.png"  alt="image-20200404153627933"></p>
<p>测试插入</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404163022843.png"  alt="image-20200404163022843"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404163042399.png"  alt="image-20200404163042399"></p>
<p>由于id是自增主键，我们插入时是没有Id的值。<code>/dept?departmentName=xx</code>所以获取到的department对象中的Id时null，而在数据库中id自增。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404163632051.png"  alt="image-20200404163632051"></p>
<p>这时我们可以在Mapper中使用@Options注解<code>@Options(useGeneratedKeys =true,keyProperty = &quot;id&quot;)</code>插入完成后，主键会重新封装进来。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404163938417.png"  alt="image-20200404163938417"></p>
<p>再次测试插入</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404164048023.png"  alt="image-20200404164048023"></p>
<p>测试通过Id获取对象</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404164133304.png"  alt="image-20200404164133304"></p>
<p>通过注解版整合Mybatis成功！！</p>
<h2 id="配置文件版"><a href="#配置文件版" class="headerlink" title="配置文件版"></a>配置文件版</h2><p>首先在SpringBoot配置文件中配置mybatis和mapper配置文件所在位置。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404164438360.png"  alt="image-20200404164438360"></p>
<p>mybatis配置文件</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404164546726.png"  alt="image-20200404164546726"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启驼峰命名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.kylin.bean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>创建Mapper接口</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404164651796.png"  alt="image-20200404164651796"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.kylin.mapper.EmployeeMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpById"</span> <span class="attr">resultType</span>=<span class="string">"employee"</span>&gt;</span></span><br><span class="line">        select * from employee where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertEmp"</span>&gt;</span></span><br><span class="line">        insert into employee(lastName,email,gender,d_id) values (#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;dId&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>编写Mapper.xml</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404164801220.png"  alt="image-20200404164801220"></p>
<p>编写Controller</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404170143760.png"  alt="image-20200404170143760"></p>
<p>测试插入</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404170247354.png"  alt="image-20200404170247354"></p>
<p>与上面一样的原因，导致id为null。我们在mapper配置文件中配置属性<code>userGeneratedKeys=&quot;true&quot;</code>和<code>keyProperty=&quot;id&quot;</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404170734140.png"  alt="image-20200404170734140"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404170814055.png"  alt="image-20200404170814055"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404170911606.png"  alt="image-20200404170833620"></p>
<p>测试查询</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//image-20200404170911606.png"  alt="image-20200404170911606"></p>
<p>通过配置文件版整合Mybatis成功！！</p>
<p>两种方式可以混合使用！！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>数据访问</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>MyBatis</tag>
        <tag>SpringBoot整合MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Druid数据源</title>
    <url>/64324.html</url>
    <content><![CDATA[<h2 id="Druid简介"><a href="#Druid简介" class="headerlink" title="Druid简介"></a>Druid简介</h2><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p>
<ul>
<li><p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p>
</li>
<li><p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p>
</li>
<li><p>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</p>
</li>
<li><p><strong>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</strong></p>
</li>
</ul>
<p>Github地址：<a href="https://github.com/alibaba/druid/" target="_blank" rel="noopener">https://github.com/alibaba/druid/</a></p>
<h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a><strong>配置参数</strong></h2><p>com.alibaba.druid.pool.DruidDataSource 基本配置参数如下</p>
<table>
<thead>
<tr>
<th>配置</th>
<th>缺省值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td></td>
<td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 <br/>如果没有配置，将会生成一个名字，格式是：”DataSource-“ + System.identityHashCode(this)</td>
</tr>
<tr>
<td>jdbcUrl</td>
<td></td>
<td>连接数据库的url，不同数据库不一样。例如： <br/>mysql : jdbc:mysql://10.20.153.104:3306/druid2 <br/>oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td>
</tr>
<tr>
<td>username</td>
<td></td>
<td>连接数据库的用户名</td>
</tr>
<tr>
<td>password</td>
<td></td>
<td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td>
</tr>
<tr>
<td>driverClassName</td>
<td>根据url自动识别</td>
<td>这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td>
</tr>
<tr>
<td>initialSize</td>
<td>0</td>
<td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td>
</tr>
<tr>
<td>maxActive</td>
<td>8</td>
<td>最大连接池数量</td>
</tr>
<tr>
<td>maxIdle</td>
<td></td>
<td>已经不再使用，配置了也没效果</td>
</tr>
<tr>
<td>minIdle</td>
<td></td>
<td>最小连接池数量</td>
</tr>
<tr>
<td>maxWait</td>
<td></td>
<td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td>
</tr>
<tr>
<td>poolPreparedStatements</td>
<td>false</td>
<td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td>
</tr>
<tr>
<td>maxOpenPreparedStatements</td>
<td>-1</td>
<td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td>
</tr>
<tr>
<td>validationQuery</td>
<td></td>
<td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td>
</tr>
<tr>
<td>testOnBorrow</td>
<td>true</td>
<td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td>
</tr>
<tr>
<td>testOnReturn</td>
<td>false</td>
<td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td>
</tr>
<tr>
<td>testWhileIdle</td>
<td>false</td>
<td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td>
</tr>
<tr>
<td>timeBetweenEvictionRunsMillis</td>
<td></td>
<td>有两个含义： <br/>1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td>
</tr>
<tr>
<td>numTestsPerEvictionRun</td>
<td></td>
<td>不再使用，一个DruidDataSource只支持一个EvictionRun</td>
</tr>
<tr>
<td>minEvictableIdleTimeMillis</td>
<td></td>
<td></td>
</tr>
<tr>
<td>connectionInitSqls</td>
<td></td>
<td>物理连接初始化的时候执行的sql</td>
</tr>
<tr>
<td>exceptionSorter</td>
<td>根据dbType自动识别</td>
<td>当数据库抛出一些不可恢复的异常时，抛弃连接</td>
</tr>
<tr>
<td>filters</td>
<td></td>
<td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：  监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td>
</tr>
<tr>
<td>proxyFilters</td>
<td></td>
<td>类型是List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td>
</tr>
</tbody></table>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line"><span class="comment">#druid 数据源专有配置</span></span><br><span class="line"><span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line"><span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line"><span class="comment">#则导入 log4j 依赖即可，Maven 地址： https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line"><span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>

<h2 id="配置Druid数据源"><a href="#配置Druid数据源" class="headerlink" title="配置Druid数据源"></a>配置Druid数据源</h2><p>1.建立项目与SprinBoot整合JDBC一致，pom.xml添加上Druid数据源依赖</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/image-20200403200835659.png"  alt="image-20200403200835659"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Druid--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.切换数据源；之前已经说过 Spring Boot 2.0 以上默认使用 <code>com.zaxxer.hikari.HikariDataSource</code> 数据源，但可以 通过 <code>spring.datasource.type</code> 指定数据源。</p>
<p><code>type: com.alibaba.druid.pool.DruidDataSource</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/image-20200403201042776.png"  alt="image-20200403201042776"></p>
<p>3.数据源切换之后，在测试类中注入 DataSource，然后获取到它，输出一看便知是否成功切换；</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/image-20200403201338124-1586001726780.png"  alt="image-20200403201338124"></p>
<p>成功切换成Druid数据源</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/image-20200403201422296-1586001969873.png"  alt="image-20200403201422296"></p>
<p>4.设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项,可以查看源码。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200403201647722.png"  alt="image-20200403201647722"></p>
<p>5.导入Log4j 的依赖</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200404105946963.png"  alt="image-20200404105946963"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6.现在需要程序员自己为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 Spring Boot 的自动生成了.我们需要 自己添加 DruidDataSource 组件到容器中，并绑定属性。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200404110825348.png"  alt="image-20200404110825348"></p>
<p>去测试类中测试一下，看是否成功！</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200404111008860.png"  alt="image-20200404111008860"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200404111152825.png"  alt="image-20200404111152825"></p>
<p>配置成功！</p>
<h2 id="配置Druid数据源监控"><a href="#配置Druid数据源监控" class="headerlink" title="配置Druid数据源监控"></a>配置Druid数据源监控</h2><p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web 页面。</p>
<p>所以第一步需要设置 Druid 的后台管理页面，比如 登录账号、密码 等，配置后台管理。</p>
<p>配置Druid监控管理后台的Servlet，内置Servlet容器时没有web.xml文件，所以使用SpringBoot的注册Servlet方式</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200404111731141.png"  alt="image-20200404111731141"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后台监控:web.xml，ServletRegistrationBean</span></span><br><span class="line">  <span class="comment">//因为SpringBoot内置了servlet容器，所以没有web.xml,替代方法：将其注册进去</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">StatViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//只要访问/druid/*就能够进入到后台监控页面</span></span><br><span class="line">      ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//后台需要有人登录，账号密码配置</span></span><br><span class="line">      HashMap&lt;String,String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      <span class="comment">//增加配置</span></span><br><span class="line">      initParameters.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);<span class="comment">//loginUsername变量名是固定的，不能修改</span></span><br><span class="line">      initParameters.put(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);<span class="comment">//loginPassword变量名是固定的，不能修改</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//允许谁可以访问</span></span><br><span class="line">      initParameters.put(<span class="string">"allow"</span>,<span class="string">""</span>);<span class="comment">//为空代表所有人可以访问</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//禁止谁能访问</span></span><br><span class="line">      initParameters.put(<span class="string">"deny"</span>,<span class="string">"192.168.1.102"</span>);</span><br><span class="line"></span><br><span class="line">      bean.setInitParameters(initParameters);<span class="comment">//设置初始化参数</span></span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>配置完毕后，我们可以访问 ：<a href="http://localhost:8080/druid/login.html" target="_blank" rel="noopener">http://localhost:8080/druid/login.html</a></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200404112240366.png"  alt="image-20200404112240366"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200404112308465.png"  alt="image-20200404112308465"></p>
<p><strong>配置 Druid web 监控 filter 过滤器</strong></p>
<p>依旧使用SpringBoot注册Filter的方式</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200404112606605.png"  alt="image-20200404112606605"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">     FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">     bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">     <span class="comment">//可以过滤哪些请求呢？</span></span><br><span class="line">     Map&lt;String,String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//这些东西不进行统计，不拦截过滤</span></span><br><span class="line">     initParameters.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//"/*" 表示过滤所有请求</span></span><br><span class="line">     bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line"></span><br><span class="line">     bean.setInitParameters(initParameters);</span><br><span class="line">     <span class="keyword">return</span> bean;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>按照工作需求进行相应的配置即可。</p>
<p><strong>DruidConfig</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建</span></span><br><span class="line"><span class="comment">       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效</span></span><br><span class="line"><span class="comment">       @ConfigurationProperties(prefix = "spring.datasource")：作用就是将 全局配置文件中</span></span><br><span class="line"><span class="comment">       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后台监控:web.xml，ServletRegistrationBean</span></span><br><span class="line">    <span class="comment">//因为SpringBoot内置了servlet容器，所以没有web.xml,替代方法：将其注册进去</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">StatViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//只要访问/druid/*就能够进入到后台监控页面</span></span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//后台需要有人登录，账号密码配置</span></span><br><span class="line">        HashMap&lt;String,String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//增加配置</span></span><br><span class="line">        initParameters.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);<span class="comment">//loginUsername变量名是固定的，不能修改</span></span><br><span class="line">        initParameters.put(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);<span class="comment">//loginPassword变量名是固定的，不能修改</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//允许谁可以访问</span></span><br><span class="line">        initParameters.put(<span class="string">"allow"</span>,<span class="string">""</span>);<span class="comment">//为空代表所有人可以访问</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//禁止谁能访问</span></span><br><span class="line">        initParameters.put(<span class="string">"deny"</span>,<span class="string">"192.168.1.102"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParameters);<span class="comment">//设置初始化参数</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以过滤哪些请求呢？</span></span><br><span class="line">        Map&lt;String,String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这些东西不进行统计，不拦截过滤</span></span><br><span class="line">        initParameters.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//"/*" 表示过滤所有请求</span></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>数据访问</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Druid</tag>
        <tag>配置Druid数据源</tag>
        <tag>配置Druid数据源监控</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合JDBC</title>
    <url>/8435.html</url>
    <content><![CDATA[<div class="note info">
            <p><strong>SpringBoot整合JDBC需要配置JDBC依赖，和Mysql驱动。</strong></p>
          </div>

<h1 id="整合JDBC"><a href="#整合JDBC" class="headerlink" title="整合JDBC"></a>整合JDBC</h1><p>我们首先创建一个SpringBoot项目，引入相应的模块</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200329212729786.png"  alt="image-20200329212440192"></p>
<p>项目创建好之后发现pom.xml中帮我们自动导入了以下启动器和依赖</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200329213423836.png"  alt="image-20200329212729786"></p>
<p>配置yaml（properties）配置文件连接数据库</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200329212440192.png"  alt="image-20200329213423836"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">kylin</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/jdbc?serverTimezone=UTC&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>配置完数据库用户名密码和数据库地址驱动等一系列配置之后，我们就可以直接使用了。SpringBoot已经默认帮我们进行自动配置了。我们可以去测试类进行测试了。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200403191917406.png"  alt="image-20200329213823994"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DataJdbcApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//查看默认数据源</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        <span class="comment">//打印数据库连接</span></span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200403193312615.png"  alt="image-20200329214006071"></p>
<p><strong>Spring Boot 2.2.5 默认使用<span id="inline-yellow">HikariDataSource</span> 数据源，而以前版本，如 Spring Boot 1.5 默认使用 <span id="inline-green">org.apache.tomcat.jdbc.pool.DataSource </span>作为数据源。HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀。</strong></p>
<h1 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h1><div class="note primary">
            <p><strong>JDBCTemplate</strong></p>
          </div>

<ol>
<li><p>有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；</p>
</li>
<li><p>即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。</p>
</li>
<li><p>数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</p>
</li>
<li><p>Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</p>
</li>
<li><p>JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</p>
</li>
</ol>
<p><strong>JdbcTemplate主要提供以下几类方法：</strong></p>
<ul>
<li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li>
<li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li>
<li>query方法及queryForXXX方法：用于执行查询相关语句；</li>
<li>call方法：用于执行存储过程、函数相关语句。</li>
</ul>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>编写一个Controller，注入jdbcTemplate,编写测试方法进行访问测试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询数据看库的所有信息</span></span><br><span class="line">    <span class="comment">//没有实体类，数据库中的东西，怎么获取？Map</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/userlist"</span>)</span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; userList()&#123;</span><br><span class="line">        String sql = <span class="string">"select * from users"</span>;</span><br><span class="line">        List&lt;Map&lt;String,Object&gt;&gt; list_maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="keyword">return</span> list_maps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/adduser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into users(id,username,password) values(default,'ls','444')"</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"update-ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/updateuser/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">        String sql = <span class="string">"update users set username=?,password=? where id="</span>+id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装</span></span><br><span class="line">        Object[] objects = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line">        objects[<span class="number">0</span>]=<span class="string">"赵云"</span>;</span><br><span class="line">        objects[<span class="number">1</span>]=<span class="string">"zy"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,objects);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"updateUser-ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/deleteuser/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        String sql=<span class="string">"delete from users where id =?"</span>;</span><br><span class="line">        jdbcTemplate.update(sql,id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"deleteUser-ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200329214006071.png"  alt="image-20200403191917406"></p>
<p>到此，CURD的基本操作，使用 JDBC 就搞定了。</p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p><strong>当数据库配置文件没有增加时区配置时测试数据库时会出现时区错误</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200329213823994.png"  alt="image-20200403193312615"></p>
<p><strong>这时我们需要在数据库配置文件中url参数配置加上时区配置</strong><code>serverTimezone=UTC</code>。最<strong>好再加上编码配置以访乱码</strong><code>characterEncoding=utf-8</code></p>
<p><code>jdbc:mysql://localhost:3306/jdbc?serverTimezone=UTC&amp;characterEncoding=utf-8</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200403193612267.png"  alt="image-20200403193612267"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>数据访问</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
        <tag>SpringBoot</tag>
        <tag>JDBCTemplate</tag>
        <tag>整合JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置嵌入式Servelt容器</title>
    <url>/57391.html</url>
    <content><![CDATA[<div class="note info">
            <p><strong>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器</strong></p>
          </div>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200326194033792.png"  alt="image-20200325213330585"></p>
<h2 id="定制和修改Servlet容器的相关配置"><a href="#定制和修改Servlet容器的相关配置" class="headerlink" title="定制和修改Servlet容器的相关配置"></a>定制和修改Servlet容器的相关配置</h2><ul>
<li>通过SringBoot文件修改和server有关的配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">server.context-path</span>=<span class="string">/crud</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.tomcat.uri-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//通用的Servlet容器设置</span></span><br><span class="line"><span class="attr">server.xxx</span></span><br><span class="line"><span class="attr">//Tomcat的设置</span></span><br><span class="line"><span class="attr">server.tomcat.xxx</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器,来修改Servlet容器的配置。Spring Boot2.0以上版本EmbeddedServletContainerCustomizer被<strong>WebServerFactoryCustomize</strong>r替代</li>
</ul>
<div class="note danger">
            <p> <strong>SprinBoot-1.0x</strong></p><p><strong>EmbeddedServletContainerCustomizer</strong></p>
          </div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  <span class="comment">//一定要将这个定制器加入到容器中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">embeddedServletContainerCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定制嵌入式的Servlet容器相关的规则</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">            container.setPort(<span class="number">8083</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note success">
            <p> <strong>SpringBoot-2.0x</strong></p><p><strong>WebServerFactoryCustomize</strong></p>
          </div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt; <span class="title">webServerFactoryCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">            factory.setPort(<span class="number">8080</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200325213330585.png"  alt="image-20200325214902184"></p>
<h2 id="注册Servlet三大组件"><a href="#注册Servlet三大组件" class="headerlink" title="注册Servlet三大组件"></a>注册Servlet三大组件</h2><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p>
<p>注册三大组件用以下方式</p>
<ul>
<li>ServletRegistrationBean</li>
<li>FilterRegistrationBean</li>
<li>ServletListenerRegistrationBean</li>
</ul>
<h3 id="注册Servlet"><a href="#注册Servlet" class="headerlink" title="注册Servlet"></a>注册Servlet</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ServletRegistrationBean registrationBean = <span class="keyword">new</span> </span><br><span class="line">       <span class="comment">//没传入urlMapping,会默认以servelt的类名首字母小写为urlMapping值:myServlet</span></span><br><span class="line">       ServletRegistrationBean(<span class="keyword">new</span> MyServlet(),<span class="string">"/myServlet"</span>);</span><br><span class="line">       registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> registrationBean;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200326194327951.png"  alt="image-20200326194033792"></p>
<p><strong>创建普通的java类继承HttpServlet</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200325214902184.png"  alt="image-20200326194327951"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200326194459018.png"  alt="image-20200326194459018"></p>
<h3 id="注册Filter"><a href="#注册Filter" class="headerlink" title="注册Filter"></a>注册Filter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">       FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">       registrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//registrationBean.addUrlPatterns("/hello","/myServlet");</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//setUrlPatterns()这是一次性的设置一个集合。</span></span><br><span class="line">       registrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>,<span class="string">"/myServlet"</span>));</span><br><span class="line">       <span class="keyword">return</span> registrationBean;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>addUrlPatterns方法是添加一个拦截的URL，多个用逗号隔开</strong></p>
<p><strong>setUrlPatterns方法这是一次性的设置一个集合，想要配置拦截的URL。首先要使用Arrays.asList将其转换为集合</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200326194701417.png"  alt="image-20200326194701417"></p>
<p><strong>创建一个实现了Filter接口的普通java类</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200326194742567.png"  alt="image-20200326194742567"></p>
<h3 id="注册Listener"><a href="#注册Listener" class="headerlink" title="注册Listener"></a>注册Listener</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">      ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyListener());</span><br><span class="line">      <span class="keyword">return</span> registrationBean;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200326195249084.png"  alt="image-20200326195249084"></p>
<p><strong>创建一个实现了指定监听接口的普通java类</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200326195320769.png"  alt="image-20200326195320769"></p>
<h2 id="使用其他嵌入式Servlet容器"><a href="#使用其他嵌入式Servlet容器" class="headerlink" title="使用其他嵌入式Servlet容器"></a>使用其他嵌入式Servlet容器</h2><div class="note info">
            <p><strong>SpringBoot中pom.xml中引入的web模块，默认使用Tomcat作为嵌入式的Servlet容器</strong></p>
          </div>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200326200343243.png"  alt="image-20200326200220164"></p>
<p><strong>引入使用其他的servlet容器，需要在Web模块中先排除默认使用的Tomcat容器</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200326200636375.png"  alt="image-20200326200343243"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--在Web模块中排除默认的Tomcat--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="note success">
            <p><strong>Jetty容器</strong></p>
          </div>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入其他的servlet容器,需要在Web模块中先排除默认的Tomcat--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200326200220164.png"  alt="image-20200326200636375"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200326201219407.png"  alt="image-20200326200945570"></p>
<div class="note danger">
            <p><strong>Undertow容器</strong></p>
          </div>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200326201336698.png"  alt="image-20200326201219407"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200326200945570.png"  alt="image-20200326201336698"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>配置</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>嵌入式Servelt容器</tag>
        <tag>Tomcat</tag>
        <tag>Servelt</tag>
        <tag>Filter</tag>
        <tag>Listener</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习-6</title>
    <url>/46584.html</url>
    <content><![CDATA[<h2 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h2><p> <strong><mark>v-bind</mark> 主要用于属性绑定，比方你的class属性，style属性，value属性，href属性等等，只要是属性，就可以用v-bind指令进行绑定</strong></p>
<ul>
<li>v-bind指令用法<code>&lt;a v-bind:href=&#39;url&#39;&gt;跳转&lt;/a&gt;</code></li>
<li>缩写形式<code>&lt;a :href=&#39;url&#39;&gt;跳转&lt;/a&gt;</code></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200213203525707.png"  alt="image-20200213203525707"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/GIF.gif"  alt="GIF"></p>
<p><span id="inline-yellow">黄色色块</span></p>
<p><span id="inline-green">绿色色块</span></p>
<p id="div-border-left-red"><font face="微软雅黑">左边框红色块级</font></p>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>属性绑定</tag>
        <tag>v-bind</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习-5</title>
    <url>/46264.html</url>
    <content><![CDATA[<h2 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h2><p><strong>事件绑定绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。</strong></p>
<p>v-on指令用法<code>&lt;input type = &#39;button&#39; v-on:click=&#39;num++&#39;/&gt;</code></p>
<p>v-on指令简写<code>&lt;input type = &#39;button&#39; @click=&#39;num++&#39;/&gt;</code></p>
<p>事件函数的调用方式 </p>
<ul>
<li>直接绑定函数名称<code>&lt;button v-on:click=&#39;say&#39;&gt;Hello&lt;/button&gt;</code></li>
<li>调用函数<code>&lt;button v-on:click=&#39;say()&#39;&gt;Say hi&lt;/button&gt;</code></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200213152820520.png"  alt="image-20200213152820520"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/GIF-1581579046053.gif"  alt="GIF"></p>
<p> 事件函数参数传递</p>
<ul>
<li><p>不带参数默认会传递事件对象作为事件函数的第一个参数<code>&lt;button v-on:click=&#39;say&#39;&gt;Say hi&lt;/button&gt;</code></p>
</li>
<li><p>普通参数和事件对象<code>&lt;button v-on:click=&#39;say(&quot;hi&quot;,$event)&#39;&gt;Say hi&lt;/button&gt;</code></p>
</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/GIF-1581580212045.gif"  alt="image-20200213154811914"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200213160446896.png"  alt="GIF"></p>
<h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p><strong>事件发生后，这个事件就要开始传播(从里到外或者从外向里)。为什么要传播呢？因为事件源本身（可能）并没有处理事件的能力，即处理事件的函数（方法）并未绑定在该事件源上。例如我们点击一个按钮时，就会产生一个click事件，但这个按钮本身可能不能处理这个事件，事件必须从这个按钮传播出去，从而到达能够处理这个事件的代码中（例如我们给按钮的onclick属性赋一个函数的名字，就是让这个函数去处理该按钮的click事件），或者按钮的父级绑定有事件函数，当该点击事件发生在按钮上，按钮本身并无处理事件函数，则传播到父级去处理。</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200213154811914.png"  alt="image-20200213160125329"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200213160125329.png"  alt="image-20200213160446896"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/GIF-1581581150110.gif"  alt="GIF"></p>
<p><strong>点击按钮竟然触发了handle0方法，从而使数值加1</strong></p>
<h3 id="默认行为"><a href="#默认行为" class="headerlink" title="默认行为"></a>默认行为</h3><p><strong>网页中的某些元素是有自己的默认行为的，比如超链接单击后需要跳转，提交按钮点击后需要提交表单，有时需要阻止这些行为，也就是默认行为。</strong></p>
<ul>
<li>.stop阻止冒泡<code>&lt;a v-on:click.stop=&quot;handle&quot;&gt;跳转&lt;/a&gt;</code></li>
<li>.prevent阻止默认行为<code>&lt;a v-on:click.prevent=&quot;handle&quot;&gt;跳转&lt;/a&gt;</code></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/GIF-1581581398892.gif"  alt="image-20200213160909372"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200213160909372.png"  alt="GIF"></p>
<p><strong>除了通过修饰符来阻止事件冒泡和默认行为，也可以通过事件对象</strong></p>
<ul>
<li>阻止冒泡<code>event.stopPropagation();</code></li>
<li>阻止默认行为<code>event.preventDefault();</code></li>
</ul>
<h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><p><strong>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</strong></p>
<ul>
<li>.enter 回车键<code>&lt;input v-on:keyup.enter=&#39;submit&#39;&gt;</code></li>
<li>.esc 退出键<code>&lt;input v-on:keyup.delete=&#39;handle&#39;&gt;</code></li>
<li><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200213162645094.png"  alt="image-20200213162645094"></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200213163254307.png"  alt="image-20200213163254307"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/GIF-1581583055740.gif"  alt="GIF"></p>
<h2 id="自定义按键修饰符"><a href="#自定义按键修饰符" class="headerlink" title="自定义按键修饰符"></a>自定义按键修饰符</h2><p><strong>全局 config.keyCodes 对象<code>Vue.config.keyCodes.f1 = 112</code></strong></p>
<p><strong>自定义按键修饰符名字是自定义的，但是对应的值必须是按键对应event.keyCode值</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/GIF-1581583718443.gif"  alt="image-20200213164527129"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200213164527129.png"  alt="GIF"></p>
<p>自定义按键修饰符</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200213165002165.png"  alt="image-20200213165002165"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/GIF-1581583936953.gif"  alt="GIF"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>事件绑定</tag>
        <tag>事件冒泡</tag>
        <tag>事件修饰符</tag>
        <tag>按键修饰符</tag>
        <tag>默认行为</tag>
        <tag>v-on指令</tag>
        <tag>自定义按键修饰符</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习-4</title>
    <url>/29817.html</url>
    <content><![CDATA[<h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><ul>
<li><strong>从页面到数据（页面的值发生改变代码中与之绑定的数据也发生改变）</strong></li>
<li><strong>从数据到页面（代码数据的值发生改变页面与之绑定的值也发生改变）</strong></li>
</ul>
<h2 id="v-model指令"><a href="#v-model指令" class="headerlink" title="v-model指令"></a>v-model指令</h2><p><strong>前面的v-text，v-html指令都是单向的数据绑定，即从数据到页面。通过v-model指令来实现双向数据绑定。</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/image-20200205163527958-1586003707589.png"  alt="image-20200205163527958"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205044.gif"  alt="GIF"></p>
<p><strong>当输入框改变输入框中的值的时候，发生从页面到数据，改变了msg的值，然后从数据到页面通过插值表达式将msg的值响应给页面，发生了从数据到页面。</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205058.png"  alt="image-20200205164314987"></p>
<h2 id="MVVM设计思想"><a href="#MVVM设计思想" class="headerlink" title="MVVM设计思想"></a>MVVM设计思想</h2><ul>
<li><strong>M(model)</strong></li>
<li><strong>V(view)</strong> </li>
<li><strong>VM(View-Model)</strong></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205122.png"  alt="image-20200205170757303"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>双向数据绑定</tag>
        <tag>v-model</tag>
        <tag>MVVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习-3</title>
    <url>/46648.html</url>
    <content><![CDATA[<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p> 什么是指令？</p>
<ul>
<li>什么是自定义属性 </li>
<li><strong><font color=red>指令的本质就是自定义属性</font></strong> </li>
<li><strong><font color = greew>指令的格式：以v-开始（比如：v-cloak）</font></strong></li>
</ul>
<h2 id="v-cloak指令"><a href="#v-cloak指令" class="headerlink" title="v-cloak指令"></a>v-cloak指令</h2><ul>
<li>插值表达式存在的问题：<strong>“闪动”</strong> </li>
<li>如何解决该问题：使用v-cloak指令 </li>
<li>解决该问题的原理：先隐藏，替换好值之后再显示最终的值</li>
</ul>
<p><strong>闪动问题：当网络出现延迟，会出现一些加载顺序延迟先加载html内容，若有插值表达式则会先显示<code>{-{xxx}-}</code>,才会显示js的代码。</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205349.png"  alt="image-20200203195747163"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205350.png"  alt="image-20200203195830334"></p>
<p>v-cloak指令的用法</p>
<ol>
<li><p>提供样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span>&#123;</span><br><span class="line">          <span class="attribute">display</span>: none;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在插值表达式所在的标签中添加v-cloak指令</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205351.png"  alt="image-20200203200715975"></p>
</li>
</ol>
<p><strong>背后的原理：先通过样式隐藏内容，然后在内存中进行值的替换，替换好之后再显示最终的结果</strong></p>
<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p><strong>什么是数据绑定 ？</strong></p>
<p><strong><font color = red>数据绑定：将数据填充到标签中</font></strong> </p>
<h2 id="数据绑定指令"><a href="#数据绑定指令" class="headerlink" title="数据绑定指令"></a>数据绑定指令</h2><table>
<thead>
<tr>
<th>指令</th>
<th>作用</th>
<th align="left">优劣</th>
</tr>
</thead>
<tbody><tr>
<td>v-text</td>
<td>填充纯文本</td>
<td align="left">相比插值表达式更加简洁,不存在闪动问题</td>
</tr>
<tr>
<td>v-html</td>
<td>填充HTML片段</td>
<td align="left">存在安全问题。本网站内部数据可以使用，来自第三方的数据不使用</td>
</tr>
<tr>
<td>v-pre</td>
<td>填充原始信息</td>
<td align="left">显示原始信息，跳过编译过程</td>
</tr>
</tbody></table>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205352.png"  alt="image-20200203201701589"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205353.png"  alt="image-20200203201831661"></p>
<h2 id="数据响应式"><a href="#数据响应式" class="headerlink" title="数据响应式"></a>数据响应式</h2><p><strong>如何理解响应式</strong>  </p>
<ul>
<li><strong><font color = red>html5中的响应式（屏幕尺寸的变化导致样式的变化）</font></strong> </li>
<li><strong><font color = greew>数据的响应式（数据的变化导致页面内容的变化</font></strong></li>
</ul>
<h2 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h2><p><strong>只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</strong></p>
<p><strong>v-once  只编译一次  显示内容之后不再具有响应式功能</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205354.png"  alt="image-20200205161617663"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205355.png"  alt="image-20200205161855971"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>指令</tag>
        <tag>v-cloak</tag>
        <tag>数据绑定指令</tag>
        <tag>v-text</tag>
        <tag>v-html</tag>
        <tag>v-pre</tag>
        <tag>数据响应式</tag>
        <tag>v-once</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习-2</title>
    <url>/30457.html</url>
    <content><![CDATA[<h2 id="Vue模板语法"><a href="#Vue模板语法" class="headerlink" title="Vue模板语法"></a>Vue模板语法</h2><h3 id="模板语法概述"><a href="#模板语法概述" class="headerlink" title="模板语法概述"></a>模板语法概述</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205441.png"  alt="image-20200203160116774"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205442.png"  alt="image-20200203160236930"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205443.png"  alt="image-20200203160427248"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205444.png"  alt="image-20200203160509897"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205445.png"  alt="image-20200203160602348"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端渲染</tag>
        <tag>前端渲染方式</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习-1</title>
    <url>/30649.html</url>
    <content><![CDATA[<h2 id="Vue概述"><a href="#Vue概述" class="headerlink" title="Vue概述"></a>Vue概述</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205518.png"  alt="image-20200202215411605"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205519.png"  alt="image-20200202215451536"></p>
<h2 id="Vue基本使用"><a href="#Vue基本使用" class="headerlink" title="Vue基本使用"></a>Vue基本使用</h2><h3 id="传统开发模式对比"><a href="#传统开发模式对比" class="headerlink" title="传统开发模式对比"></a>传统开发模式对比</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205520.png"  alt="image-20200202220159403"></p>
<h3 id="Vue-js之HelloWorld基本步骤"><a href="#Vue-js之HelloWorld基本步骤" class="headerlink" title="Vue.js之HelloWorld基本步骤"></a>Vue.js之HelloWorld基本步骤</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205521.png"  alt="image-20200202220242376"></p>
<h3 id="Vue-js之HelloWorld细节分析"><a href="#Vue-js之HelloWorld细节分析" class="headerlink" title="Vue.js之HelloWorld细节分析"></a>Vue.js之HelloWorld细节分析</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205522.png"  alt="image-20200203153725238"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vue概述</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Web开发-6</title>
    <url>/60251.html</url>
    <content><![CDATA[<h2 id="Thymeleaf-公共页面元素抽取"><a href="#Thymeleaf-公共页面元素抽取" class="headerlink" title="Thymeleaf 公共页面元素抽取"></a>Thymeleaf 公共页面元素抽取</h2><p>list页面和主页面的侧边栏和顶部都相同，我们是不是应该将它抽取出来呢？</p>
<ol>
<li><p>抽取公共片段 th:fragment 定义模板名</p>
</li>
<li><p>引入公共片段 th:insert 插入模板名</p>
</li>
</ol>
<p>我们来抽取一下，使用list列表做演示！我们要抽取头部，nav标签</p>
<p>为了重用更清晰，我们建立一个commons文件夹，专门存放公共页面</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205803.png"  alt="image-20200202202108899"></p>
<p><strong>除了使用insert插入，还可以使用replace替换，或者include包含，三种方式会有一些小区别，可以见名知义；</strong></p>
<p><strong>我们使用replace替换，可以解决div多余的问题，可以查看thymeleaf的文档学习</strong></p>
<p>将主页面中和list页面中的侧边栏和顶部代码删除后，我们去页面中引入一下。</p>
<p><code>&lt;div th:replace=&quot;~{commons/commons::topbar}&quot;&gt;&lt;/div&gt;</code></p>
<p><code>&lt;div th:replace=&quot;~{commons/commons::sidebar}&quot;&gt;&lt;/div&gt;</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205804.png"  alt="image-20200202202552513"></p>
<p>解决我们侧边栏激活问题！</p>
<ol>
<li><p>侧边栏激活样式是一个class名叫active所控制的</p>
</li>
<li><p>将首页的超链接地址改到项目中</p>
</li>
<li><p>我们在a标签中加一个判断，使用class改变标签的值</p>
</li>
</ol>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205805.png"  alt="image-20200202205337510"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205806.png"  alt="image-20200202205459263"></p>
<p>其他的同理</p>
<h2 id="员工管理"><a href="#员工管理" class="headerlink" title="员工管理"></a>员工管理</h2><p>将主页中的Customers改名为员工管理。点击发送请求查询所有员工信息，成功查询之后转发到list页面中，在list页面中同样引入侧边栏和顶部栏。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205807.png"  alt="image-20200202210224637"></p>
<p>控制器</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205808.png"  alt="image-20200202210439144"></p>
<p>list页面遍历我们的员工信息！顺便美化一些页面，增加添加，修改，删除的按钮</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205809.png"  alt="image-20200202210852979"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205810.png"  alt="image-20200202211509797"></p>
<h2 id="添加员工"><a href="#添加员工" class="headerlink" title="添加员工"></a><strong>添加员工</strong></h2><ol>
<li><p>将添加员工信息改为超链接</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205811.png"  alt="image-20200203112107017"></p>
</li>
<li><p>编写对应的controller</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205812.png"  alt="image-20200203112322322"></p>
</li>
<li><p>添加前端add页面，复制list页面，修改即可。加入了bootstrap的表单样式</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205813.png"  alt="image-20200203113447034"></p>
</li>
<li><p>当前端页面提交时，编写对应的controller</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205814.png"  alt="image-20200203114029278"></p>
</li>
<li><p>前端填写数据，注意时间问题</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205815.png"  alt="image-20200203114509102"></p>
<p><strong>点击提交，后台输出正常！页面跳转及数据显示正常</strong></p>
<p><strong>由于目前很多富文本编辑器提供的日期选择格式都是yy-MM-dd（2020-02-20）所以当我们换一个时间格式提交时</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205816.png"  alt="image-20200203114747472"></p>
<p><strong>发现页面出现了400错误!</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205817.png"  alt="image-20200203114859223"></p>
<p>生日我们提交的是一个日期 ， 我们第一次使用的 <strong>/</strong> 正常提交成功了，后面使用 <strong>-</strong> 就错误了，所以这里面应该存在一个<strong>日期格式化</strong>的问题；</p>
<p><strong>SpringMVC会将页面提交的值转换为指定的类型，默认日期是按照 / 的方式提交</strong> 。 比如将2019/01/01 转换为一个date对象。</p>
<p>那思考一个问题？我们能不能修改这个默认的格式呢？</p>
<p>我们去看webmvc的自动配置文件；找到一个日期格式化的方法，我们可以看一下</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205818.png"  alt="image-20200203115911590"></p>
<p>这个在配置类中，所以我们可以自定义的去修改这个时间格式化问题，我们在我们的配置文件中修改一下</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205819.png"  alt="image-20200203120550536"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205820.png"  alt="image-20200203120631783"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205821.png"  alt="image-20200203120650204"></p>
</li>
</ol>
<h2 id="员工修改"><a href="#员工修改" class="headerlink" title="员工修改"></a>员工修改</h2><p>我们要实现员工修改功能，需要实现两步</p>
<ol>
<li>点击修改按钮，去到编辑页面，我们可以复制使用添加员工的add页面为upadate页面实现</li>
<li>显示原数据，修改完毕后跳回列表页面</li>
</ol>
<p>首先在list页面中修改跳转链接的位置</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205822.png"  alt="image-20200203121450419"></p>
<p>编写对应的controller</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205823.png"  alt="image-20200203121811710"></p>
<p>update页面</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205824.png"  alt="image-20200203121847067"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205825.png"  alt="image-20200203122633525"></p>
<p>update对应的controller</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205826.png"  alt="image-20200203122829501"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205827.png"  alt="image-20200203122958675"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205828.png"  alt="image-20200203123041419"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205829.png"  alt="image-20200203123129494"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205830.png"  alt="image-20200203123146153"></p>
<h2 id="删除员工"><a href="#删除员工" class="headerlink" title="删除员工"></a>删除员工</h2><p>list页面，编写提交地址</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205831.png"  alt="image-20200203123304230"></p>
<p>编写Controller</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205832.png"  alt="image-20200203123419227"></p>
<p>测试</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205833.png"  alt="image-20200203123442025"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205834.png"  alt="image-20200203123503353"></p>
<h2 id="定制错误页面"><a href="#定制错误页面" class="headerlink" title="定制错误页面"></a>定制错误页面</h2><p>我们只需要在模板目录下添加一个error文件夹，文件夹中存放我们相应的错误页面，比如404.html 或者 4xx.html 等等，SpringBoot就会帮我们自动使用了！</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205835.png"  alt="image-20200203123707599"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205836.png"  alt="image-20200203123842805"></p>
<h2 id="注销功能"><a href="#注销功能" class="headerlink" title="注销功能"></a>注销功能</h2><p>来到顶部导航栏中的代码</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205837.png"  alt="image-20200203124036826"></p>
<p>编写对应的controller</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205838.png"  alt="image-20200203124157837"></p>
<p>测试</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205839.png"  alt="image-20200203124229292"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205840.png"  alt="image-20200203124243435"></p>
<h2 id="测试地址"><a href="#测试地址" class="headerlink" title="测试地址"></a><a href="http://kylin.show:8888/kylin/" target="_blank" rel="noopener">测试地址</a></h2>]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Web开发</tag>
        <tag>时间格式化</tag>
        <tag>定制错误页面</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Web开发-5</title>
    <url>/2806538343.html</url>
    <content><![CDATA[<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>templates下的页面只能通过Controller跳转实现，而static下的页面是能直接被外界访问的，就能正常访问了。</p>
<p>我们把登录页面的表单提交地址写一个controller！</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205944.png"  alt="image-20200202163257515"></p>
<p><strong>我们再添加一个视图控制映射，在我们的自己的MyMvcConfig中</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205945.png"  alt="image-20200202170427565"></p>
<p>去编写对应的controller</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205946.png"  alt="image-20200202171423168"></p>
<p>页面存在缓存，所以我们需要禁用模板引擎的缓存</p>
<p><code>spring.thymeleaf.cache=false</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205947.png"  alt="image-20200202163837630"></p>
<p>模板引擎修改后，想要实时生效！页面修改完毕后，IDEA小技巧 ： Ctrl + F9 重新编译！</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205948.png"  alt="image-20200202163914090"></p>
<p>登录失败的话，我们需要将后台信息输出到前台，可以在首页标题下面加上判断！</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205949.png"  alt="image-20200202165215449"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205950.png"  alt="image-20200202165426852"></p>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>我们可以直接登录到后台主页，不用登录也可以实现！</p>
<p>怎么处理这个问题呢？我们可以使用拦截器机制，实现登录检查！</p>
<p>我们先自定义一个拦截器</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205951.png"  alt="image-20200202172012322"></p>
<p>登录页</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205952.png"  alt="image-20200202172550900"></p>
<p>然后将拦截器注册到我们的SpringMVC配置类当中！</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205953.png"  alt="image-20200202172251814"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205954.png"  alt="image-20200202172947804"></p>
<p>我们然后在后台主页，获取用户登录的信息</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205955.png"  alt="image-20200202172813893"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404205956.png"  alt="image-20200202173042709"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Web开发</tag>
        <tag>登录</tag>
        <tag>拦截器</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库练习</title>
    <url>/5.html</url>
    <content><![CDATA[<h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><ol>
<li>查询所有职员的所有信息<br><code>select * from tbemp;</code></li>
<li>查询所有职员的姓名,电话,地址<br><code>select ename,etel,eaddr from tbemp;</code></li>
<li>查询所有女职员的详细信息<br><code>select * from tbemp where esex = &#39;女&#39;;</code></li>
<li>查询年龄在24到26岁之间的职员的姓名,性别<br><code>select ename,esex from tbemp where eage &gt;=24 and eage &lt;=26;</code><br><code>select ename,esex from tbemp where eage between 24 and 26;</code></li>
<li>查询家住长沙的女职员的姓名,电话,地址<br><code>select * from tbemp where eaddr like &#39;%长沙%&#39; and esex = &#39;女&#39;;</code><br><code>select * from tbemp where instr(eaddr,&#39;长沙&#39;)&gt;0 and esex = &#39;女&#39;;</code></li>
<li>查询李云,孙一成,林笑的电话,地址<br><code>select eaddr,etel from tbemp where ename = &#39;李云&#39; or ename = &#39;孙一成&#39; or ename = &#39;林笑&#39;;</code><br><code>select eaddr,etel from tbemp where ename in (&#39;李云&#39;,&#39;孙一成&#39;,&#39;林笑&#39;);</code></li>
<li>查询郴洲和株洲的职员的姓名,性别,年龄<br><code>select ename,esex,eage from tbemp where eaddr like &#39;%郴洲%&#39; or eaddr like &#39;%株洲%&#39;;</code><br><code>select ename,esex,eage from tbemp where instr(eaddr,&#39;郴洲&#39;)&gt;0 or instr(eaddr,&#39;株洲&#39;)&gt;0;</code></li>
<li>查询家住长沙,年龄在25到28岁之间的男职员的姓名<br><code>select ename from tbemp where eaddr like &#39;%长沙%&#39; and eage between 25 and 28 and esex =&#39;男&#39;;</code><br><code>select ename from tbemp where instr(eaddr,&#39;长沙&#39;)&gt;0 and eage between 25 and 28 and esex =&#39;男&#39;;</code></li>
<li>查询邮件地址为空的职员<br><code>select * from tbemp where eemail is null;</code></li>
</ol>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ol>
<li>所有职员,所有商品的销售情况,包括:职员姓名,商品类别,商品品牌,商品规格,销售数量,销售价值,销售时间,按销售时间从高到低排列<br><code>select e.ename,p.ptype,p.pmark,p.pspec,s.pqty,s.pamount,s.sdate from tbemp e  left join tbsales s on e.eid = s.eid full outer join tbprod p on  s.pid=p.pid order by s.sdate asc;</code></li>
<li>笔记本4月份的销售情况,包括:商品编号,商品品牌,商品规格,销售数量,销售价值,按销售数量从低到高排列<br><code>select p.ptype ,s.pid,p.pmark,p.pspec,s.pqty,s.pamount from tbsales s right join tbprod p on s.pid = p.pid where to_char(s.sdate,&#39;mm&#39;)= 04 and p.ptype = &#39;笔记本&#39; order by s.pqty asc;</code></li>
<li>李云3月份的销售情况,包括:商品编号,销售数量,销售价值<br><code>select s.pid,s.pqty,s.pamount from tbemp e left join tbsales s on e.eid = s.eid  where e.ename = &#39;李云&#39; and to_char(s.sdate,&#39;mm&#39;)= 03;</code></li>
<li>长虹29英寸纯平艺术电视机的销售情况,包括:销售数量,销售价值,销售时间<br><code>select s.pqty,s.pamount,s.sdate from tbsales s right join tbprod p on  s.pid = p.pid where p.pmark=&#39;长虹&#39; and p.pspec like &#39;29英寸纯平艺术&#39; and p.ptype = &#39;电视机&#39;;</code></li>
<li>长沙男职员4月份的销售情况,包括:职员姓名,商品类别,商品品牌,商品规格,销售数量,销售价值<br><code>select e.ename,p.ptype,p.pmark,p.pspec,s.pqty,s.pamount from tbemp e left join tbsales s on e.eid = s.eid full outer join tbprod p on s.pid = p.pid where instr(eaddr,&#39;长沙&#39;)&gt;0 and to_char(s.sdate,&#39;mm&#39;)=4 and esex=&#39;男&#39;;</code></li>
</ol>
<h2 id="合计"><a href="#合计" class="headerlink" title="合计"></a>合计</h2><ol>
<li><p>总共有多少个职员？<br> <code>select count(*)职员个数 from tbemp;</code></p>
</li>
<li><p>长虹电视机被销售了多少次?<br> <code>select sum(pqty) 销售数量  from  tbsales s right join tbprod p on s.pid = p.pid and p.pmark = &#39;长虹&#39;and p.ptype=&#39;电视机&#39;;</code></p>
</li>
<li><p>年龄最小的女职员的年龄<br> <code>select min(eage) as 女职员最小年龄 from tbemp where esex=&#39;女&#39;;</code></p>
</li>
<li><p>笔记本单笔销售价值最高的单笔销售价值;<br> <code>select max(s.pamount)最高单笔销售价值 from tbsales s right join tbprod p on s.pid = p.pid where p.ptype=&#39;笔记本&#39;;</code></p>
</li>
<li><p>熊猫电视机的平均销售价格</p>
<p>  <code>select avg(s.pamount) from tbsales s right join tbprod p on s.pid = p.pid where p.ptype =&#39;电视机&#39;and p.pmark=&#39;熊猫&#39;;</code><br>  <code>select avg(s.pamount)/avg(s.pqty) from tbsales s right join tbprod p on s.pid = p.pid where p.ptype =&#39;电视机&#39;and p.pmark=&#39;熊猫&#39;;</code></p>
</li>
<li><p>紫光笔记本4月份的销售总额<br> <code>select sum(s.pamount)销售总额 from tbsales s right join  tbprod p on s.pid = p.pid and p.pmark=&#39;紫光&#39;and p.ptype =&#39;笔记本&#39; and to_char(s.sdate,&#39;mm&#39;)=04;</code></p>
</li>
</ol>
<h2 id="分组与合计"><a href="#分组与合计" class="headerlink" title="分组与合计"></a>分组与合计</h2><ol>
<li><p>按类型,品牌统计商品的销售总数量,销售总数量低于20的不统计<br><code>select p.ptype,p.pmark,sum(s.pqty)销售总数量 from tbsales s right join tbprod p on s.pid = p.pid group by p.ptype,p.pmark having sum(s.pqty)&gt;=20;</code></p>
</li>
<li><p>按品牌,规格统计笔记本的平均销售价格,按销售价格从高到低的顺序显示<br><code>select p.pmark,p.pspec,avg(s.pamount/s.pqty) from tbsales s right join tbprod p on s.pid = p.pid where p.ptype= &#39;笔记本&#39; group by p.pmark,p.pspec order by avg(s.pamount/s.pqty) desc;</code><br><code>select p.pmark,p.pspec,avg(s.pamount) from tbsales s right join tbprod p on s.pid = p.pid where p.ptype= &#39;笔记本&#39; group by p.pmark,p.pspec order by avg(s.pamount/s.pqty) desc;</code></p>
</li>
<li><p>按姓名统计男职员3月份的销售总额,销售总额低于80000的不统计<br><code>select e.ename,sum(s.pamount)销售总额 from tbemp e left join tbsales s on e.eid = s.eid where e.esex = &#39;男&#39; and to_char(s.sdate,&#39;mm&#39;)=03 group by e.ename having sum(s.pamount) &gt;=80000;</code></p>
</li>
<li><p>找出销售总额最高的职员的姓名<br><code>select ename from (select e.ename,sum(s.pamount)a  from tbemp e inner join tbsales s on e.eid = s.eid group by ename order by a desc ) where rownum =1;</code></p>
</li>
<li><p>按姓名统计每个职员一共完成了多少笔销售业务<br><code>select ename,count(s.pqty) from tbemp e left join tbsales s on e.eid = s.eid group by ename;</code></p>
</li>
<li><p>找出完成销售业务笔数最少的职员的姓名和他完成的业务数<br><code>select * from (select e.ename,count(s.pqty) c from tbemp e left join tbsales s on e.eid = s.eid group by e.ename order by  c asc)where rownum = 1 ;</code></p>
</li>
<li><p>按性别统计职员的最大年龄和最小年龄<br><code>select esex,max(eage),min(eage) from tbEmp group by esex;</code></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>题目</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Web开发-4</title>
    <url>/3494858993.html</url>
    <content><![CDATA[<h2 id="默认访问首页"><a href="#默认访问首页" class="headerlink" title="默认访问首页"></a>默认访问首页</h2><p>SpringBootWeb开发自动配置了，当浏览器地址输入‘/‘时自动去四个静态资源文件夹classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/.下自动映射到名为index.html的页面。<strong>由于引入了thymeleaf所以放在templates下的index.html在浏览器输入‘/’时也能访问。</strong>我们也可以自己扩展配置MVC映射路径。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210148.png"  alt="image-20200120204504603"></p>
<p>修改项目启动名(项目路径)<code>server.servlet.context-path=/kylin</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210149.png"  alt="image-20200120211106311"></p>
<p>现在你访问localhost:8080 就不行了，需要访问localhost:8080/king</p>
<p>为了保证资源导入稳定，我们建议在所有资源导入时候使用 th:去替换原有的资源路径！</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210150.png"  alt="image-20200120211450112"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210151.png"  alt="image-20200120211515337"></p>
<h2 id="页面国际化"><a href="#页面国际化" class="headerlink" title="页面国际化"></a>页面国际化</h2><p><strong>第一步 ：</strong>编写国际化配置文件，抽取页面需要显示的国际化页面消息。我们可以去登录页面查看一下</p>
<p>先在IDEA中统一设置properties的编码问题！</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210152.png"  alt="image-20200121175320411"></p>
<p>我们在resources资源文件下新建一个<strong>i18</strong>n目录，建立一个<strong>login.propetries</strong>文件，还有一个<strong>login_zh_CN.properties</strong>,发现IDEA自动识别了我们要做国际化操作；文件夹变了</p>
<p><strong>i18n（其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数）是“国际化”的简称。</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210153.png"  alt=""></p>
<p>我们可以在这上面去新建一个文件</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210154.png"  alt=""></p>
<p>弹出如下页面：我们再添加一个英文的</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210155.png"  alt=""></p>
<p>这样就快捷多了</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210156.png"  alt=""></p>
<p><strong>接下来，我们就来编写配置，我们可以看到idea下面有另外一个视图</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210157.png"  alt=""></p>
<p>我们添加一下首页的内容！</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210158.png"  alt=""></p>
<p>然后依次添加其他页面内容即可！</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210159.png"  alt=""></p>
<p>然后去查看我们的配置文件</p>
<p>login.properties ： 默认</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210200.png"  alt="image-20200127200211045"></p>
<p>英文:</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210201.png"  alt="image-20200127200301320"></p>
<p>中文:</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210202.png"  alt="image-20200127200348547"></p>
<p><strong>第二步 ：我们去看一下SpringBoot对国际化的自动配置！</strong></p>
<p>这里又涉及到一个类： MessageSourceAutoConfiguration ，里面有一个方法，这里发现SpringBoot已经自动配置好了管理我们国际化资源文件的组件 ResourceBundleMessageSource</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Resource[] NO_RESOURCES = <span class="keyword">new</span> Resource[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageSourceAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>) <span class="comment">//我们的配置文件可以直接放在类路径下叫： messages.properties， 就可以进行国际化操作了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">　　　　　　　　<span class="comment">//设置国际化文件的基础名（去掉语言国家代码的）</span></span><br><span class="line">            messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">        Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">        <span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">            messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">        messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们真实 的情况是放在了i18n目录下，所以我们要去配置这个messages的路径；</p>
<p><code>spring.messages.basename=i18n.login</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210203.png"  alt="image-20200128200435072"></p>
<p><strong>第三步 ：</strong> 去页面获取国际化的值；</p>
<p>查看Thymeleaf的文档，找到message取值操作为： <strong>#{…}</strong>。</p>
<p>我们去页面测试下</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210204.png"  alt="image-20200128200952360"></p>
<p>其余同理！IDEA还有提示，非常智能的！</p>
<p>我们可以去打开项目，访问一下，发现已经自动识别为中文的了！</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210205.png"  alt="image-20200128201114715"></p>
<p><strong>但是我们想要更好！可以根据按钮自动切换中文英文！</strong></p>
<p>在Spring中有一个国际化的Locale （区域信息对象）；里面有一个叫做LocaleResolver （获取区域信息对象）的解析器</p>
<p>我们去我们webmvc自动配置文件，寻找一下！看到SpringBoot默认配置了</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210206.png"  alt="image-20200128201251370"></p>
<p>AcceptHeaderLocaleResolver 这个类中有一个方法</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210207.png"  alt="image-20200128201353680"></p>
<p>那假如我们现在想点击链接让我们的国际化资源生效，就需要让我们自己的locale生效！</p>
<p>我们去自己写一个自己的LocaleResolver，可以在链接上携带区域信息！</p>
<p>修改一下前端页面的跳转连接；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index.html(l='zh_CN')&#125;"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index.html(l='en_US')&#125;"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210208.png"  alt="image-20200128201554977"></p>
<p>我们去写一个处理的组件类</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210209.png"  alt="image-20200128201811505"></p>
<p>为了让我们的区域化信息能够生效，我们需要再配置一下这个组件！在我们自己的MvcConofig下添加bean</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210210.gif"  alt="image-20200128201913283"></p>
<p><strong>我们重启项目，来访问一下，发现点击按钮可以实现成功切换！</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210211.png"  alt="GIF"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Web开发</tag>
        <tag>默认访问首页</tag>
        <tag>页面国际化</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Web开发-3</title>
    <url>/1311491410.html</url>
    <content><![CDATA[<h2 id="SpringMVC自动配置"><a href="#SpringMVC自动配置" class="headerlink" title="SpringMVC自动配置"></a>SpringMVC自动配置</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210348.png"  alt="image-20200118201741942"></p>
<p>① 配置了视图解析器bean；<br>② 静态资源访问支持，包括WebJars；<br>③ 注册了转换器和格式化器；<br>④ 请求响应信息转换器；<br>⑤ 注册信息校验解析器–定义错误代码生成规则；<br>⑥ 静态页面index.html支持(欢迎页)；<br>⑦ 项目浏览器图标支持；<br>⑧ 可配置web数据绑定初始化器bean的自动使用</p>
<p><a href="https://docs.spring.io/spring-boot/docs/2.2.3.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-auto-configuration" target="_blank" rel="noopener">官方文档</a></p>
<h2 id="修改SpringBoot的默认配置"><a href="#修改SpringBoot的默认配置" class="headerlink" title="修改SpringBoot的默认配置"></a>修改SpringBoot的默认配置</h2><p><strong>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置@bean），如果有就用用户配置的，如果没有就用自动配置的；如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来！</strong></p>
<h3 id="扩展使用SpringMVC"><a href="#扩展使用SpringMVC" class="headerlink" title="扩展使用SpringMVC"></a>扩展使用SpringMVC</h3><blockquote>
<p>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</p>
</blockquote>
<p><strong>我们要做的就是编写一个@Configuration注解类，并且类型要为WebMvcConfigurer，还不能标注@EnableWebMvc注解。</strong></p>
<p>我们新建一个包叫config，写一个类MyMvcConfig</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210349.png"  alt="image-20200118204137572"></p>
<p>我们去浏览器访问一下</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210350.png"  alt="image-20200118204339536"></p>
<p><strong>确实也跳转过来了！所以说，我们要扩展SpringMVC，官方就推荐我们这么去使用，既保SpringBoot留所有的自动配置，也能用我们扩展的配置！</strong></p>
<p>原理分析：</p>
<ul>
<li><p>WebMvcAutoConfiguration 是 SpringMVC的自动配置类，里面有一个类WebMvcAutoConfigurationAdapter</p>
</li>
<li><p>这个类上有一个注解，在做其他自动配置时会导入：@Import({WebMvcAutoConfiguration.EnableWebMvcConfiguration.class})</p>
</li>
<li><p>我们点进EnableWebMvcConfiguration这个类看一下，它继承了一个父类：DelegatingWebMvcConfiguration，这个父类中有这样一段代码</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210351.png"  alt="image-20200118205338920"></p>
</li>
<li><p>我们可以在这个类中去寻找一个我们刚才设置的viewController当做参考，发现它调用了一个</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210352.png"  alt="image-20200118205442346"></p>
</li>
<li><p>我们点进去看一下</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210353.png"  alt="image-20200118205605630"></p>
</li>
<li><p>所以得出结论：所有的WebMvcConfiguration都会被调用用，不止Spring自己的配置类，我们自己的配置类当然也会被调用；</p>
</li>
</ul>
<h3 id="全面接管SpringMVC"><a href="#全面接管SpringMVC" class="headerlink" title="全面接管SpringMVC"></a>全面接管SpringMVC</h3><blockquote>
<p> If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc.</p>
</blockquote>
<p><strong>全面接管即：SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己去配置！只需在我们的配置类中要加一个@EnableWebMvc.</strong></p>
<p>我们看下如果我们全面接管了SpringMVC了，我们之前SpringBoot给我们配置的静态资源映射一定会无效，我们可以去测试一下。</p>
<p>不加注解之前，访问首页</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210354.png"  alt="image-20200118205901672"></p>
<p>给配置类加上注解：@EnableWebMvc</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210355.png"  alt="image-20200118205955951"></p>
<p><strong>我们发现所有的SpringMVC自动配置都失效了！回归到了最初的样子！</strong></p>
<p>为什么加了一个注解，自动配置就失效了！我们看下源码</p>
<p>这里发现它是导入了一个类，我们可以继续进去看</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210356.png"  alt="image-20200118210256762"></p>
<p>它继承了一个父类</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210357.png"  alt="image-20200118210342299"></p>
<p>我们来回顾一下Webmvc自动配置类</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210358.png"  alt="image-20200118210459646"></p>
<p><strong>总结一句话：@EnableWebMvc将WebMvcConfigurationSupport组件导入进来了；而导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能！</strong></p>
<p><strong>在SpringBoot中会有非常多的\</strong>*Configurer帮助我们进行扩展配置，只要看见了这个，我们就应该多留心注意~**</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Web开发</tag>
        <tag>SpringMVC自动配置</tag>
        <tag>扩展SpringMVC</tag>
        <tag>全面接管SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Web开发-2</title>
    <url>/959247812.html</url>
    <content><![CDATA[<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>前端交给我们的页面，是html页面。如果是我们以前开发，我们需要把他们转成jsp页面，jsp好处就是当我们查出一些数据转发到JSP页面以后，我们可以用jsp轻松实现数据的显示，及交互等。jsp支持非常强大的功能，包括能写Java代码，但是呢，我们现在的这种情况，SpringBoot这个项目首先是以jar的方式，不是war，像第二，我们用的还是嵌入式的Tomcat，所以呢，他现在默认是不支持jsp的。</p>
<p>那不支持jsp，如果我们直接用纯静态页面的方式，那给我们开发会带来非常大的麻烦，那怎么办呢，SpringBoot推荐你可以来使用模板引擎。</p>
<p>那么这模板引擎，我们其实大家听到很多，其实jsp就是一个模板引擎，还有以用的比较多的freemarker，包括SpringBoot给我们推荐的Thymeleaf，模板引擎有非常多，但再多的模板引擎，他们的思想都是一样的，什么样一个思想呢我们来看一下这张图。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210515.png"  alt="image-20200118160118011"></p>
<p>模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，我们来组装一些数据，我们把这些数据找到。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想。只不过呢，就是说不同模板引擎之间，他们可能这个语法有点不一样。其他的我就不介绍了，我主要来介绍一下SpringBoot给我们推荐的Thymeleaf模板引擎，这模板引擎呢，是一个高级语言的模板引擎，他的这个语法更简单。而且呢，功能更强大。</p>
<p>引入thymeleaf </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以查看依赖关系,发现spring-boot-starter-thymeleaf下面已经包括了spring-boot-starter-web,所以可以把spring-boot-starter-web的依赖去掉.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf模板--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210516.png"  alt="image-20200118171108820"></p>
<h2 id="使用Thymeleaf"><a href="#使用Thymeleaf" class="headerlink" title="使用Thymeleaf"></a>使用Thymeleaf</h2><p>前面呢，我们已经引入了Thymeleaf，那这个要怎么使用呢？<br>我们首先得按照SpringBoot的自动配置原理看一下我们这个Thymeleaf的自动配置规则，在按照那个规则，我们进行使用。我们去找一下Thymeleaf的自动配置类。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210517.png"  alt="image-20200118172608012"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210518.png"  alt="image-20200118172720291"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210519.png"  alt="image-20200118172901416"></p>
<p><strong>我们可以在其中看到默认的前缀和后缀！我们只需要把我们的html页面放在类路径下的templates下，thymeleaf就可以帮我们自动渲染了。</strong></p>
<h2 id="Thymeleaf语法"><a href="#Thymeleaf语法" class="headerlink" title="Thymeleaf语法"></a>Thymeleaf语法</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210520.png"  alt="image-20200118174838491"></p>
<ul>
<li><p>变量表达式： <strong><em>\</em>${…}，\</strong>是获取容器上下文变量的值**.</p>
</li>
<li><p>选择变量表达式： <strong>*{…}，获取指定的对象中的变量值。如果是单独的对象，则等价于${}。</strong></p>
</li>
<li><p>消息表达式： <strong>#{…}表达式与th:text一起使用，加载数据源中的消息，用于国际化</strong></p>
</li>
<li><p>链接网址表达式： <strong>@{…}，获取网址链接</strong></p>
</li>
</ul>
<p>${}是获取容器上下文变量的值，应该是包括所有上下文中的<strong>key-value</strong>。这里一直在想，所谓的应用上下文，容器，值栈都是用来存储key-value值。</p>
<p><em>{}这个表达式，是获取*</em>指定的对象中的变量值<strong>。需要在前面指定对象，可以是</strong>集合中的某个对象，也可以是单独的一个对象**</p>
<p><strong>我们可以使用任意的 th:attr 来替换Html中原生属性的值！</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210521.png"  alt="image-20200118195846553"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>模板引擎</tag>
        <tag>thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Web开发-1</title>
    <url>/2686821502.html</url>
    <content><![CDATA[<h2 id="静态资源映射规则"><a href="#静态资源映射规则" class="headerlink" title="静态资源映射规则"></a>静态资源映射规则</h2><p>我们项目中有许多的静态资源，比如，css，js等文件，这个SpringBoot怎么处理呢？</p>
<p> 如果我们是一个web应用，我们的main下会有一个webapp，我们以前都是将所有的页面导在这里面的，对吧！</p>
<p>但是我们现在的pom呢，打包方式是为jar的方式，那么这种方式SpringBoot能不能来给我们写页面呢？当然是可以的，但是SpringBoot对于静态资源放置的位置，是有规定的！</p>
<p>SpringBoot中，SpringMVC的web配置都在 <strong>WebMvcAutoConfiguration</strong> 这个配置里面，我们可以去看看 WebMvcAutoConfigurationAdapter 中有很多配置方法</p>
<p>比如：addResourceHandlers</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210635.png"  alt="image-20200118105455192"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">                CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;).addResourceLocations(<span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">                <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="keyword">new</span> String[]&#123;staticPathPattern&#125;).addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations())).setCachePeriod(<span class="keyword">this</span>.getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>读一下源代码：比如所有的 /webjars/** ， 都需要去 classpath:/META-INF/resources/webjars/ 找对应的资源，那什么是webjars呢？</p>
<p>webjars本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。使用SpringBoot需要使用webjars，我们可以去搜索一下</p>
<p>网站：<a href="http://www.baidu.com/link?url=mIlNsV-6IxBMBhkb3lsHrSKJ7NkoQ2cZ5mFYAan6hOOApPrarTnv7O78tltep771" target="_blank" rel="noopener">https://www.<strong>webjars</strong>.org/</a> </p>
<p>要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！【导入完毕，查看webjars目录结构，并访问Jquery.js文件】</p>
<p>导入依赖：</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210636.png"  alt="image-20200118105735183"></p>
<p>查看目录结构：</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210637.png"  alt="image-20200118105949309"></p>
<p>访问：只要是静态资源，SpringBoot就会去对应的路径寻找资源，我们这里访问 ：<a href="http://localhost:8080/webjars/jquery/3.4.1/jquery.js" target="_blank" rel="noopener">http://localhost:8080/webjars/jquery/3.4.1/jquery.js</a></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210638.png"  alt="image-20200118114354921"></p>
<p>那我们项目中要是使用自己的静态资源该怎么导入呢？我们看下一行代码；</p>
<p>我们去找staticPathPattern发现第二种映射规则 ： /** , 访问当前的项目任意资源，它会去找 resourceProperties 这个类，我们可以点进去看一下</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210639.png"  alt="image-20200118120415433"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210640.png"  alt="image-20200118120107218"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210641.png"  alt="image-20200118120822089"></p>
<ul>
<li><strong>“classpath:/META-INF/resources/“</strong></li>
<li><strong>“classpath:/resources/“</strong></li>
<li><strong>“classpath:/static/“</strong></li>
<li><strong>“classpath:/public/“</strong></li>
<li><strong>“/“ ：当前项目的根目录</strong></li>
</ul>
<p><strong>优先级按照顺序。即resources&gt;static&gt;public</strong></p>
<p>静态资源文件夹说完后，我们继续看源码！可以看到一个欢迎页的映射，就是我们的首页！</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210642.png"  alt="image-20200118123345463"></p>
<p>欢迎页，静态资源文件夹下的所有index.html页面；被 /** 映射。/**又代表着4个静态资源目录。所以只要index.html存放在静态资源文件夹就能被访问。</p>
<p>比如我访问 localhost:8080/  ，就会找静态资源文件夹下的 index.html </p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210643.png"  alt="image-20200118123731921"></p>
<p>我们也可以自己通过配置文件来指定一下，哪些文件夹是需要我们放静态资源文件的，在application.properties中配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/hello/,classpath:/kylin/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Web开发</tag>
        <tag>静态资源映射规则</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自动配置原理</title>
    <url>/3966649780.html</url>
    <content><![CDATA[<h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><h3 id="分析自动配置原理"><a href="#分析自动配置原理" class="headerlink" title="分析自动配置原理"></a>分析自动配置原理</h3><p>SpringBoot启动的时候加载主配置类，开启了自动配置功能 <strong>@EnableAutoConfiguration</strong> </p>
<p>@EnableAutoConfiguration 作用:</p>
<ul>
<li><p>利用EnableAutoConfigurationImportSelector给容器中导入一些组件，导入了哪些组件呢？</p>
</li>
<li><p>可以查看这个类selectImports()方法的内容，他返回了一个 autoConfigurationEntry , 来自 this.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata); 这个方法。我们继续跟踪；</p>
</li>
<li><p>这个方法中有一个值 ： List<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes); 叫做获取候选的配置 ， 我们点击去继续跟踪；</p>
</li>
<li><pre><code class="java"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>{
    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());
    Assert.notEmpty(configurations, <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct."</span>);
    <span class="keyword">return</span> configurations;
}
&lt;!--￼<span class="number">0</span>--&gt;

**一句话总结 ： 根据当前不同的条件判断，决定这个配置类是否生效！**
</code></pre>
</li>
</ul>
<p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的。</p>
<p>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.http"</span></span><br><span class="line">) <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> logRequestDetails;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding encoding = <span class="keyword">new</span> HttpProperties.Encoding();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLogRequestDetails</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.logRequestDetails;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogRequestDetails</span><span class="params">(<span class="keyword">boolean</span> logRequestDetails)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.logRequestDetails = logRequestDetails;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HttpProperties.<span class="function">Encoding <span class="title">getEncoding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.encoding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Encoding</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET;</span><br><span class="line">        <span class="keyword">private</span> Charset charset;</span><br><span class="line">        <span class="keyword">private</span> Boolean force;</span><br><span class="line">        <span class="keyword">private</span> Boolean forceRequest;</span><br><span class="line">        <span class="keyword">private</span> Boolean forceResponse;</span><br><span class="line">        <span class="keyword">private</span> Map&lt;Locale, Charset&gt; mapping;</span><br><span class="line">        </span><br><span class="line">        、、、、、、</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们去配置文件里面试试前缀，看提示！</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210827.png"  alt="image-20200117203623382"></p>
<p><strong>这就是自动装配的原理！</strong></p>
<p><strong>精髓：</strong></p>
<p><strong>1. SpringBoot启动会加载大量的自动配置类</strong></p>
<p><strong>2. 我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</strong></p>
<p><strong>3. 我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</strong></p>
<p><strong>4. 给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</strong></p>
<p><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件</p>
<p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p>
<h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a><strong>@Conditional</strong></h3><p>了解完自动装配的原理后，我们来关注一个细节问题 ，<strong>自动配置类必须在一定的条件下才能生效；</strong></p>
<p><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p>
<p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>
<table>
<thead>
<tr>
<th>@Conditional扩展注解</th>
<th>作用（判断是否满足当前指定条件）</th>
</tr>
</thead>
<tbody><tr>
<td>@ConditionalOnJava</td>
<td>系统的java版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnBean</td>
<td>容器中存在指定Bean</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定Bean</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEl表达式指定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean，或者这个Bean式首选的Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
</tbody></table>
<p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p>
<p>我们怎么知道哪些自动配置类生效；<strong>我们可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210828.png"  alt="image-20200117204845517"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210829.png"  alt="image-20200117204923193"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210830.png"  alt="image-20200117205004380"></p>
<p><strong>Positive matches:（自动配置类启用的：正匹配）</strong></p>
<p><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></p>
<p><strong>Unconditional classes: （没有条件的类）</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404210831.png"  alt="image-20200117205035182"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>自动配置原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习-3</title>
    <url>/3156928619.html</url>
    <content><![CDATA[<h2 id="Docker常用命令-amp-操作"><a href="#Docker常用命令-amp-操作" class="headerlink" title="Docker常用命令&amp;操作"></a>Docker常用命令&amp;操作</h2><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>检索</td>
<td>docker  search 关键字  eg：docker  search redis</td>
<td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td>
</tr>
<tr>
<td>拉取</td>
<td>docker pull 镜像名:tag</td>
<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>
</tr>
<tr>
<td>列表</td>
<td>docker images</td>
<td>查看所有本地镜像</td>
</tr>
<tr>
<td>删除</td>
<td>docker rmi image-id</td>
<td>删除指定的本地镜像</td>
</tr>
</tbody></table>
<p><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p>
<h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><p><strong>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）</strong></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>搜索镜像</td>
<td>docker search tomcat</td>
</tr>
<tr>
<td>拉取镜像</td>
<td>docker pull tomcat:tag(tag为软件的版本。不写默认latest)</td>
</tr>
<tr>
<td>根据镜像启动容器</td>
<td>docker run –name mytomcat - d tomcat:latest</td>
</tr>
<tr>
<td>查看运行中的容器</td>
<td>docker ps</td>
</tr>
<tr>
<td>停止运行中的容器</td>
<td>docker stop 容器的id</td>
</tr>
<tr>
<td>查看所有的容器</td>
<td>docker ps -a</td>
</tr>
<tr>
<td>启动容器</td>
<td>docker start 容器id</td>
</tr>
<tr>
<td>删除容器</td>
<td>docker rm 容器id</td>
</tr>
<tr>
<td>启动开启端口映射的容器</td>
<td>docker run -d -p 8888:8080 tomcat（-d:后台运行  -p 将主机端口映射到容器的一个端口。主机端口:容器端口)</td>
</tr>
<tr>
<td>查看容器的日志</td>
<td>docker logs 容器名/容器id</td>
</tr>
</tbody></table>
<p><strong>注意：要想访问容器端口必须开启端口映射。将主机端口与容器端口映射。外界想访问主机服务。必须开启相应的防火墙端口，获将防火墙关掉。</strong></p>
<p><strong>CentOs7防火墙放行8080端口</strong></p>
<ul>
<li><code>firewall-cmd --permanent --add-port=8080/tcp</code></li>
<li><code>firewall-cmd --reload</code></li>
<li>查询已开放的端口 <code>netstat -anp</code></li>
<li>查询指定端口是否已开 <code>firewall-cmd --query-port=8888/tcp</code><br>提示 yes，表示开启；no表示未开启。</li>
<li>关闭防火墙<code>service firewalld stop</code></li>
</ul>
<p><a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">文档</a></p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Docker的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习-2</title>
    <url>/3408779517.html</url>
    <content><![CDATA[<h2 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h2><p>在linux虚拟机上安装docker</p>
<ol>
<li><p>检查内核版本，必须是3.10及以上<code>uname -r</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211024.png"  alt="image-20200117150141377"></p>
</li>
<li><p>安装docker<code>yum install docker</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211025.png"  alt="image-20200117152437151"></p>
</li>
<li><p>输入y确认安装</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211026.png"  alt="image-20200117152537823"></p>
</li>
<li><p>启动docker<code>systemctl start docker</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211027.png"  alt="image-20200117152629740"></p>
</li>
<li><p>查看docker版本<code>docker -v</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211028.png"  alt="image-20200117152737366"></p>
</li>
<li><p>默认安装在<code>/var/lib/docker</code></p>
</li>
</ol>
<h2 id="Docker的卸载"><a href="#Docker的卸载" class="headerlink" title="Docker的卸载"></a>Docker的卸载</h2><ol>
<li><p>首先搜索已经安装的docker 安装包<code>yum list installed|grep docker</code>或者<code>rpm -qa|grep docker</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211029.png"  alt="image-20200117151416305"></p>
</li>
<li><p>分别删除安装包 <code>sudo yum –y remove 安装包</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211030.png"  alt="image-20200117152049938"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211031.png"  alt="image-20200117152137971"></p>
</li>
<li><h4 id="删除镜像-容器等-rm-rf-var-lib-docker"><a href="#删除镜像-容器等-rm-rf-var-lib-docker" class="headerlink" title="删除镜像/容器等 rm -rf /var/lib/docker"></a>删除镜像/容器等 <code>rm -rf /var/lib/docker</code></h4><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211032.png"  alt="image-20200117152321675"></p>
</li>
</ol>
<p><strong><a href="http://111.229.150.239/2020/01/15/%E9%94%99%E8%AF%AF%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95-3/" target="_blank" rel="noopener">Docker常见问题</a></strong></p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>安装</tag>
        <tag>卸载</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习-1</title>
    <url>/1378126151.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p>
<p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p>
<p>运行中的这个镜像称为容器，容器启动是非常快速的。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211112.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211113.png"  alt=""></p>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul>
<li><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p>
</li>
<li><p>docker客户端(Client)：连接docker主机进行操作；</p>
</li>
<li><p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p>
</li>
<li><p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p>
</li>
<li><p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p>
</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211114.png"  alt=""></p>
<p>使用Docker的步骤：</p>
<ol>
<li><p>安装Docker</p>
</li>
<li><p>去Docker仓库找到这个软件对应的镜像；</p>
</li>
<li><p>使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p>
</li>
<li><p>对容器的启动停止就是对软件的启动停止；</p>
</li>
</ol>
<h2 id="Docker-的优点"><a href="#Docker-的优点" class="headerlink" title="Docker 的优点"></a>Docker 的优点</h2><p>Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p>
<h3 id="1、快速，一致地交付您的应用程序"><a href="#1、快速，一致地交付您的应用程序" class="headerlink" title="1、快速，一致地交付您的应用程序"></a>1、快速，一致地交付您的应用程序</h3><p>Docker 允许开发人员使用您提供的应用程序或服务的本地容器在标准化环境中工作，从而简化了开发的生命周期。</p>
<p>容器非常适合持续集成和持续交付（CI / CD）工作流程，请考虑以下示例方案：</p>
<ul>
<li>您的开发人员在本地编写代码，并使用 Docker 容器与同事共享他们的工作。</li>
<li>他们使用 Docker 将其应用程序推送到测试环境中，并执行自动或手动测试。</li>
<li>当开发人员发现错误时，他们可以在开发环境中对其进行修复，然后将其重新部署到测试环境中，以进行测试和验证。</li>
<li>测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。</li>
</ul>
<h3 id="2、响应式部署和扩展"><a href="#2、响应式部署和扩展" class="headerlink" title="2、响应式部署和扩展"></a>2、响应式部署和扩展</h3><p>Docker 是基于容器的平台，允许高度可移植的工作负载。Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。</p>
<p>Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。</p>
<h3 id="3、在同一硬件上运行更多工作负载"><a href="#3、在同一硬件上运行更多工作负载" class="headerlink" title="3、在同一硬件上运行更多工作负载"></a>3、在同一硬件上运行更多工作负载</h3><p>Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。</p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaConfig配置Spirng</title>
    <url>/3172093075.html</url>
    <content><![CDATA[<blockquote>
<p>JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的版本， JavaConfig 已正式成为 Spring4 的核心功能 。</p>
</blockquote>
<p>官方文档：<a href="https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/</a></p>
<p>编写一个实体类，Dog</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">//将这个类标注为Spring的一个组件，放到容器中！</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">"dog"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建一个config配置包，编写一个MyConfig配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//代表这是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//通过方法注册一个bean，这里的返回值就Bean的类型，方法名就是bean的id！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext applicationContext =</span><br><span class="line">            <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfig.class);</span><br><span class="line">    Dog dog = (Dog) applicationContext.getBean(<span class="string">"dog"</span>);</span><br><span class="line">    System.out.println(dog.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>导入其他配置如何做呢</strong></p>
<p>我们再编写一个配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//代表这是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig2</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在之前的配置类中我们来选择导入这个配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(MyConfig2.class)  <span class="comment">//导入合并其他配置类，类似于配置文件中的 inculde 标签</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211255.png"  alt="image-20200116213417021"></p>
]]></content>
      <categories>
        <category>SSM</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JavaConfig</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>错误问题记录-3</title>
    <url>/1009477023.html</url>
    <content><![CDATA[<h2 id="Docker下载镜像速度过慢"><a href="#Docker下载镜像速度过慢" class="headerlink" title="Docker下载镜像速度过慢"></a>Docker下载镜像速度过慢</h2><p>虚拟机上安装了docker之后使用<code>docker search mysql</code>查询所提供的mysql镜像。再使用<code>docker pull mysql:5.7</code> 下载mysql镜像，发现下载速度过慢。</p>
<p><strong><font color =red>原因：docker镜像仓库网站是国外的，所导致的下载速度过慢。</font></strong></p>
<p><strong><font color = greew>解决：使用阿里云提供的镜像下载网站</font></strong></p>
<p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/repositories?accounttraceid=7459983e084d47fe9d8c40b0cb408cacfeej" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/repositories?accounttraceid=7459983e084d47fe9d8c40b0cb408cacfeej</a>点击链接进入到阿里云网站。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211426.png"  alt="image-20200115095756092"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211427.png"  alt="image-20200115095857774"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://krbjobfy.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>



<h2 id="Docker方式启动Tomcat，访问首页出现404错误"><a href="#Docker方式启动Tomcat，访问首页出现404错误" class="headerlink" title="Docker方式启动Tomcat，访问首页出现404错误"></a>Docker方式启动Tomcat，访问首页出现404错误</h2><p>使用docker下载tomcat之后，以docker方式启动tomcat，访问首页出现404错误。虚拟机防火墙响应端口都以打开，并将主机8080端口映射到了tomcat容器的8080端口。</p>
<p><strong><font color = red>原因：进入到tomcat的目录中webapps文件夹,发现里面是空的。tomcat默认的欢迎页面实际上放在的路径应该是:webapps/ROOT/index.jsp或者index.html.发现旁边还有个webapps.dist的文件，进入才发现原本应该在webapps中的文件在都在webapps.dist文件中。</font></strong></p>
<p><strong><font color =greew>解决：将webapps.dist文件夹改为webapps。原webapps文件夹删除或改成别的名字</font></strong></p>
<p>查看正在运行的容器，并获取容器id<code>docker ps</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211428.png"  alt="image-20200115104336295"></p>
<p>使用命令: <code>docker exec -it 运行的tomcat容器ID /bin/bash</code> 进入到tomcat的目录</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211429.png"  alt="image-20200115104955964"></p>
<p>使用命令：<code>rm -rf webapps</code>删除webapps文件夹</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211430.png"  alt="image-20200115105216511"></p>
<p>使用命令：<code>mv webapps.dist webapps</code>将webapps.dist重命名为webapps</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211431.png"  alt="image-20200115105322495"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211432.png"  alt="image-20200115105423059"></p>
<h2 id="SpringBoot国际化出现乱码问题"><a href="#SpringBoot国际化出现乱码问题" class="headerlink" title="SpringBoot国际化出现乱码问题"></a>SpringBoot国际化出现乱码问题</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211433.png"  alt="image-20200120212441110"></p>
<p><font color =red><strong>原因：没有正确的配置国际化配置文件的路径，或者properties的乱码问题，或者idea工程的乱码问题</strong>。</font></p>
<p><font color = greew><strong>解决：一一排除。正确配置</strong></font></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211434.png"  alt="image-20200120212833773"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211435.png"  alt="image-20200120212920986"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211436.png"  alt="image-20200120213043782"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211437.png"  alt="image-20200120213120939"></p>
<h2 id="IDEA2019版本中文字体显示效果突兀"><a href="#IDEA2019版本中文字体显示效果突兀" class="headerlink" title="IDEA2019版本中文字体显示效果突兀"></a>IDEA2019版本中文字体显示效果突兀</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211438.png"  alt="image-20200202215654362"></p>
<p><strong><font color = greew>解决：设置Fallback font字体为SimHei</font></strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211439.png"  alt="image-20200202215907688"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200404211440.png"  alt="image-20200202215931287"></p>
]]></content>
      <categories>
        <category>错误问题记录</category>
      </categories>
      <tags>
        <tag>错误问题记录</tag>
        <tag>docker</tag>
        <tag>tomcat</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo部署到云服务</title>
    <url>/40091.html</url>
    <content><![CDATA[<blockquote>
<p>本篇内容用来讲述如何将 hexo 博客部署到腾讯云的服务器上。<br>只要通过三步即可成功部署：</p>
<ol>
<li>云服务器端 git 的配置</li>
<li>Nginx 的配置</li>
<li>本地端 hexo 的设置更改</li>
</ol>
</blockquote>
<h2 id="进入云服务器中"><a href="#进入云服务器中" class="headerlink" title="进入云服务器中"></a>进入云服务器中</h2><p>可以通过各大云服务器官网进入，或者通过Xshell6软件进入。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200404224227.png"  alt="image-20200114105015326"></p>
<h2 id="云服务器端配置-git"><a href="#云服务器端配置-git" class="headerlink" title="云服务器端配置 git"></a>云服务器端配置 git</h2><ul>
<li><p>安装依赖库和编译工具</p>
<ol>
<li><p>安装依赖库</p>
<p><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</code></p>
</li>
<li><p>安装编译工具</p>
<p><code>yum install gcc perl-ExtUtils-MakeMaker package</code></p>
</li>
</ol>
</li>
</ul>
<ul>
<li><p>下载 git</p>
<ol>
<li><p>选择一个目录来存放下载下来的 git 安装包。这里选择了<code>/usr/local/src</code> 目录</p>
<p><code>cd /usr/local/src</code></p>
</li>
<li><p>官网找一个新版稳定的源码包下载到 <code>/usr/local/src</code>文件夹里</p>
<p><code>wget https://www.kernel.org/pub/software/scm/git/git-2.16.2.tar.gz</code></p>
</li>
</ol>
</li>
<li><p>解压编译git</p>
<ol>
<li><p>在当前目录下解压 <code>git-2.16.2.tar.gz</code></p>
<p><code>tar -zvxf git-2.16.2.tar.gz</code></p>
</li>
<li><p>进入 <code>git-2.16.2.tar.gz</code> 目录下</p>
<p><code>cd git-2.16.2</code></p>
</li>
<li><p>执行编译</p>
<p><code>make all prefix=/usr/local/git</code></p>
</li>
<li><p>安装 git 到 <code>/usr/local/git</code> 目录下</p>
<p><code>make install prefix=/usr/local/git</code></p>
</li>
</ol>
</li>
<li><p>配置 git 环境变量</p>
<ol>
<li><p>将 git 加入 PATH 目录中</p>
<p><code>echo &#39;export PATH=$PATH:/usr/local/git/bin&#39; &gt;&gt; /etc/bashrc</code></p>
</li>
<li><p>使 git 环境变量生效</p>
<p><code>source /etc/bashrc</code></p>
</li>
</ol>
</li>
<li><p>查看git版本</p>
<p>  <code>git --version</code></p>
<p>  <img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200404224703.png"  alt="image-20200114110836950"></p>
<p>  如果此时能查看到 git 的版本号，说明我们已经安装成功了</p>
</li>
<li><p>创建 git 仓库，用于存放博客网站资源</p>
<ol>
<li><p>在 <code>home/git</code> 的目录下，创建一个名为<code>hexoBlog</code>的裸仓库（bare repo）。<br>如果没有 <code>home/git</code> 目录，需要先创建；然后修改目录的所有权和用户权限。</p>
<p><code>mkdir /home/git/</code></p>
<p><code>chown -R $USER:$USER /home/git/</code></p>
<p><code>chmod -R 755 /home/git/</code></p>
</li>
<li><p>然后，执行如下命令.这一步主要创建一个裸的 git 仓库</p>
<p><code>cd /home/git/</code></p>
<p><code>git init --bare hexoBlog.git</code></p>
</li>
</ol>
</li>
<li><p>创建一个新的 git 钩子，用于自动部署</p>
<ol>
<li><p>在 <code>/home/git/hexoBlog.git</code> 下，有一个自动生成的 <code>hooks</code> 文件夹。我们需要在里边新建一个新的钩子文件 <code>post-receive</code>。</p>
<p><code>vim /home/git/hexoBlog.git/hooks/post-receive</code></p>
</li>
<li><p>按 <code>i</code> 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。</p>
<p><code>git --work-tree=/home/hexoBlog --git-dir=/home/git/hexoBlog.git checkout -f</code></p>
</li>
<li><p>然后，按 <code>Esc</code> 键退出编辑模式，输入<code>:wq</code> 保存退出。</p>
</li>
<li><p>修改文件权限，使得其可执行。</p>
<p><code>chmod +x /home/git/hexoBlog.git/hooks/post-receive</code></p>
</li>
</ol>
<p>到这里，我们的 git 仓库算是完全搭建好了。下面进行 Nginx 的配置。</p>
</li>
</ul>
<h2 id="云服务器端配置-Nginx"><a href="#云服务器端配置-Nginx" class="headerlink" title="云服务器端配置 Nginx"></a>云服务器端配置 Nginx</h2><ol>
<li><p>安装 Nginx</p>
<p><code>yum install -y nginx</code></p>
</li>
<li><p>启动 Nginx</p>
<p><code>service nginx start</code></p>
</li>
<li><p>测试 Nginx 服务器</p>
<p><code>wget http://127.0.0.1</code></p>
<p>能够正常获取以下欢迎页面说明Nginx安装成功。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200404225411.png"  alt="image-20200114111519880"></p>
</li>
<li><p>测试网页是否能打开.在浏览器中输入服务器 ip 地址，就是服务器的公网 ip。</p>
</li>
<li><p>配置 Nginx 托管文件目录</p>
<ol>
<li><p>创建 <code>/home/hexoBlog</code>目录，用于 Nginx 托管。</p>
<ul>
<li><p><code>mkdir /home/hexoBlog/</code></p>
</li>
<li><p><code>chown -R $USER:$USER /home/hexoBlog/</code></p>
</li>
<li><p><code>chmod -R 755 /home/hexoBlog/</code></p>
</li>
</ul>
</li>
<li><p>查看 Nginx 的默认配置的安装位置</p>
<ul>
<li><code>nginx -t</code></li>
</ul>
</li>
<li><p>修改Nginx的默认配置</p>
<ul>
<li><code>vim /etc/nginx/nginx.conf</code></li>
</ul>
</li>
<li><p>按方向键，找到如下位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   server &#123;</span><br><span class="line">       listen 80 default_server;</span><br><span class="line">       listen [::]:80 default_server;</span><br><span class="line">       root /home/hexoBlog;    <span class="comment">#需要修改</span></span><br><span class="line">       </span><br><span class="line">       server_name www.bujige.net; <span class="comment">#需要修改</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">       include /etc/nginx/default.d/*.conf;</span><br><span class="line">       location / &#123;</span><br><span class="line">       &#125;</span><br><span class="line">       error_page 404 /404.html;</span><br><span class="line">           location = /40x.html &#123;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="image-20200114112030972.png"  alt="image-20200114112030972"></p>
<p>按<code>i</code>键进入插入模式，将其中的 root 值改为 <code>/home/hexoBlog</code> （刚才创建的托管仓库目录）。<br>将 server_name 值改成你的域名</p>
</li>
<li><p>重启 Nginx 服务</p>
<p>​    <code>service nginx restart</code></p>
</li>
</ol>
<p>至此，服务器端配置就结束了。接下来，就剩下本地 hexo 的配置更改了。</p>
</li>
</ol>
<h2 id="修改-hexo-站点配置文件-git-相关设置"><a href="#修改-hexo-站点配置文件-git-相关设置" class="headerlink" title="修改 hexo 站点配置文件 git 相关设置"></a>修改 hexo 站点配置文件 git 相关设置</h2><ol>
<li><p>打开你本地的 hexo 博客所在文件，打开站点配置文件（不是主题配置文件），做以下修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repo: root@你的云服务器的IP地址:/home/git/hexoBlog</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200404225423.png"  alt="image-20200114112324376"></p>
</li>
<li><p>在 hexo 目录下执行部署，试试看打开git bash</p>
<p><code>hexo clean</code></p>
<p><code>hexo d -g</code></p>
</li>
<li><p>在地址栏输入打开你的公网 IP，看是不是已经部署成功了</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images//20200404214342.png"  alt="image-20200114112557307"></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统下环境配置与安装</title>
    <url>/34404.html</url>
    <content><![CDATA[<h2 id="Java的jdk的安装与环境变量配置"><a href="#Java的jdk的安装与环境变量配置" class="headerlink" title="Java的jdk的安装与环境变量配置"></a>Java的jdk的安装与环境变量配置</h2><ul>
<li>下载jdk安装包</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200404225834.png"  alt="image-20200113113703154"></p>
<ul>
<li>上传到linux系统中，可以使用软件（FileZilla）或者命令</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200404225841.png"  alt="image-20200113113839042"></p>
<ul>
<li><p>使用<code>tar -vxf jdk-8u221-linux-x64.tar.gz</code>解压</p>
</li>
<li><p>使用<code>vim /etc/profile</code>配置文件变量,在文件最后添加如下。JAVA_HOME的值是解压文件所在的路径。我的是在/usr/local/java/jdk1.8.0_171</p>
</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200404225845.png"  alt="image-20200113114413425"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">JAVA_HOME</span>=<span class="string">/usr/local/java/jdk1.8.0_171</span></span><br><span class="line"><span class="attr">CLASSPATH</span>=<span class="string">.:$JAVA_HOME/lib.tools.jar</span></span><br><span class="line"><span class="attr">PATH</span>=<span class="string">$JAVA_HOME/bin:$PATH</span></span><br><span class="line"><span class="attr">export</span> <span class="string">JAVA_HOME CLASSPATH PATH</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>source /etc/profile</code> 命令使更改的配置立即生效</p>
</li>
<li><p><code>java -version</code> 查看当前java的版本</p>
</li>
</ul>
<h2 id="删除centos7默认jdk"><a href="#删除centos7默认jdk" class="headerlink" title="删除centos7默认jdk"></a>删除centos7默认jdk</h2><p>通过<code>rpm -qa|grep java</code>查看所有安装了的java,  显示所有安装, 管道符|把查询结果交给grep过滤</p>
<p>删除<code>rpm -e --nodeps xxx</code></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200404225849.png"  alt="image-20200113115030504"></p>
<h2 id="Tomcat的安装"><a href="#Tomcat的安装" class="headerlink" title="Tomcat的安装"></a>Tomcat的安装</h2><ol>
<li>把 tomcat 压缩包上传到服务器</li>
<li>解压 tomcat<br>#tarzxvf 压缩包名</li>
<li>解压后的文件夹复制到/usr/local/tomcat<br>#cp-rapache-tomcat-7.0.68/usr/local/tomcat</li>
<li>配置环境变量</li>
<li>1#vim/etc/profile</li>
<li>2 添加内容<br>exportTOMCAT_HOME=/usr/local/tomcat<br>exportCATALINA_HOME=/usr/local/tomcat</li>
<li>放行 8080 端口</li>
<li>1#vim /etc/sysconfig/iptables</li>
<li>2 把包含 22 行复制一行,修改 22 为 8080</li>
<li>2.18080:9000 从 8080 到 9000 全放行</li>
<li>3 重启服务:<br>#serviceiptablesrestart</li>
<li>3.1restart 重启</li>
<li>3.2start 启动</li>
<li>3.3stop 停止</li>
<li>启动 tomcat,进入到 tomcat/bin 文件夹</li>
<li>1 直接启动<br>#./startup.sh</li>
<li>2 启动并动态打印启动信息<br>#./startup.sh&amp;tailf/usr/local/tomcat/logs/catalina.out</li>
</ol>
]]></content>
      <tags>
        <tag>jdk的安装</tag>
        <tag>环境变量的配置</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA将JavaWeb项目部署到服务器</title>
    <url>/30853.html</url>
    <content><![CDATA[<h2 id="IDEA将JavaWeb项目部署到服务器"><a href="#IDEA将JavaWeb项目部署到服务器" class="headerlink" title="IDEA将JavaWeb项目部署到服务器"></a>IDEA将JavaWeb项目部署到服务器</h2><h3 id="IDEA将web项目打包成war包"><a href="#IDEA将web项目打包成war包" class="headerlink" title="IDEA将web项目打包成war包"></a>IDEA将web项目打包成war包</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405094613.png"  alt="image-20200112182331903"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405094731.png"  alt="image-20200112182420248"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405094746.png"  alt="image-20200112182617077"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405094747.png"  alt="image-20200112182738153"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405094748.png"  alt="image-20200112182910787"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405094749.png"  alt="image-20200112182957203"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405094750.png"  alt="image-20200112183151508"></p>
<h3 id="将war包上传到服务器中的Tomcat安装目录中的webapp目录下"><a href="#将war包上传到服务器中的Tomcat安装目录中的webapp目录下" class="headerlink" title="将war包上传到服务器中的Tomcat安装目录中的webapp目录下"></a>将war包上传到服务器中的Tomcat安装目录中的webapp目录下</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405094751.png"  alt="image-20200112183551647"></p>
<h3 id="服务器启动Tomcat"><a href="#服务器启动Tomcat" class="headerlink" title="服务器启动Tomcat"></a>服务器启动Tomcat</h3><p>在服务器中进入到tomcat安装目录下的bin目录使用<strong>startup命令</strong>启动tomcat</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405094752.png"  alt="image-20200112183817425"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405094753.png"  alt="image-20200112183911075"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405094754.png"  alt="image-20200112184107597"></p>
]]></content>
      <tags>
        <tag>项目部署</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置-7</title>
    <url>/10071.html</url>
    <content><![CDATA[<h2 id="外部配置加载顺序"><a href="#外部配置加载顺序" class="headerlink" title="外部配置加载顺序"></a>外部配置加载顺序</h2><p><font color = red><strong>SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</strong></font></p>
<ol>
<li><strong>命令行参数</strong></li>
</ol>
<ul>
<li><p>所有的配置都可以在命令行上进行指定</p>
</li>
<li><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p>
</li>
<li><p>多个配置用空格分开； –配置项=值</p>
</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405094959.png"  alt="image-20200107203419012"></p>
<ol start="2">
<li><p>来自java:comp/env的JNDI属性</p>
</li>
<li><p>Java系统属性（System.getProperties()）</p>
</li>
<li><p>操作系统环境变量</p>
</li>
<li><p>RandomValuePropertySource配置的random.*属性值</p>
</li>
<li><p><strong>jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
</li>
<li><p><strong>jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p>
</li>
<li><p><strong>jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
</li>
<li><p><strong>jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p>
</li>
<li><p>@Configuration注解类上的@PropertySource</p>
</li>
<li><p>通过SpringApplication.setDefaultProperties指定的默认属性</p>
</li>
</ol>
<p><strong>由jar包外向jar包内进行寻找,优先加载带profile再来加载不带profile。高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095223.png"  alt="image-20200107204156843"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095224.png"  alt="image-20200107204311961"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095225.png"  alt="image-20200107204515084"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095226.png"  alt="image-20200107210116373"></p>
<p>所有支持的配置加载来源</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>配置</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>外部配置加载顺序</tag>
      </tags>
  </entry>
  <entry>
    <title>错误问题记录-2</title>
    <url>/19286.html</url>
    <content><![CDATA[<h2 id="SpringBoot指定配置文件于默认配置文件没有形成互补配置"><a href="#SpringBoot指定配置文件于默认配置文件没有形成互补配置" class="headerlink" title="SpringBoot指定配置文件于默认配置文件没有形成互补配置"></a>SpringBoot指定配置文件于默认配置文件没有形成互补配置</h2><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置。指定配置文件和默认加载的这些配置文件共同起作用<strong>没有形成互补配置</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095708.png"  alt="image-20200107181955383"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095717.png"  alt="image-20200107182031350"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095758.png"  alt="image-20200107182209190"></p>
<p><font color = red><strong>原因：SpringBoot2.0版本之后指定文件与默认配置不会形成互补配置，只是指定文件中的配置生效</strong></font></p>
<p>如果想形成互补的话，可以把SpringBoot版本改为2.0之前</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095826.png"  alt="image-20200107182455479"></p>
<p>然后进行打包，命令台使用<strong>–spring.config.location=文件路径</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095826.png"  alt="image-20200107182625943"></p>
<h2 id="SpringBoot指定日志文件和日志Profile功能失效"><a href="#SpringBoot指定日志文件和日志Profile功能失效" class="headerlink" title="SpringBoot指定日志文件和日志Profile功能失效"></a>SpringBoot指定日志文件和日志Profile功能失效</h2><p>编写logback-spring.xml文件，使用日志Profile功能。发现控制台中所有配置并未按配置生效</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</span></span><br><span class="line"><span class="comment">scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。</span></span><br><span class="line"><span class="comment">debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"false"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志的根目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/app/log"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志文件名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"appName"</span> <span class="attr">value</span>=<span class="string">"atguigu-springboot"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">			%d表示日期时间，</span></span><br><span class="line"><span class="comment">			%thread表示线程名，</span></span><br><span class="line"><span class="comment">			%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">			%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="comment">			%msg：日志消息，</span></span><br><span class="line"><span class="comment">			%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"appLogAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定日志文件的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;appName&#125;.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名</span></span><br><span class="line"><span class="comment">        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            滚动时产生的文件的存放位置及文件名称 %d&#123;yyyy-MM-dd&#125;：按天进行日志滚动 </span></span><br><span class="line"><span class="comment">            %i：当文件大小超过maxFileSize时，按照i进行文件滚动</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;appName&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，</span></span><br><span class="line"><span class="comment">            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，</span></span><br><span class="line"><span class="comment">            那些为了归档而创建的目录也会被删除。</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>365<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出格式： --&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [ %thread ] - [ %-5level ] [ %logger&#123;50&#125; : %line ] - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		logger主要用于存放日志对象，也可以定义日志类型、级别</span></span><br><span class="line"><span class="comment">		name：表示匹配的logger类型前缀，也就是包的前半部分</span></span><br><span class="line"><span class="comment">		level：要记录的日志级别，包括 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</span></span><br><span class="line"><span class="comment">		additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，</span></span><br><span class="line"><span class="comment">		false：表示只用当前logger的appender-ref，true：</span></span><br><span class="line"><span class="comment">		表示当前logger的appender-ref和rootLogger的appender-ref都有效</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hibernate logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.atguigu"</span> <span class="attr">level</span>=<span class="string">"debug"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring framework logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，</span></span><br><span class="line"><span class="comment">    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。 </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"stdout"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"appLogAppender"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><font color = red><strong>原因：复制的时候没有复制好，没有正确到添加到项目中。没有出现图片中的确认</strong></font></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095826.png"  alt="image-20200108114158056"></p>
<p><strong>正常情况下都会出现上图中的确认提示，如果没有可以点击右键，选择刷新。</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095834.png"  alt="image-20200108114415154"></p>
<p><strong>在target目录下确认是否正常添加到项目中</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095840.png"  alt="image-20200108114508115"></p>
<h2 id="云服务器下安装Mysql之后不知道登录密码"><a href="#云服务器下安装Mysql之后不知道登录密码" class="headerlink" title="云服务器下安装Mysql之后不知道登录密码"></a>云服务器下安装Mysql之后不知道登录密码</h2><p><strong>使用云服务器安装镜像之后，输入mysql -u root -p之后提示输入密码，不知道密码或者输错密码报错<font color=red>Access denied for user ‘root’@’localhost’ (using password: NO)</font></strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405100246.png"  alt="image-20200112174230020"></p>
<p><strong><font color=red>原因：云服务器镜像下载安装Mysql之后，会提供默认密码账号。或者直接跳过密码登录</font></strong></p>
<p><strong><font color =green>解决一：使用cat default.pass命令查看提供的默认账号密码</font></strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405100253.png"  alt="image-20200112174838700"></p>
<p><font color =greem><strong>解决二：在[mysqld]下添加skip-grant-tables</strong></font></p>
<ol>
<li><p><strong>用命令编辑/etc/my.cnf配置文件，即：<code>vim /etc/my.cnf</code> 或者 <code>vi /etc/my.cnf</code> 或者 <code>nano /etc/my.cnf2</code></strong></p>
</li>
<li><p><strong>在[mysqld]下添加<code>skip-grant-tables</code>，然后保存并退出—-<code>:wq</code></strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405100259.png"  alt="image-20200113112205873"></p>
</li>
<li><p><strong>重启mysql服务：<code>service mysqld restart</code></strong></p>
</li>
<li><p><strong>重启以后，执行<code>mysql</code>命令进入mysql命令行</strong></p>
</li>
<li><p><strong>修改root用户密码,选中mysql数据库 <code>use mysql</code>输入<code>UPDATE mysql.user SET Password=PASSWORD(&#39;新密码&#39;) where USER=&#39;root&#39;;</code>或者<code>update user set authentication_string=password(&#39;HEpan693640.&#39;) where user=&#39;root&#39;;</code>最后确认提交<code>flush privileges;</code></strong> </p>
</li>
<li><p><strong><code>exit</code>退出mysql。最后把/etc/my.cnf中的<code>skip-grant-tables</code>注释掉，然后重启mysql，即：<code>service mysqld restart</code>，下面我们就可以使用root新的密码登录MySQL了。<code>mysql -u root -p</code></strong></p>
</li>
</ol>
<h2 id="远程连接Mysql数据库报错Host-is-not-allowed-to-connect-to-this-MySQL-server"><a href="#远程连接Mysql数据库报错Host-is-not-allowed-to-connect-to-this-MySQL-server" class="headerlink" title="远程连接Mysql数据库报错Host * is not allowed to connect to this MySQL server"></a>远程连接Mysql数据库报错Host * is not allowed to connect to this MySQL server</h2><p><strong>远程连接数据报错<font color = red>Host * is not allowed to connect to this MySQL server</font>。只能使用localhost进行连接。</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405100306.png"  alt="image-20200112175531846"></p>
<p><strong><font color = red>原因：Mysql中的mysql数据库中的user表设置所引起。</font></strong></p>
<p><strong><font color =green>解决：修改mysql数据库中user表host字段</font></strong></p>
<ol>
<li><strong>在装有MySQL的机器上登录MySQL mysql -u root -p密码</strong></li>
<li><strong>执行<code>use mysql;</code></strong></li>
<li><strong>执行<code>update user set host = &#39;%&#39; where user = &#39;root&#39;;</code>这一句执行完可能会报错，不用管它。</strong></li>
<li><strong>执行<code>FLUSH PRIVILEGES</code>;</strong></li>
</ol>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405100312.png"  alt="image-20200112180106963"></p>
]]></content>
      <categories>
        <category>错误问题记录</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>错误问题记录</tag>
        <tag>云服务器</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置-6</title>
    <url>/59286.html</url>
    <content><![CDATA[<h2 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h2><p><strong>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件。</strong></p>
<ul>
<li><p><strong>–file:./config/</strong></p>
</li>
<li><p><strong>–file:./</strong></p>
</li>
<li><p><strong>–classpath:/config/</strong></p>
</li>
<li><p><strong>–classpath:/</strong></p>
</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095027.png"  alt="image-20200107171959778"></p>
<p><font color =red><strong>优先级由高到底，高优先级的配置会覆盖低优先级的配置</strong></font></p>
<p><font color = red><strong>SpringBoot会从这四个位置全部加载主配置文件，互补配置</strong></font></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095056.png"  alt="image-20200107172332225"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095113.png"  alt="image-20200107172653943"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095124.png"  alt="image-20200107172950372"></p>
<p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；（<font color =red>SpringBoot2.0版本之后指定文件与默认配置不会形成互补配置，只是指定文件中的配置生效</font>）</strong></p>
<p><strong>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=文件路径</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095242.png"  alt="image-20200107175051433"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>配置</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>配置文件加载顺序</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置-5</title>
    <url>/59094.html</url>
    <content><![CDATA[<h2 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是：<strong>application-{profile}.properties/yml</strong></p>
<p>默认使用<strong>application.properties</strong>的配置</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095641.png"  alt="image-20200107164135047"></p>
<h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><p><strong>通过—将文档分成多文档块</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span></span><br><span class="line"><span class="comment">#文档块一</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="comment">#文档块二</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br><span class="line"><span class="comment">#文档块三</span></span><br></pre></td></tr></table></figure>

<h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><h4 id="配置文件中指定"><a href="#配置文件中指定" class="headerlink" title="配置文件中指定"></a>配置文件中指定</h4><p><strong><font color =red>使用spring.profiles.active激活指定profile</font></strong></p>
<ul>
<li>application.properties</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095929.png"  alt="image-20200107164614552"></p>
<ul>
<li>application.yml</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095937.png"  alt="image-20200107165131162"></p>
<h4 id="程序参数指定"><a href="#程序参数指定" class="headerlink" title="程序参数指定"></a>程序参数指定</h4><p>程序参数中添加–spring.profiles.acprotive激活指定profile</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095943.png"  alt="image-20200107165529135"></p>
<h4 id="命令行指定"><a href="#命令行指定" class="headerlink" title="命令行指定"></a>命令行指定</h4><p>将程序打包成一个jar包,在命令行中输入java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095949.png"  alt="image-20200107165905505"></p>
<h4 id="虚拟机参数指定"><a href="#虚拟机参数指定" class="headerlink" title="虚拟机参数指定"></a>虚拟机参数指定</h4><p>在VM options中添加<strong>-Dspring.profiles.active=dev</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405095953.png"  alt="image-20200107170114180"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>配置</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Profile</tag>
        <tag>多文档块</tag>
        <tag>激活指定profile</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置-4</title>
    <url>/9751.html</url>
    <content><![CDATA[<h2 id="PropertySource：加载指定的配置文件"><a href="#PropertySource：加载指定的配置文件" class="headerlink" title="@PropertySource：加载指定的配置文件"></a>@<strong>PropertySource</strong>：加载指定的配置文件</h2><ol>
<li><p>通过Spring Boot 全局配置文件与@Value 取赋值详解与 @ConfigurationProperties 对比已经知道使用“@Value”注解与“@ConfigurationProperties”可以从全局配置文件“application.properties”或者“application.yml”中取值然后为需要的属性赋值</p>
</li>
<li><p>但是如果应用比较大的时候，如果所有的内容都当在一个文件中，如“application.properties”或者“application.yml”中时，就会显得比较臃肿，同时也不太好理解和维护</p>
</li>
<li><p>可以将一个文件拆分为多个，此时使用@PropertySource即可解决问题</p>
</li>
<li><p>@PropertySource 用于加载指定的配置文件</p>
</li>
</ol>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405101903.png"  alt="image-20200107120913180"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br></pre></td></tr></table></figure>

<h2 id="ImportResource：导入Spring的配置文件，让配置文件里面的内容生效；"><a href="#ImportResource：导入Spring的配置文件，让配置文件里面的内容生效；" class="headerlink" title="@ImportResource：导入Spring的配置文件，让配置文件里面的内容生效；"></a>@ImportResource：导入Spring的配置文件，让配置文件里面的内容生效；</h2><p><strong>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别。</strong></p>
<p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure>

<p>不推荐来编写Spring的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.kylin.springboot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405101937.png"  alt="image-20200107122438488"></p>
<p><strong>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</strong></p>
<ol>
<li><p>配置类<strong>@Configuration</strong>——&gt;Spring配置文件.@Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件</p>
</li>
<li><p>使用<strong>@Bean</strong>给容器中添加组件,相当于在Springl配置文件中用<strong>bean</strong>标签添加组件。将方法的返回值添加到容器中，容器中这个组件默认的id就是方法名</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符${}"></a>配置文件占位符${}</h2><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><table>
<thead>
<tr>
<th>随机数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>${random.uuid}</td>
<td>取出来的是随机数</td>
</tr>
<tr>
<td>${random.int}</td>
<td>整型数</td>
</tr>
<tr>
<td>${random.long}</td>
<td>长整型数</td>
</tr>
<tr>
<td>${random.int(10)}</td>
<td>10以内的整型数</td>
</tr>
<tr>
<td>${random.int[1024,65536]}</td>
<td>数组中的数据</td>
</tr>
</tbody></table>
<h3 id="属性配置占位符"><a href="#属性配置占位符" class="headerlink" title="属性配置占位符"></a>属性配置占位符</h3><ul>
<li><strong>可以在配置文件中引用前面配置过的属性（优先级前面配置过的这里都能用)</strong></li>
<li><strong>${app.name:默认值}来指定找不到属性时的默认值</strong></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405101952.png"  alt="image-20200107160940787"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2017/12/15</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">14</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">15</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>配置</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>PropertySource注解</tag>
        <tag>ImportResource注解</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置-3</title>
    <url>/58454.html</url>
    <content><![CDATA[<h2 id="Value获取值和-ConfigurationProperties获取值比较"><a href="#Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="@Value获取值和@ConfigurationProperties获取值比较"></a>@Value获取值和@ConfigurationProperties获取值比较</h2><table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p>配置文件yml还是properties他们都能获取到值；</p>
<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的<strong>某项值</strong>，使用@Value；</p>
<p>如果说，我们专门编写了一个<strong>javaBean来和配置文件进行映射</strong>，我们就直接使用@ConfigurationProperties；</p>
<h3 id="松散绑定属性名匹配规则（Relaxed-binding）"><a href="#松散绑定属性名匹配规则（Relaxed-binding）" class="headerlink" title="松散绑定属性名匹配规则（Relaxed binding）"></a>松散绑定属性名匹配规则（Relaxed binding）</h3><ul>
<li>person.firstName：使用标准方式</li>
<li><strong>person.first-name</strong>：大写用-</li>
<li><strong>person.first_name</strong>：大写用_</li>
<li><strong>PERSON_FIRST_NAME</strong>： 推荐系统属性使用这种写法</li>
</ul>
<p><strong>相当于person对象中的firstName属性</strong></p>
<h3 id="JSR303数据校验"><a href="#JSR303数据校验" class="headerlink" title="JSR303数据校验"></a>JSR303数据校验</h3><h4 id="空检查"><a href="#空检查" class="headerlink" title="空检查"></a>空检查</h4><table>
<thead>
<tr>
<th>注解</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>@Null</td>
<td>验证对象是否为null</td>
</tr>
<tr>
<td>@NotNull</td>
<td>验证对象是否不为null, 无法查检长度为0的字符串</td>
</tr>
<tr>
<td>@NotBlank</td>
<td>检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</td>
</tr>
<tr>
<td>@NotEmpty</td>
<td>检查约束元素是否为NULL或者是EMPTY</td>
</tr>
</tbody></table>
<h4 id="Booelan检查"><a href="#Booelan检查" class="headerlink" title="Booelan检查"></a>Booelan检查</h4><table>
<thead>
<tr>
<th>注解</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>@AssertTrue</td>
<td>验证 Boolean 对象是否为 true</td>
</tr>
<tr>
<td>@AssertFalse</td>
<td>验证 Boolean 对象是否为 false</td>
</tr>
</tbody></table>
<h4 id="长度检查"><a href="#长度检查" class="headerlink" title="长度检查"></a>长度检查</h4><table>
<thead>
<tr>
<th>注解</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>@Size(min=, max=)</td>
<td>验证对象（Array,Collection,Map,String）长度是否在给定的范围之内</td>
</tr>
<tr>
<td>@Length(min=, max=)</td>
<td>验证带批注的字符串是否介于包含的最小值和最大值之间</td>
</tr>
</tbody></table>
<h4 id="日期检查"><a href="#日期检查" class="headerlink" title="日期检查"></a>日期检查</h4><table>
<thead>
<tr>
<th>注解</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>@Past</td>
<td>验证 Date 和 Calendar 对象是否在当前时间之前，验证成立的话被注释的元素一定是一个过去的日期</td>
</tr>
<tr>
<td>@Future</td>
<td>验证 Date 和 Calendar 对象是否在当前时间之后 ，验证成立的话被注释的元素一定是一个将来的日期</td>
</tr>
<tr>
<td>@Pattern</td>
<td>验证 String 对象是否符合正则表达式的规则，被注释的元素符合制定的正则表达式，regexp:正则表达式 flags: 指定 Pattern.Flag 的数组，表示正则表达式的相关选项。</td>
</tr>
</tbody></table>
<h4 id="数值检查"><a href="#数值检查" class="headerlink" title="数值检查"></a>数值检查</h4><p><strong>建议使用在Stirng,Integer类型，不建议使用在int类型上，因为表单值为“”时无法转换为int，但可以转换为Stirng为”“,Integer为null</strong></p>
<table>
<thead>
<tr>
<th>注解</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>@Min</td>
<td>验证 Number 和 String 对象是否大等于指定的值</td>
</tr>
<tr>
<td>@Max</td>
<td>验证 Number 和 String 对象是否小等于指定的值</td>
</tr>
<tr>
<td>@DecimalMax</td>
<td>被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度</td>
</tr>
<tr>
<td>@DecimalMin</td>
<td>被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度</td>
</tr>
<tr>
<td>@Digits</td>
<td>验证 Number 和 String 的构成是否合法</td>
</tr>
<tr>
<td>@Digits(integer=,fraction=)</td>
<td>验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。</td>
</tr>
<tr>
<td>@Range(min=, max=)</td>
<td>被指定的元素必须在合适的范围内</td>
</tr>
<tr>
<td>@Valid</td>
<td>递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)</td>
</tr>
<tr>
<td>@CreditCardNumber</td>
<td>信用卡验证</td>
</tr>
<tr>
<td>@Email</td>
<td>验证是否是邮件地址，如果为null,不进行验证，算通过验证。</td>
</tr>
<tr>
<td>@ScriptAssert(lang= ,script=, alias=)</td>
<td>要有Java Scripting API 即JSR223(“Scripting for the JavaTM Platform”)的实现</td>
</tr>
<tr>
<td>@URL(protocol=,host=, port=,regexp=, flags=)</td>
<td>被注释的字符串必须是一个有效的url</td>
</tr>
</tbody></table>
<h4 id="配置文件注入值数据校验"><a href="#配置文件注入值数据校验" class="headerlink" title="配置文件注入值数据校验"></a>配置文件注入值数据校验</h4><p><strong>添加@Validated注解，才能使用数据校验</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>配置</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>获取值比较</tag>
        <tag>松散绑定</tag>
        <tag>JSR303数据校验</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置-2</title>
    <url>/9367.html</url>
    <content><![CDATA[<h2 id="配置文件值注入"><a href="#配置文件值注入" class="headerlink" title="配置文件值注入"></a>配置文件值注入</h2><p>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">    lastName:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">    boss:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line"><span class="attr">    maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">    lists:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">lisi</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">zhaoliu</span></span><br><span class="line"><span class="attr">    dog:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">小狗</span></span><br><span class="line"><span class="attr">      age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># idea，properties配置文件utf-8</span></span><br><span class="line"><span class="comment"># 配置person</span></span><br><span class="line"><span class="meta">person.last-name</span>=<span class="string">张三</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">18</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2017/12/15</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps..k2</span>=<span class="string">14</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">小狗</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">15</span></span><br></pre></td></tr></table></figure>



<p>javaBean</p>
<p>将配置文件中配置的每一个属性的值，映射到这个组件中</p>
<ul>
<li><p><strong>@ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</strong></p>
</li>
<li><p><strong>prefix = “person”：配置文件中哪个下面的所有属性进行一一映射</strong></p>
</li>
<li><p><strong>只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能</strong></p>
</li>
<li><p><strong>@ConfigurationProperties(prefix = “person”)默认从全局配置文件中获取值</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>



<p>我们可以导入配置文件处理器，以后编写配置就有提示了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102242.png"  alt="image-20200107104009925"></p>
<h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102246.png"  alt="idea配置乱码"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>配置</category>
      </categories>
      <tags>
        <tag>配置文件</tag>
        <tag>SpringBoot</tag>
        <tag>配置文件值注入</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置-1</title>
    <url>/9687.html</url>
    <content><![CDATA[<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p><strong>配置文件的作用：修改SpringBoot自动配置的默认值。SpringBoot在底层都给我们自动配置好。SpringBoot使用一个全局的配置文件，配置文件名是固定的</strong>。</p>
<ul>
<li><p><font size =4 color = red><strong>application.properties</strong></font></p>
</li>
<li><p><font size =4 color = red><strong>application.yml</strong></font></p>
</li>
</ul>
<p><strong>YAML（YAML Ain’t Markup Language）</strong></p>
<ul>
<li>YAML  A Markup Language：是一个标记语言</li>
<li>YAML   isn’t Markup Language：不是一个标记语言</li>
</ul>
<p>标记语言</p>
<ul>
<li>以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；-</li>
<li>YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</li>
</ul>
<p>​    YAML：配置例子</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<p>​    XML：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2、YAML语法"><a href="#2、YAML语法" class="headerlink" title="2、YAML语法"></a>2、YAML语法</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><ul>
<li>k:<strong>(空格)</strong>v：表示一对键值对（<strong>空格必须有</strong>）</li>
<li>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</li>
<li><strong>属性和值也是大小写敏感</strong></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure>





<h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><ul>
<li><strong>k: v：字面直接来写</strong></li>
<li><strong>字符串默认不用加上单引号或者双引号</strong></li>
<li>“”：双引号<strong>不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思。</strong>name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</li>
<li>‘’：单引号<strong>会转义特殊字符，特殊字符最终只是一个普通的字符串数据</strong>name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</li>
</ul>
<h4 id="对象、Map（属性和值）（键值对）"><a href="#对象、Map（属性和值）（键值对）" class="headerlink" title="对象、Map（属性和值）（键值对）"></a>对象、Map（属性和值）（键值对）</h4><p><strong>k: v：在下一行来写对象的属性和值的关系；注意缩进。对象还是k: v的方式</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">	<span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p><strong>行内写法</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="数组（List、Set）"><a href="#数组（List、Set）" class="headerlink" title="数组（List、Set）"></a>数组（List、Set）</h4><p><strong>用- 值表示数组中的一个元素</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p><strong>行内写法</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102338.png"  alt="image-20200106172706128"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>配置</category>
      </categories>
      <tags>
        <tag>配置文件</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot入门-3</title>
    <url>/16849.html</url>
    <content><![CDATA[<h2 id="Hello-World探究"><a href="#Hello-World探究" class="headerlink" title="Hello World探究"></a>Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他来真正管理Spring Boot应用里面的所有依赖版本；</span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102522.png"  alt="image-20200106102628672"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102523.png"  alt="image-20200106102833191"></p>
<p><strong>Spring Boot的版本仲裁中心——spring-boot-dependencies</strong></p>
<p><strong>以后我们导入依赖默认是不需要写版本（没有在dependencies里面管理的依赖自然需要声明版本号）</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102524.png"  alt="image-20200106104252691"></p>
<h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>spring-boot-starter</strong>-<font size = 4 color=red>web</font></p>
<ul>
<li><p><strong>spring-boot-starter：spring-boot场景启动器</strong></p>
</li>
<li><p><strong>帮我们导入了web模块正常运行所依赖的组件</strong></p>
</li>
</ul>
<p><strong>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102525.png"  alt="image-20200106105402989"></p>
<h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@<strong>SpringBootApplication</strong></h4><ul>
<li><p><strong>Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用。</strong></p>
</li>
<li><p><strong>该注解基于@SpringBootConfiguration和@EnableAutoConfiguration</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102526.png"  alt="image-20200106113021982"></p>
<h4 id="SpringBootConfiguration-Spring-Boot的配置类"><a href="#SpringBootConfiguration-Spring-Boot的配置类" class="headerlink" title="@SpringBootConfiguration:Spring Boot的配置类"></a>@<strong>SpringBootConfiguration</strong>:<strong>Spring Boot的配置类</strong></h4><ul>
<li><strong>标注在某个类上，表示这是一个Spring Boot的配置类</strong></li>
<li>@<strong>Configuration:配置类上来标注这个注解</strong></li>
<li><strong>配置类 —–  配置文件。配置类也是容器中的一个组件。@Component</strong></li>
<li><strong>@SpringBootConfiguration-&gt;@Configuration-&gt;@Component</strong></li>
</ul>
<h4 id="EnableAutoConfiguration：开启自动配置功能"><a href="#EnableAutoConfiguration：开启自动配置功能" class="headerlink" title="@EnableAutoConfiguration：开启自动配置功能"></a>@<strong>EnableAutoConfiguration</strong>：<strong>开启自动配置功能</strong></h4><ul>
<li>以前我们需要配置的东西Spring Boot帮我们自动配置@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102527.png"  alt="image-20200106114425099"></p>
<ul>
<li><p>@<strong>AutoConfigurationPackage：自动配置包</strong></p>
<ul>
<li>@<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；<strong>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器</strong></li>
</ul>
</li>
<li><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102528.png"  alt="image-20200106120227907"></p>
</li>
<li><p><strong>@Import(EnableAutoConfigurationImportSelector.class)：给容器中导入组件</strong></p>
<ul>
<li><strong>EnableAutoConfigurationImportSelector：导入哪些组件的选择器</strong></li>
<li><strong>所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中</strong></li>
<li><strong>会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件</strong>        <img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102603.png"  alt="自动配置类"></li>
<li><strong>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作</strong></li>
<li>调用SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</li>
<li><strong>Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作.以前我们需要自己配置的东西，自动配置类都帮我们</strong></li>
<li>J2EE的整体整合解决方案和自动配置都在s<strong>pring-boot-autoconfigure-1.5.9.RELEASE.jar</strong></li>
</ul>
</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102529.png"  alt="image-20200106121532467"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>HelloWorld</tag>
        <tag>SpringBootApplication注解</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot入门-2</title>
    <url>/33040.html</url>
    <content><![CDATA[<h2 id="使用Spring-Initializer快速创建Spring-Boot项目"><a href="#使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="使用Spring Initializer快速创建Spring Boot项目"></a>使用Spring Initializer快速创建Spring Boot项目</h2><h3 id="1、IDEA：使用-Spring-Initializer快速创建项目"><a href="#1、IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="1、IDEA：使用 Spring Initializer快速创建项目"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p><strong>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目</strong></p>
<p><strong>选择我们需要的模块；向导会联网创建Spring Boot项目</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102813.png"  alt="image-20200105171422227"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102814.png"  alt="image-20200105171619511"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102815.png"  alt="image-20200105171815373"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102816.png"  alt="image-20200105171920333"></p>
<p>默认生成的Spring Boot项目；</p>
<ul>
<li><p>主程序已经生成好了，我们只需要我们自己的逻辑</p>
</li>
<li><p>resources文件夹中目录结构</p>
<ul>
<li><strong>static：保存所有的静态资源。js css  images</strong></li>
<li><strong>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）</strong></li>
<li><strong>application.properties：Spring Boot应用的配置文件，可以修改一些默认设置</strong></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405102817.png"  alt="image-20200105172058516"></p>
</li>
</ul>
<h3 id="2、STS使用-Spring-Starter-Project快速创建项目"><a href="#2、STS使用-Spring-Starter-Project快速创建项目" class="headerlink" title="2、STS使用 Spring Starter Project快速创建项目"></a>2、STS使用 Spring Starter Project快速创建项目</h3><p>　　Spring Tool Suite是一个基于<strong>Eclipse</strong>的开发环境，可以自定义用于开发Spring应用程序。它提供了一个随时可用的环境来实现，调试，运行和部署Spring应用程序，包括Pivotal tc Server，Pivotal Cloud Foundry，Git，Maven，AspectJ的集成，以及最新的Eclipse版本。</p>
<p>　　Spring Tool Suite包含了Pivotal tc Server的开发人员版本，这是针对Spring优化的Apache Tomcat的替代品。通过其Spring Insight控制台，tc Server Developer Edition提供了应用程序性能指标的图形化实时视图，使开发人员能够从其桌面识别和诊断问题。</p>
<p>　　Spring Tool套件支持将应用程序定位到本地，虚拟和基于云的服务器。它可以免费用于开发和内部业务操作，没有时间限制，完全开源并根据Eclipse Public License的条款获得许可。</p>
<p>　　换句话说, Spring Tool Suite是一个定制版的eclipse,为spring boot&amp;cloud量身打造的工具， 由spring framework官方在javaee版本的eclipse上包装spring插件出来的版本， 其核心还是javaee版本的eclipse，是一款免费的非常合适的开发工具。</p>
<p>官方下载地址：<a href="https://spring.io/tools/sts/all" target="_blank" rel="noopener">https://spring.io/tools/sts/all</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Spring Initializer</tag>
        <tag>STS</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot入门-1</title>
    <url>/32848.html</url>
    <content><![CDATA[<h1 id="一、Spring-Boot-入门"><a href="#一、Spring-Boot-入门" class="headerlink" title="一、Spring Boot 入门"></a><strong>一、</strong>Spring Boot 入门</h1><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><blockquote>
<p>简化Spring应用开发的一个框架；</p>
<p>整个Spring技术栈的一个大整合；</p>
<p>J2EE开发的一站式解决方案；</p>
</blockquote>
<h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，martin fowler</p>
<p>微服务：架构风格（服务微化）</p>
<p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p>
<p>单体应用：ALL IN ONE</p>
<p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>
<p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa" target="_blank" rel="noopener">详细参照微服务文档</a></p>
<h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><p>环境约束</p>
<ul>
<li><p>jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p>
</li>
<li><p>maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p>
</li>
</ul>
<ul>
<li><p>IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p>
</li>
<li><p>SpringBoot 1.5.9.RELEASE：1.5.9；</p>
</li>
</ul>
<p>统一环境；</p>
<h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合maven进来；</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103008.png"  alt="idea设置"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103009.gif"  alt="images/"></p>
<h2 id="4、Spring-Boot-HelloWorld"><a href="#4、Spring-Boot-HelloWorld" class="headerlink" title="4、Spring Boot HelloWorld"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p>
<p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p>
<h3 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h3><h3 id="2、导入spring-boot相关的依赖"><a href="#2、导入spring-boot相关的依赖" class="headerlink" title="2、导入spring boot相关的依赖"></a>2、导入spring boot相关的依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、编写一个主程序；启动Spring-Boot应用"><a href="#3、编写一个主程序；启动Spring-Boot应用" class="headerlink" title="3、编写一个主程序；启动Spring Boot应用"></a>3、编写一个主程序；启动Spring Boot应用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       	<span class="keyword">return</span> <span class="string">"Hello，World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103010.png"  alt="GIF"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103011.gif"  alt="GIF1"></p>
<h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>将这个应用打成jar包，直接使用java -jar的命令进行执行；</strong></p>
<p><strong>在cmd命令控制台中来到jar包所在的目录，使用java -jar的命令执行直接运行！</strong></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>错误问题记录-1</title>
    <url>/18966.html</url>
    <content><![CDATA[<h2 id="Tomcat的8080端口占用问题"><a href="#Tomcat的8080端口占用问题" class="headerlink" title="Tomcat的8080端口占用问题"></a>Tomcat的8080端口占用问题</h2><p>Tomcat的8080端口被占用，控制台输入<strong>netstat -ano | findstr “8080”</strong>找到对应的pid值，通过任务管理器找到相应的程序，发现是<strong>Oracle-TNSLSNR.EXE</strong>占用8080端口号的问题。</p>
<p>解决方法之一：改变TNSLSNR.exe占用的端口。</p>
<ol>
<li><font color = red><strong>运行cmd,输入sqlplus / as sysdba；</strong> </font></li>
<li><strong><font color = red>输入exec dbms_xdb.sethttpport(8088)。（其中8088为更改后的端口）</font></strong></li>
</ol>
<p>解决方法之二：修改Tomcat配置文件</p>
<ol>
<li><p><font color = red><strong>进入tomcat的安装路径，进入到conf文件中找到server.xml。</strong></font></p>
</li>
<li><p><strong><font color = red>找到Connector标签，protocol属性为’’HTTP/1.1’’。修改其中的port属性值</font></strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"80"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span>  <span class="attr">useBodyEncodingForURI</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Junit单元测试报错java-lang-NoClassDefFoundError-org-hamcrest-SelfDescribing"><a href="#Junit单元测试报错java-lang-NoClassDefFoundError-org-hamcrest-SelfDescribing" class="headerlink" title="Junit单元测试报错java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing"></a>Junit单元测试报错java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing</h2><p>使用Junit进行单元测试的时候，控制它报出<strong>java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing</strong>错误。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103122.png"  alt="image-20191230103653431"></p>
<p><strong>原因是使用Junit进行单元测试，没有导入hamcrest-core-1.3这个jar包。</strong></p>
<p>解决方法：<font color = red><strong>导入hamcrest-core-1.3这个jar包。</strong></font></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103123.png"  alt="image-20191230103911806"></p>
<h2 id="SpringBoot的-RunWith注解报错问题"><a href="#SpringBoot的-RunWith注解报错问题" class="headerlink" title="SpringBoot的@RunWith注解报错问题"></a>SpringBoot的@RunWith注解报错问题</h2><p>在SpringBoot中提供的单元测试中，使用@RunWith注解指定运行环境，发现注解报错</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103124.png"  alt=""></p>
<p><strong>后来发现是使用Idea提供的Spring Initializr快速构建SpringBoot项目中，pom.xml指定使用junit进行单元测试</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103125.png"  alt=""></p>
<p>解决方法：<strong><font color = red>删除所框选的那段代码</font></strong></p>
<h2 id="SpringBoot中配置文件server-context-path无效问题"><a href="#SpringBoot中配置文件server-context-path无效问题" class="headerlink" title="SpringBoot中配置文件server.context-path无效问题"></a>SpringBoot中配置文件server.context-path无效问题</h2><p>在SpringBoot配置文件中，使用:/projectName**,发现运行之后并未生效。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.context-path</span>:<span class="string">/boot2</span></span><br></pre></td></tr></table></figure>

<p><strong>后来查询资料后发现，SpringBoot在2.0+版本之后server.context-path被弃用。</strong></p>
<p>解决方法：<font color = red><strong>使用SpringBoot2.0+版本之后提供的server.servlet.context-path=/projectName修改项目路径。</strong></font></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/boot2</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103126.png"  alt="image-20191230102553333"></p>
]]></content>
      <categories>
        <category>错误问题记录</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>SpringBoot</tag>
        <tag>Tomcat</tag>
        <tag>错误问题记录</tag>
        <tag>Junit</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习-8</title>
    <url>/48603.html</url>
    <content><![CDATA[<h2 id="Spring-MVC处理异常有3种方式"><a href="#Spring-MVC处理异常有3种方式" class="headerlink" title="Spring MVC处理异常有3种方式"></a>Spring MVC处理异常有3种方式</h2><ol>
<li>使用Spring MVC提供的简单异常处理器SimpleMappingExceptionResolver； </li>
<li>实现Spring的异常处理接口HandlerExceptionResolver 自定义自己的异常处理器； </li>
<li>使用@ExceptionHandler注解实现异常处理； </li>
<li>Controller调用service，service调用dao，异常都是向上抛出的，最终有DispatcherServlet找异常处理器进 行异常的处理</li>
<li><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103457.png"  alt="image-20200113175102506"></li>
</ol>
<h2 id="使用Spring-MVC提供的简单异常处理器SimpleMappingExceptionResolver"><a href="#使用Spring-MVC提供的简单异常处理器SimpleMappingExceptionResolver" class="headerlink" title="使用Spring MVC提供的简单异常处理器SimpleMappingExceptionResolver"></a>使用Spring MVC提供的简单异常处理器SimpleMappingExceptionResolver</h2><p>在SpringMVC配置文件中添加配置</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103458.png"  alt="image-20200113172213935"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103410.png"  alt="image-20191223184737733"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 定义默认的异常处理页面，当该异常类型的注册时使用 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultErrorView"</span> <span class="attr">value</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 定义异常处理页面用来获取异常信息的变量名，不写默认名为exception --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionAttribute"</span> <span class="attr">value</span>=<span class="string">"ex"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"cn.basttg.core.exception.BusinessException"</span>&gt;</span>error-business<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"cn.basttg.core.exception.ParameterException"</span>&gt;</span>error-parameter<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- 这里还可以继续扩展对不同异常类型的处理 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="实现HandlerExceptionResolver-接口自定义异常处理器"><a href="#实现HandlerExceptionResolver-接口自定义异常处理器" class="headerlink" title="实现HandlerExceptionResolver 接口自定义异常处理器"></a><strong>实现HandlerExceptionResolver 接口自定义异常处理器</strong></h2><p>实现HanderExceptionResolver接口</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103459.png"  alt="image-20200113174416593"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103500.png"  alt="image-20200113174641542"></p>
<p>配置SpringMVC配置文件</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103501.png"  alt="image-20200113174734525"></p>
<p><code>&lt;bean id=&quot;sysExceptionResolver&quot; class=&quot;com.kylin.exception.SysExceptionResolver&quot;/&gt;</code></p>
<h2 id="使用-ExceptionHandler注解实现异常处理"><a href="#使用-ExceptionHandler注解实现异常处理" class="headerlink" title="使用@ExceptionHandler注解实现异常处理"></a>使用@ExceptionHandler注解实现异常处理</h2><p><strong>由于单独使用只能处理 Controller 层未捕获（往外抛）的异常，对于 Interceptor（拦截器）层的异常，Spring 框架层的异常，就无能为力了，只能在当前Controller中处理异常。但当配合<code>@ControllerAdvice</code>一起使用的时候，就可以摆脱那个限制了。</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103502.png"  alt="image-20200113180450281"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>综合上述可知，Spring MVC集成异常处理3种方式都可以达到统一异常处理的目标。从3种方式的优缺点比较，若只需要简单的集成异常处理，推荐使用SimpleMappingExceptionResolver即可；若需要集成的异常处理能够更具个性化，提供给用户更详细的异常信息，推荐自定义实现HandlerExceptionResolver接口的方式；若不喜欢Spring配置文件或要实现“零配置”，且能接受对原有代码的适当入侵，则建议使用@ExceptionHandler注解方式。</strong> </p>
]]></content>
      <categories>
        <category>SSM</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习-7</title>
    <url>/47515.html</url>
    <content><![CDATA[<h2 id="拦截器的概述"><a href="#拦截器的概述" class="headerlink" title="拦截器的概述"></a>拦截器的概述</h2><ol>
<li>SpringMVC框架中的<strong>拦截器用于对处理器进行预处理和后处理的技术</strong>。 </li>
<li><strong>可以定义拦截器链(栈)，连接器链就是将拦截器按着一定的顺序结成一条链，在访问被拦截的方法时，拦截器链中的拦截器会按着定义的顺序执行。</strong> </li>
<li>拦截器和过滤器的功能比较类似，有区别 <ul>
<li><strong>过滤器是Servlet规范的一部分，任何框架都可以使用过滤器技术。</strong> </li>
<li><strong>拦截器是SpringMVC框架独有的。</strong></li>
<li><strong>过滤器配置了/*，可以拦截任何资源。</strong> </li>
<li><strong>拦截器只会对控制器中的方法进行拦截。</strong></li>
</ul>
</li>
<li>拦截器也是AOP思想的一种实现方式 <ul>
<li>发送请求时被拦截器拦截,在控制器的前后添加额外功能.</li>
<li><strong>跟 AOP 区分开.AOP 在特定方法前后扩充(对 ServiceImpl)</strong></li>
<li><strong>拦截器,请求的拦截.针对点是控制器方法.(对 Controller)</strong></li>
</ul>
</li>
<li>想要自定义拦截器，需要<strong>实现HandlerInterceptor接口</strong>。 </li>
</ol>
<h3 id="实现自定义拦截器的步骤"><a href="#实现自定义拦截器的步骤" class="headerlink" title="实现自定义拦截器的步骤"></a>实现自定义拦截器的步骤</h3><ol>
<li><p>新建controller并<font color =red>实现HandlerInterceptor</font>重写方法</p>
</li>
<li><p>HandlerInterceptor接口中的方法 </p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>执行顺序</th>
<th>页面跳转</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>preHandle</td>
<td>controller方法执行前执行拦截的方法</td>
<td>request请求转发.response重定向</td>
<td>true：放行. false：不放行</td>
</tr>
<tr>
<td>postHandle</td>
<td>controller方法执行后执行的方法，在JSP视图执行前</td>
<td>request请求转发.response重定向</td>
<td>无返回值</td>
</tr>
<tr>
<td>postHandle</td>
<td>在JSP之后执行</td>
<td>request，response不能在跳转页面</td>
<td>无返回值</td>
</tr>
</tbody></table>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103631.png"  alt="image-20191224112319984"></p>
</li>
<li><p>配置SpringMVC.xml文件</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103632.png"  alt="image-20191224113838898"></p>
</li>
</ol>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103633.png"  alt="image-20191224114040609"></p>
<h3 id="实现自定义拦截器栈"><a href="#实现自定义拦截器栈" class="headerlink" title="实现自定义拦截器栈"></a>实现自定义拦截器栈</h3><p>前两步一样，配置SpringMVC.xml文件</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103634.png"  alt="image-20191224115030877"></p>
<p>其两个拦截器方法的依次实现顺序遵循，<font color = red><strong>先进后出</strong></font>.即在控制器之前执行的方法，先进的先执行。在控制器后执行的方法，后进的先执行。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103635.png"  alt="image-20191224115322380"></p>
]]></content>
      <categories>
        <category>SSM</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>拦截器</tag>
        <tag>SpringMVC</tag>
        <tag>自定义拦截器</tag>
        <tag>拦截栈</tag>
        <tag>自定义拦截栈</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习-6</title>
    <url>/31066.html</url>
    <content><![CDATA[<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><ol>
<li><p>访问资源时响应如果没有设置 Content-Disposition,浏览器默认按照 <font color =red>inline</font> 值进行处理。<strong>inline 能显示就显示,不能显示就下载.</strong></p>
</li>
<li><p><strong>只需要修改相应头中 Context-Disposition=”attachment;filename=文件名”</strong></p>
<ul>
<li><p><strong>attachment 下载,以附件形式下载.</strong></p>
</li>
<li><p><strong>filename=值就是下载时显示的下载文件名</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename=文件名"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>通过apache提供的jar包来实现</p>
</li>
</ol>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol>
<li><p>导入jar包</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103736.png"  alt="image-20191223144632313"></p>
</li>
<li><p>在 jsp 中添加超链接,设置要下载文件。<strong>在 springmvc 中放行静态资源files文件夹</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103737.png"  alt="image-20191223150013914"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103738.png"  alt="image-20191223150054014"></p>
</li>
<li><p>编写控制器方法 </p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103739.png"  alt="image-20191223150230987"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103740.png"  alt="image-20191223150904146"></p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="download?fileName=a.txt"&gt;下载&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String fileName,HttpServletResponse res,HttpServletRequest req)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		<span class="comment">//设置响应流中文件进行下载,attachment以附件形式下载,filename= 表示下载显示的下载文件名。</span></span><br><span class="line">		res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span>+fileName);</span><br><span class="line"><span class="comment">//		res.setHeader("Content-Disposition", "inline");</span></span><br><span class="line">		<span class="comment">//把二进制流放入到响应体中.</span></span><br><span class="line">		ServletOutputStream os = res.getOutputStream();</span><br><span class="line">		String path = req.getServletContext().getRealPath(<span class="string">"files"</span>);</span><br><span class="line">		System.out.println(path);</span><br><span class="line">		File file = <span class="keyword">new</span> File(path, fileName);</span><br><span class="line">		<span class="keyword">byte</span>[] bytes = FileUtils.readFileToByteArray(file);<span class="comment">//读取文件成一个二进制数组</span></span><br><span class="line">		os.write(bytes);</span><br><span class="line">		os.flush();</span><br><span class="line">		os.close();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        InputStream is = new FileInputStream(file);</span></span><br><span class="line"><span class="comment">		byte[] bytes = new byte[1024];</span></span><br><span class="line"><span class="comment">		int len;</span></span><br><span class="line"><span class="comment">		while ((len = is.read(bytes))!=-1)&#123;</span></span><br><span class="line"><span class="comment">		    os.write(bytes);</span></span><br><span class="line"><span class="comment">		    os.flush();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">		os.close();*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><ol>
<li><p>基于 apache 的 <strong>commons-fileupload.jar</strong> 完成文件上传.</p>
</li>
<li><p>MultipartResovler 作用:</p>
<ul>
<li><strong>把客户端上传的文件流转换成 MutipartFile 封装类.</strong></li>
<li><strong>通过 MutipartFile 封装类获取到文件流</strong></li>
</ul>
</li>
<li><p>表单数据类型分类</p>
<ul>
<li>在form标签中的 <strong>enctype</strong> 属性控制表单类型</li>
<li><strong>默认值 application/x-www-form-urlencoded,普通表单数据.(少量文字信息)</strong></li>
<li><strong>text/plain 大文字量时使用的类型.邮件,论文</strong></li>
<li><strong>multipart/form-data 表单中包含二进制文件内容.</strong></li>
</ul>
</li>
<li><p>实现步骤</p>
<ul>
<li><p>导入 springmvc 包和 apache 文件上传 <strong>commons-fileupload</strong> 和<strong>commons-io</strong> 两个 jar</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103741.png"  alt="image-20191223151909958"></p>
</li>
<li><p>编写 JSP 页面 </p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103742.png"  alt="image-20191223152035933"></p>
</li>
<li><p>配置 springmvc.xm</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103743.png"  alt="image-20191223184737733"></p>
</li>
<li><p>编写控制器类</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103744.png"  alt="image-20191223190237272"></p>
</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$Title$<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"upload"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.kylin.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注解驱动--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--静态资源--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> <span class="attr">location</span>=<span class="string">"/js/"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span> <span class="attr">location</span>=<span class="string">"/css/"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> <span class="attr">location</span>=<span class="string">"/images/"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/files/"</span> <span class="attr">mapping</span>=<span class="string">"/files/**"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置文件上传MultipartResovler解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置文件上传最大大小-50字节--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"50000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置异常解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exceptionResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--出现上传文件超过最大大小时，页面进行指定跳转--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.springframework.web.multipart.MaxUploadSizeExceededException"</span>&gt;</span>error.jsp<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="comment">//MultipartFile 变量名必须于文件域的name属性值相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file,String name)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name:"</span>+name);</span><br><span class="line">        <span class="comment">//getName : 获取表单中文件组件的名字</span></span><br><span class="line">        <span class="comment">//getOriginalFilename : 获取上传文件的原名</span></span><br><span class="line">        System.out.println(file.getName());</span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));<span class="comment">//截取文件后缀名</span></span><br><span class="line">        String uuid = UUID.randomUUID().toString();<span class="comment">//制造唯一文件名</span></span><br><span class="line">        FileUtils.copyInputStreamToFile(file.getInputStream(),<span class="keyword">new</span> File(<span class="string">"C:\\Data\\IDM\\Java学习\\"</span>+uuid+suffix));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>利用了apache提供的两个jar包可以非常方便的使用其工具类进行文件的上传和下载。</li>
<li>本章我写的不是很详细，如果有疑问可以参考前面JavaWeb-文件上传和JavaWeb-文件下载。apache提供的重点是对<strong>request.getInpustream()解析-FIleUpload。</strong>，其次是其工具类，不使用也可以按照原先IO流的对文件进行读写。我们所使用这两个jar包的根本原因是对requset.getInputStream的解析。</li>
<li><strong>SpringMVC中我们使用的是MultipartResovler解析器，其所依赖的也是apache的这两个jar包。</strong></li>
<li><strong>我们可以使用异常解析器对发生超出文件上传最大限制异常进行处理，当然也不仅仅使用于处理文件上传的异常，适用的是所遇到的各种异常对其处理。</strong></li>
</ul>
]]></content>
      <categories>
        <category>SSM</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
        <tag>文件下载</tag>
        <tag>SpringMVC</tag>
        <tag>异常解析器</tag>
        <tag>MultipartResovler解析器</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习-5</title>
    <url>/30746.html</url>
    <content><![CDATA[<h2 id="JSP-九大内置对象和四大作用域复习"><a href="#JSP-九大内置对象和四大作用域复习" class="headerlink" title="JSP 九大内置对象和四大作用域复习"></a>JSP 九大内置对象和四大作用域复习</h2><h3 id="JSP九大内置对象"><a href="#JSP九大内置对象" class="headerlink" title="JSP九大内置对象"></a>JSP九大内置对象</h3><table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>含义</th>
<th>获取方式</th>
</tr>
</thead>
<tbody><tr>
<td>request</td>
<td>HttpServletRequset</td>
<td>封装所有请求信息</td>
<td>方法参数</td>
</tr>
<tr>
<td>response</td>
<td>HttpServletResponse</td>
<td>封装所有相应信息</td>
<td>方法参数</td>
</tr>
<tr>
<td>session</td>
<td>HttpSession</td>
<td>封装所有会话信息</td>
<td>req.getSession()</td>
</tr>
<tr>
<td>application</td>
<td>ServletContext</td>
<td>所有信息</td>
<td>getServletContext(); requset.getServletContext;</td>
</tr>
<tr>
<td>out</td>
<td>PrintWriter</td>
<td>输出对象</td>
<td>response.getWriter()</td>
</tr>
<tr>
<td>exception</td>
<td>Exception</td>
<td>异常对象</td>
<td></td>
</tr>
<tr>
<td>page</td>
<td>Object</td>
<td>当前页面对象</td>
<td></td>
</tr>
<tr>
<td>pageContext</td>
<td>pageContext</td>
<td>获取其他信息</td>
<td></td>
</tr>
<tr>
<td>config</td>
<td>ServletConfig</td>
<td>配置信息</td>
<td></td>
</tr>
</tbody></table>
<h3 id="四大作用域"><a href="#四大作用域" class="headerlink" title="四大作用域"></a>四大作用域</h3><ul>
<li><p>page</p>
<p>在当前页面不会重新实例化。作用域当前页面</p>
</li>
<li><p><strong>request</strong><br>  <strong>在一次请求中同一个对象</strong>,下次请求重新实例化一个request 对象.</p>
</li>
<li><p><strong>session</strong></p>
<ol>
<li><strong>一次会话</strong>.</li>
<li><strong>只要客户端</strong>Cookie中传递的Jsessionid不变,Session不会重新实例化(不超过默认时间.)</li>
<li><strong>实际有效时间:浏览器关闭.Cookie 失效.</strong></li>
<li>默认时间.在时间范围内无任何交互.在 tomcat 的web.xml 中配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout-</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>application<br>   <strong>只有在 tomcat 启动项目时才实例化.关闭 tomcat 时销毁 application</strong></p>
</li>
</ul>
<h2 id="SpringMVC-作用域传值的几种方式"><a href="#SpringMVC-作用域传值的几种方式" class="headerlink" title="SpringMVC 作用域传值的几种方式"></a>SpringMVC 作用域传值的几种方式</h2><p>index.jsp</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103859.png"  alt="image-20191223110024059"></p>
<h3 id="使用原生Servlet"><a href="#使用原生Servlet" class="headerlink" title="使用原生Servlet"></a>使用原生Servlet</h3><p>在 HanlderMethod 参数中添加作用域对象</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103900.png"  alt="image-20191223110651892"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103901.png"  alt="image-20191223110804281"></p>
<h3 id="使用Map集合"><a href="#使用Map集合" class="headerlink" title="使用Map集合"></a>使用Map集合</h3><ol>
<li><p><strong>把map内容放在request作用域中</strong></p>
</li>
<li><p>spring 会对 map 集合通过 <strong>BindingAwareModelMap</strong> 进行实例化</p>
</li>
</ol>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103902.png"  alt="image-20191223135947344"></p>
<h3 id="使用SpringMVC中Model-接口"><a href="#使用SpringMVC中Model-接口" class="headerlink" title="使用SpringMVC中Model 接口"></a>使用SpringMVC中Model 接口</h3><p><strong>把内容最终放入到 request 作用域中.</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103903.png"  alt="image-20191223140139493"></p>
<h3 id="使用-SpringMVC-中-ModelAndView-类"><a href="#使用-SpringMVC-中-ModelAndView-类" class="headerlink" title="使用 SpringMVC 中 ModelAndView 类"></a>使用 SpringMVC 中 ModelAndView 类</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405103904.png"  alt="image-20191223140822030"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">request:$&#123;requestScope.req&#125;&lt;br&gt;</span><br><span class="line">session:$&#123;sessionScope.session&#125;&lt;br&gt;</span><br><span class="line">sessionParam:$&#123;sessionScope.sessionParam&#125;&lt;br&gt;</span><br><span class="line">application:$&#123;applicationScope.application&#125;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">map:$&#123;requestScope.map&#125;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">model:$&#123;requestScope.model&#125;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">mav:$&#123;requestScope.mav&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">(HttpServletRequest abc, HttpSession sessionParam)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//request作用域</span></span><br><span class="line">        abc.setAttribute(<span class="string">"req"</span>, <span class="string">"req的值"</span>);</span><br><span class="line">        abc.setAttribute(<span class="string">"test"</span>, <span class="string">"@SessionAttributes"</span>);</span><br><span class="line">        <span class="comment">//session作用域</span></span><br><span class="line">        HttpSession session = abc.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">"session"</span>, <span class="string">"session的值"</span>);</span><br><span class="line">        sessionParam.setAttribute(<span class="string">"sessionParam"</span>, <span class="string">"sessionParam的值"</span>);</span><br><span class="line">        <span class="comment">//application作用域</span></span><br><span class="line">        ServletContext application = abc.getServletContext();</span><br><span class="line">        application.setAttribute(<span class="string">"application"</span>, <span class="string">"application的值"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo2"</span>)</span><br><span class="line">    <span class="comment">//把map中的内容放在request作用域中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        map.put(<span class="string">"map"</span>, <span class="string">"map的值"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo3"</span>)</span><br><span class="line">    <span class="comment">//把内容最终放入到 request 作用域中.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo3</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"model"</span>, <span class="string">"model的值"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo4"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">demo4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//参数值为跳转视图。内容存放在request作用域中。</span></span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"/index.jsp"</span>);</span><br><span class="line">        mav.addObject(<span class="string">"mav"</span>, <span class="string">"mav的值"</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
        <tag>SpringMVC作用域传值方式</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习-4</title>
    <url>/47323.html</url>
    <content><![CDATA[<h2 id="SpringMVC参数传递"><a href="#SpringMVC参数传递" class="headerlink" title="SpringMVC参数传递"></a>SpringMVC参数传递</h2><h3 id="基本数据类型参数"><a href="#基本数据类型参数" class="headerlink" title="基本数据类型参数"></a>基本数据类型参数</h3><ul>
<li><strong>默认保证参数名称和请求中传递的参数名相同</strong> </li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104200.png"  alt="image-20191222100545276"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104201.png"  alt="image-20191222100851694"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104202.png"  alt="image-20191222101135213"></p>
<ul>
<li><strong>如果请求参数名和方法参数名不对应使用@RequestParam注解中的value值进行匹配赋值（都适用）</strong></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104203.png"  alt="image-20191222101739578"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104204.png"  alt="image-20191222102123182"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104205.png"  alt="image-20191222102226081"></p>
<ul>
<li><strong>如果方法参数是<font color=red>基本数据类型</font>(不是封装类)可以通过@RequestParam中的defaultValue值设置参数默认值，可以防止没有参数时 500错误</strong></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104206.png"  alt="image-20191222103513982"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104207.png"  alt="image-20191222103435138.png"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104208.png"  alt="image-20191222104435172"></p>
<ul>
<li><strong>通过@RequestParam注解中的required的强制要求必须某个参数值不能为空</strong> </li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104209.png"  alt="image-20191222104755445"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104210.png"  alt="image-20191222112218115"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104211.png"  alt="image-20191222161241614"></p>
<h3 id="对象数据类型"><a href="#对象数据类型" class="headerlink" title="对象数据类型"></a>对象数据类型</h3><ul>
<li><strong>请求参数为对象时，前台传递的参数名与对象的属性名一致，且生成get与set方法</strong></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104212.png"  alt="image-20191222191243719"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104213.png"  alt="image-20191222191444199"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104214.png"  alt="image-20191222192353831"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104215.png"  alt="image-20191222192448828"></p>
<ul>
<li><strong>请求参数为对象.属性格式</strong></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104216.png"  alt="image-20191222194219399"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104217.png"  alt="image-20191222194330055"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104218.png"  alt="image-20191222194617047"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104219.png"  alt="image-20191222195147735"></p>
<h3 id="集合对象类型参数"><a href="#集合对象类型参数" class="headerlink" title="集合对象类型参数"></a>集合对象类型参数</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104220.png"  alt="image-20191222201645161"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104221.png"  alt="image-20191222201915592"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104222.png"  alt="image-20191222202052120"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104223.png"  alt="image-20191222202251310"></p>
<h3 id="多个同名参数"><a href="#多个同名参数" class="headerlink" title="多个同名参数"></a>多个同名参数</h3><p><strong>复选框传递的参数就是多个同名参数</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104224.png"  alt="image-20191222203305567"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104225.png"  alt="image-20191222203808538"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104226.png"  alt="image-20191222204053578"></p>
<h3 id="restful-传值方式"><a href="#restful-传值方式" class="headerlink" title="restful 传值方式"></a>restful 传值方式</h3><ul>
<li><p><strong>在@RequestMapping 中一定要和请求格式对应 ：/控制器名/{名称}/{名称}</strong></p>
</li>
<li><p><strong>{名称} 中名称可以自定义名称</strong></p>
</li>
<li><p><strong>@PathVariable 获取@RequestMapping 中内容,默认按照方法参数名称去寻找.</strong> </p>
</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104227.png"  alt="image-20191222205141021"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104228.png"  alt="image-20191222210311858"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104229.png"  alt="image-20191222210536164"></p>
<h2 id="跳转方式"><a href="#跳转方式" class="headerlink" title="跳转方式"></a>跳转方式</h2><p>SpringMVC中默认的跳转方式是<font size =4 color = red>请求转发</font></p>
<p>设置返回值字符串内容</p>
<ul>
<li>重定向：redirect:资源路径</li>
<li>请求转发：forward:资源路径（省略不写时默认）</li>
</ul>
<p>SpringMVC中重定向的路径问题</p>
<ul>
<li>当使用不以/开头的资源路径时，依旧是在相对当前路径进行跳转</li>
<li>使用/开头的资源路径时，SringMVC会默认在前加上<font size =4 color = red>contextPath</font>即加上<strong>当前项目名</strong></li>
</ul>
<h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p>作用：</p>
<pre><code>该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</code></pre><p>使用时机：</p>
<pre><code>返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</code></pre><p>注意事项：</p>
<ul>
<li><p>如果返回值满足 key-value 形式(对象或 map）</p>
<ol>
<li>自动把响应头设置为 <strong>application/json;charset=utf-8</strong></li>
<li>把对象转化为<strong>json串</strong>然后写到客户端。按<strong>utf-8</strong>编码</li>
<li>底层使用Jackson进行json转换,在项目中一定要导入<strong>jackson的jar</strong></li>
</ol>
</li>
<li><p>如果返回值不满足 key-value,例如返回值为 String</p>
<ol>
<li><p>把响应头设置为 <strong>text/html</strong></p>
</li>
<li><p>把方法返回值以流的形式直接输出.默认按<strong>iso8859-1编码</strong>。如果返回值包含中文,出现<strong>中文乱码</strong></p>
</li>
<li><p>注解中我们可以手动修改编码格式，例如<strong>@RequestMapping(value=”/demo”,produces=”text/html;charset=utf-8”)</strong>，前面是请求的路径，后面是编码格式。</p>
</li>
</ol>
</li>
</ul>
<p><strong>@ResponseBody这个注解通常使用在控制层（controller）的方法上，其作用是将方法的返回值以特定的格式写入到response的body区域，进而将数据返回给客户端。当方法上面没有写ResponseBody,底层会将方法的返回值封装为ModelAndView对象。<font color = red>也就是说当不写@ResponseBody注解时，单独使用@ResquestMapping都会讲方法的返回值看成是一个视图对象从而进行返回。</font></strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104230.png"  alt="image-20191223091731708"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104231.png"  alt="image-20191223095629079"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104232.png"  alt="image-20191223095744315"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104233.png"  alt="image-20191223095858827"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104234.png"  alt="image-20191223095943966"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104235.png"  alt="image-20191223100059091"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	main.jsp</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$Title$<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"demo1"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"demo1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"demo2"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"demo2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"demo3"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name1"</span> <span class="attr">placeholder</span>=<span class="string">"demo3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"demo4"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"demo4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"demo5"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"demo5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hover"</span> <span class="attr">value</span>=<span class="string">"学习"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hover"</span> <span class="attr">value</span>=<span class="string">"写代码"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hover"</span> <span class="attr">value</span>=<span class="string">"看视频"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hover"</span> <span class="attr">value</span>=<span class="string">"看笔记"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"demo6"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"peo.name"</span> <span class="attr">placeholder</span>=<span class="string">"demo6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"peo.age"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"demo7"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"peo[0].name"</span> <span class="attr">placeholder</span>=<span class="string">"demo7"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"peo[0].age"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"peo[1].name"</span> <span class="attr">placeholder</span>=<span class="string">"demo7"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"peo[1].age"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"page"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pageSize"</span> <span class="attr">placeholder</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pageNumber"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"demo8/zs/121"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kylin.pojo.Demo;</span><br><span class="line"><span class="keyword">import</span> com.kylin.pojo.Demo1;</span><br><span class="line"><span class="keyword">import</span> com.kylin.pojo.People;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据请求注解里面的值调用下面的方法</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo1"</span>)</span><br><span class="line">    <span class="comment">//接收请求数据参数为基本数据类型</span></span><br><span class="line">    <span class="comment">//跟属性名同名.数据类型你想接收什么类型自己设定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行demo1"</span> +<span class="string">" "</span>+ name + <span class="string">" "</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo2"</span>)</span><br><span class="line">    <span class="comment">//接收请求数据参数为对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">(People people, String name, String age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行demo2"</span> + people + <span class="string">" "</span> + name + <span class="string">" "</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo3"</span>)</span><br><span class="line">    <span class="comment">//接收请求数据参数名与方法参数名不统一。利用@RequestParam注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo3</span><span class="params">(@RequestParam(<span class="string">"name1"</span>)</span> String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"age1"</span>)</span> String age) </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" "</span> + age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo4"</span>)</span><br><span class="line">    <span class="comment">//required = true 强制参数不能为空，为空则报错。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo4</span><span class="params">(@RequestParam(required = <span class="keyword">true</span>)</span> String name,<span class="keyword">int</span> age) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name是SQL的查询条件，必须要传递name参数"</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo5"</span>)</span><br><span class="line">    <span class="comment">//请求参数中包含多个同名参数的获取方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo5</span><span class="params">(String name, <span class="keyword">int</span> age, @RequestParam(<span class="string">"hover"</span>)</span> List&lt;String&gt; hover) </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" "</span> + age + <span class="string">" "</span> + hover);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo6"</span>)</span><br><span class="line">    <span class="comment">//请求参数中对象.属性格式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo6</span><span class="params">(Demo demo)</span> </span>&#123;</span><br><span class="line">        System.out.println(demo);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo7"</span>)</span><br><span class="line">    <span class="comment">//在请求参数中传递集合对象类型参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo7</span><span class="params">(Demo1 demo1)</span> </span>&#123;</span><br><span class="line">        System.out.println(demo1);</span><br><span class="line"><span class="comment">//        demo1.getPeo().get(1).getName();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//restful传值方式</span></span><br><span class="line">    <span class="comment">//  /控制器名/&#123;名称&#125;/&#123;名称&#125;</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo8/&#123;name&#125;/&#123;age&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo8</span><span class="params">(@PathVariable String name, @PathVariable(<span class="string">"age"</span>)</span> String age1) </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" "</span> + age1);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/main.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向跳转方式</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demo9"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"重定向"</span>);</span><br><span class="line">        <span class="comment">// 以/默认加上contextPath</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/main"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/page"</span>)</span><br><span class="line">    <span class="comment">//利用@RequestParam注解defaultValue属性设定当方法的基本数据类型参数值为空时，默认值为..</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">page</span><span class="params">(@RequestParam(defaultValue = <span class="string">"2"</span>)</span> <span class="keyword">int</span> pageSize, @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"1"</span>)</span> <span class="keyword">int</span> pageNumber) </span>&#123;</span><br><span class="line">        System.out.println(pageSize + <span class="string">" "</span> + pageNumber);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"main.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@RequestMapping</span>(<span class="string">"/demo10"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> People <span class="title">demo10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        People people = <span class="keyword">new</span> People();</span><br><span class="line">        people.setName(<span class="string">"张三"</span>);</span><br><span class="line">        people.setAge(<span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> people;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/demo11"</span>, produces = <span class="string">"text/html;charset=utf-8"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"中文"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
        <tag>SpringMVC参数传递</tag>
        <tag>SpringMVC多种传参方式</tag>
        <tag>RequestParam</tag>
        <tag>跳转方式</tag>
        <tag>RequestBody</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习-3</title>
    <url>/31386.html</url>
    <content><![CDATA[<h2 id="SpringMVC环境搭建"><a href="#SpringMVC环境搭建" class="headerlink" title="SpringMVC环境搭建"></a>SpringMVC环境搭建</h2><ol>
<li>导入jar包</li>
</ol>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104436.png"  alt="image-20191221152428789"></p>
<ol start="2">
<li><p>配置web.xml文件</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104437.png"  alt="image-20191221184917575"></p>
</li>
<li><p>配置SpringMVC配置文件</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104438.png"  alt="image-20191221195312998"></p>
</li>
<li><p>编写控制器Controller</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405104439.png"  alt="image-20191221200527283"></p>
</li>
</ol>
<h2 id="字符编码过滤器"><a href="#字符编码过滤器" class="headerlink" title="字符编码过滤器"></a>字符编码过滤器</h2><ul>
<li>filter-class：org.springframework.web.filter.<font size = 4 color = red>CharacterEncodingFilter</font></li>
<li>url-pattern配置为<font size = 4 color = red>/*</font>从而拦截一切请求，对其进行设置字符编码</li>
<li><strong>设置初始化参数encoding的值，配置字符编码格式</strong></li>
</ul>
<h2 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h2><ul>
<li>SpringMVC 会提供默认视图解析器.</li>
<li>程序员自定义视图解析器 <font color = gree>prefix-前缀 suffix-后缀</font></li>
<li><font color = red>如果希望不执行自定义视图解析器,在方法返回值前面添加forward:或 redirect:</font></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--修改springMVC配置文件路径和名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--拦截除了jsp外的所有请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.kylin.controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注解驱动--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--释放静态资源--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> <span class="attr">location</span>=<span class="string">"/js/"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span> <span class="attr">location</span>=<span class="string">"/css/"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> <span class="attr">location</span>=<span class="string">"/images/"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123; </span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>) </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">()</span></span>&#123; </span><br><span class="line">		System.out.println(<span class="string">"执行 demo"</span>); </span><br><span class="line">		<span class="keyword">return</span> <span class="string">"main.jsp"</span>; </span><br><span class="line">		&#125; </span><br><span class="line">		</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/demo2"</span>) </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123; </span><br><span class="line">		System.out.println(<span class="string">"demo2"</span>); </span><br><span class="line">		<span class="keyword">return</span> <span class="string">"main1.jsp"</span>; </span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SSM</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
        <tag>SpringMVC环境搭建</tag>
        <tag>字符编码过滤器</tag>
        <tag>视图解析器</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习-2</title>
    <url>/47707.html</url>
    <content><![CDATA[<blockquote>
<p><strong>在Spring整体框架的核心概念中，容器的核心思想是管理Bean的整个生命周期。但在一个项目中，Spring容器往往不止一个，最常见的场景就是在一个项目中引入Spring和SpringMVC这两个框架，其本质就是两个容器：Spring是根容器，SpringMVC是其子容器。关于这两个容器的创建、联系及区别也正是本文所关注的问题。</strong></p>
</blockquote>
<h2 id="Spring容器、SpringMVC容器与ServletContext之间的关系"><a href="#Spring容器、SpringMVC容器与ServletContext之间的关系" class="headerlink" title="Spring容器、SpringMVC容器与ServletContext之间的关系"></a>Spring容器、SpringMVC容器与ServletContext之间的关系</h2><p><strong><font size = 4 color =red>Spring的启动过程其实就是其Spring IOC容器的启动过程。特别地，对于web程序而言，IOC容器启动过程即是建立上下文的过程。</font></strong></p>
<h3 id="Spring的启动过程"><a href="#Spring的启动过程" class="headerlink" title="Spring的启动过程"></a>Spring的启动过程</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">	<span class="comment">&lt;!-- 利用Spring提供的ContextLoaderListener监听器去监听ServletContext对象的创建，并初始化WebApplicationContext对象 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Context Configuration locations for Spring XML files(默认查找/WEB-INF/applicationContext.xml) --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置Spring MVC的前端控制器：DispatchcerServlet --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong>对于一个web应用，其部署在web容器中，web容器提供其一个全局的上下文环境，这个上下文就是<font size = 4 color = red>ServletContext</font>，其为后面的spring IoC容器提供宿主环境；</strong></p>
</li>
<li><p><strong>在web.xml中会提供有<font color = gree size =4>contextLoaderListener</font>。在web容器启动时，会触发容器初始化事件，此时contextLoaderListener会监听到这个事件，其<font color =gree>contextInitialized</font>方法会被调用。在这个方法中，spring会初始化一个启动上下文，这个上下文被称为根上下文，即<font color =blue size =4>WebApplicationContext</font>。WebApplicationContext是一个接口类，确切的说，其实际的实现类是<font color=blue size = 3>XmlWebApplicationContext，它就是spring的IoC容器</font>，其对应的Bean定义的配置由web.xml中的<font size =4 color=skyblue>context-param</font>标签指定。在这个IoC容器初始化完毕后，Spring以WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE为属性Key，将其存储到<font color = red size =5>ServletContext</font>中，便于获取；</strong></p>
</li>
<li><p><strong>ContextLoaderListener监听器初始化完毕后，开始初始化web.xml中配置的Servlet，这个servlet可以配置多个，以最常见的DispatcherServlet为例，这个servlet实际上是一个标准的前端控制器，用以转发、匹配、处理每个servlet请求。<font color = orange siez =5>DispatcherServlet上下文在初始化的时候会建立自己的IoC上下文，用以持有spring mvc相关的bean。特别地，在建立DispatcherServlet自己的IoC上下文前，会利用WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE先从ServletContext中获取之前的根上下文(即WebApplicationContext)作为自己上下文的parent上下文。有了这个parent上下文之后，再初始化自己持有的上下文。</font>这个DispatcherServlet初始化自己上下文的工作在其initStrategies方法中可以看到，大概的工作就是初始化处理器映射、视图解析等。这个servlet自己持有的上下文默认实现类也是mlWebApplicationContext。初始化完毕后，spring以与servlet的名字相关(此处不是简单的以servlet名为Key，而是通过一些转换，具体可自行查看源码)的属性为属性Key，也将其存到ServletContext中，以便后续使用。这样每个servlet就持有自己的上下文，即拥有自己独立的bean空间，同时各个servlet共享相同的bean，即根上下文(第2步中初始化的上下文)定义的那些bean。</strong></p>
</li>
</ul>
<h3 id="Spring容器与SpringMVC的容器联系与区别"><a href="#Spring容器与SpringMVC的容器联系与区别" class="headerlink" title="Spring容器与SpringMVC的容器联系与区别"></a><strong>Spring容器与SpringMVC的容器联系与区别</strong></h3><p><strong><font color = red size = 4>ContextLoaderListener中创建Spring容器主要用于整个Web应用程序需要共享的一些组件，比如DAO、数据库的ConnectionFactory等</font>；<font color = gree size =4>而由DispatcherServlet创建的SpringMVC的容器主要用于和该Servlet相关的一些组件，比如Controller、ViewResovler等</font>。它们之间的关系如下：</strong></p>
<ol>
<li><p><strong>作用范围</strong></p>
<p><strong><font  color=skyblue size =4>子容器(SpringMVC容器)可以访问父容器(Spring容器)的Bean，父容器(Spring容器)不能访问子容器(SpringMVC容器)的Bean</font>。也就是说，当在SpringMVC容器中getBean时，如果在自己的容器中找不到对应的bean，则会去父容器中去找，这也解释了为什么由SpringMVC容器创建的Controller可以获取到Spring容器创建的Service组件的原因。</strong></p>
</li>
<li><p><strong>具体实现</strong></p>
<p><strong>在Spring的具体实现上，子容器和父容器都是通过ServletContext的setAttribute方法放到ServletContext中的。但是，ContextLoaderListener会先于DispatcherServlet创建ApplicationContext，DispatcherServlet在创建ApplicationContext时会先找到由ContextLoaderListener所创建的ApplicationContext，再将后者的ApplicationContext作为参数传给DispatcherServlet的ApplicationContext的setParent()方法。也就是说，<font color = orange size =5>子容器的创建依赖于父容器的创建，父容器先于子容器创建</font>。在Spring源代码中，你可以在FrameServlet.java中找到如下代码：</strong></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">wac.setParent(parent);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>SpringMVC环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习-1</title>
    <url>/47899.html</url>
    <content><![CDATA[<h2 id="SpringMVC-简介"><a href="#SpringMVC-简介" class="headerlink" title="SpringMVC 简介"></a>SpringMVC 简介</h2><p><strong>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能<font color = red size =4> MVC</font> 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的Spring MVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts 2(一般老项目使用)等。</strong></p>
<p><strong>@WebServlet中配置”<font color = red size =5>/</font>“,控制器拦截所有请求，但是不会拦截到<font color = gree size =5>.jsp</font>文件</strong></p>
<p><strong>@WebServlet中配置”<font color = red size =5>/*</font>“,控制器拦截所有请求，包括拦截到<font color = red size =5>.jsp</font>文件</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105115.png"  alt="image-20191220205557956"></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105116.png"  alt="image-20191220210149241"></p>
<h3 id="SpringMVC-中重要组件"><a href="#SpringMVC-中重要组件" class="headerlink" title="SpringMVC 中重要组件"></a>SpringMVC 中重要组件</h3><ul>
<li><font color = red size =4><strong>DispatcherServlet：前端控制器,接收所有请求(如果配置/不包含jsp)</strong></font></li>
<li><font color=gree size =4><strong>HandlerMapping：解析请求格式的.判断希望要执行哪个具体的方法.</strong></font></li>
<li><font color=oidsfs size =4><strong>HandlerAdapter：负责调用具体的方法.</strong></font></li>
<li><font color = bblue size =4><strong>ViewResovler：视图解析器,解析结果,准备跳转到具体的物理视图</strong></font></li>
</ul>
<h3 id="SpringMVC运行原理图"><a href="#SpringMVC运行原理图" class="headerlink" title="SpringMVC运行原理图"></a>SpringMVC运行原理图</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105117.png"  alt="image-20191220211848680"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$Title$<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"dispatcher?control=demo1"</span>&gt;</span>跳转1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"dispatcher?control=demo2"</span>&gt;</span>跳转2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"dispatcher?control=demo3"</span>&gt;</span>跳转3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"dispatcher?control=demo4"</span>&gt;</span>跳转4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  /不拦截jsp</span></span><br><span class="line"><span class="comment"> *  /* 拦截所有，包括jsp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行控制器"</span>);</span><br><span class="line">        String result = req.getParameter(<span class="string">"control"</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"demo1"</span>.equals(result))&#123;</span><br><span class="line">            demo1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"demo2"</span>.equals(result))&#123;</span><br><span class="line">            demo2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"demo3"</span>.equals(result))&#123;</span><br><span class="line">            dem03();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"demo4"</span>.equals(result))&#123;</span><br><span class="line">            dem04();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"控制器执行demo1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"控制器执行demo2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dem03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"控制器执行demo3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dem04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"控制器执行demo4"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SpringMVC环境搭建-纯配置文件"><a href="#SpringMVC环境搭建-纯配置文件" class="headerlink" title="SpringMVC环境搭建-纯配置文件"></a>SpringMVC环境搭建-纯配置文件</h2><h3 id="导入jar"><a href="#导入jar" class="headerlink" title="导入jar"></a>导入jar</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105118.png"  alt="image-20191221152428789"></p>
<h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><p><strong>首先在web.xml文件中配置SpringMVC的<font color = red size=4>前端控制器</font>,通过配置初始化参数<font color = gree size=4>contextConfigLocation</font>修改服务器加载SpringMVC的配置文件路径。默认加载路径是在WEB-INF下寻找配置文件加载。</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105119.png"  alt="image-20191221131736663"></p>
<h3 id="配置springmvc-xml"><a href="#配置springmvc-xml" class="headerlink" title="配置springmvc.xml"></a>配置springmvc.xml</h3><p>在SpringMVC的配置文件中，配置<font color =red size =4><strong>HandlerMapping</strong></font>,<strong><font color =gree size =4>HandlerAdapter</font></strong>,<strong><font color =sdfrsesdcvdgkj size =4>viewResolver</font></strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105120.png"  alt="image-20191221133446175"></p>
<h3 id="编写controller进行测试"><a href="#编写controller进行测试" class="headerlink" title="编写controller进行测试"></a>编写controller进行测试</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105121.png"  alt="image-20191221133816436"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--修改springMVC配置文件路径和名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自启动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--拦截除了jsp外的所有请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demo123"</span> <span class="attr">class</span>=<span class="string">"com.kylin.controller.DemoController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--HandlerMapping：解析请求格式，判断希望要执行哪个具体的方法。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"urlMap"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--key表示解析出来控制器的逻辑名，servlet的别名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"demo"</span> <span class="attr">value-ref</span>=<span class="string">"demo123"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--HandlerAdapter：负责调用具体的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器：解析结果。准备跳转到具体的物理视图--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不配id可能不好使--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="prefix" value="/"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="suffix" value=".jsp"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了springmvc的控制器"</span>);</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"/main.jsp"</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
        <tag>SpringMVC简介</tag>
        <tag>SpringMVC环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb-文件下载</title>
    <url>/44662.html</url>
    <content><![CDATA[<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p><strong>浏览器默认下载文件的方式为inline即能打开就打开，不能打开就下载。<br>通过给a标签href中的属性值赋值，可以完成对一些浏览器无法解析打开的文件进行下载。但是当要下载的文件浏览器能解析打开，要如何告诉浏览器进行下载此文件呢？</strong></p>
<a id="more"></a>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105319.png"  alt=""></p>
<p><strong>通知客户端浏览器: 这是一个需要下载的文件, 不能再按普通的 html 的方式打开.</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//即设置一个响应的类型: application/x-msdownload</span></span><br><span class="line">response.setContentType(<span class="string">"application/x-msdownload"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>通知客户端浏览器: 不再有浏览器来处理该文件, 而是交由用户自行处理</strong><br><strong>设置响应流中文件进行下载,attachment以附件形式下载,filename= 表示下载显示的下载文件名。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置用户处理的方式: 响应头: Content-Disposition</span></span><br><span class="line">response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename=abc.txt"</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105320.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105321.png"  alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/downloadServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//通知客户端浏览器: 这是一个需要下载的文件</span></span><br><span class="line">        resp.setContentType(<span class="string">"application/x-msdownload"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下载时文件显示的名字</span></span><br><span class="line">        String fileName = <span class="string">"文件下载.txt"</span>;</span><br><span class="line"></span><br><span class="line">        resp.setHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;filename="</span>+ URLEncoder.encode(fileName,<span class="string">"utf-8"</span>));</span><br><span class="line">        OutputStream out = resp.getOutputStream();</span><br><span class="line">        <span class="comment">//源文件地址</span></span><br><span class="line">        File txtFileName = <span class="keyword">new</span> File(<span class="string">"C:\\Data\\IDM\\Java学习\\尚硅谷Java\\3.JavaWeb阶段\\尚硅谷JavaWEB视频教程\\22. 尚硅谷_佟刚_JavaWEB_源代码\\fileUpload\\note.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*        InputStream in = new FileInputStream(txtFileName);</span></span><br><span class="line"><span class="comment">        byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">        int len;</span></span><br><span class="line"><span class="comment">        while ((len = in.read(buffer))!=-1)&#123;</span></span><br><span class="line"><span class="comment">            out.write(buffer,0,len);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        in.close();*/</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = FileUtils.readFileToByteArray(txtFileName);<span class="comment">//读取文件成一个二进制数组</span></span><br><span class="line">        out.write(bytes);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
        <tag>文件下载</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb-文件上传</title>
    <url>/51318.html</url>
    <content><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><strong>1.普通表单提交默认enctype=”application/x-www-form-urlencoded”；但是当表单中存在文件类型时，需要设置enctype=”multipart/form-data”，它不对字符进行编码，用于发送二进制的文件（即所有文件类型，如视频、图片、音乐、文档都可以用此类型entype）；还有一种enctype=”text/plain”用于发送纯文本内容。</strong></p>
<p><strong>2.表单请求方式必须为post。</strong></p>
<p><strong>3.接收时不能再用request.getParameter()，而是request.getInputStream()解析二进制流，得到ServletInputStream对象。</strong></p>
<a id="more"></a>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105418.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105419.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105420.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105421.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105422.png"  alt=""></p>
<p><strong>当我们使用request.getInput直接获取到的字节流，后续进行打印数据的时候。会自动加上许多表单，文件的属性和属性值，还有分隔符。上传的是纯文本文件时，打印出来还能看到清除文件内容。但当上传的是非文本文件的时候，自动加上的属性和属性值，会导致文件不能正常显示。这时候我们就需要解析request.getInpustream()。</strong></p>
<h2 id="FileUpload文件上传"><a href="#FileUpload文件上传" class="headerlink" title="FileUpload文件上传"></a>FileUpload文件上传</h2><p><strong>FileUpload是apache的commons组件提供的上传组件，它最主要的工作就是帮我们解析request.getInpustream()。可以参考在线API文档：<a href="http://tool.oschina.net/apidocs/apidoc?api=commons-fileupload" target="_blank" rel="noopener">http://tool.oschina.net/apidocs/apidoc?api=commons-fileupload</a></strong></p>
<p><strong>使用fileUpload组件首先需要引入两个jar包</strong></p>
<ul>
<li><strong>commons-fileUpload.jar</strong></li>
<li><strong>commons-io.jar</strong><!-- more -->
<img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105423.png"  alt=""></li>
</ul>
<p><strong>fileUpload的核心类有DiskFileItemFactory、ServletFileUpload、FileItem。</strong></p>
<p><strong>使用fileUpload固定步骤：</strong></p>
<ul>
<li><strong>创建工厂类：DiskFileItemFactory factory=new DiskFileItemFactory();</strong></li>
<li><strong>创建解析器：ServletFileUpload upload=new ServletFileUpload(factory);</strong></li>
<li><strong>使用解析器解析request对象：List<FileItem> list=upload.parseRequest(request);</strong></li>
</ul>
<p><strong>使用的基本思想:</strong></p>
<ul>
<li><strong>commons-fileupload 可以解析请求, 得到一个 FileItem 对象组成的 List</strong></li>
<li><strong>commons-fileupload 把所有的请求信息都解析为 FileItem 对象, 无论是一个一般的文本域还是一个文件域.</strong></li>
<li><strong>可以调用 FileItem 的 isFormField() 方法来判断是一个 表单域 或不是表单域(则是一个文件域)</strong></li>
<li><strong>再来进一步获取信息</strong></li>
</ul>
<p><strong>一个FileItem对象对应一个表单项。FileItem类有如下方法：</strong></p>
<ul>
<li><strong>String getFieldName()：获取表单项的name的属性值。</strong></li>
<li><strong>String getName()：获取文件字段的文件名。如果是普通字段，则返回null</strong></li>
<li><strong>String getString()：获取字段的内容。如果是普通字段，则是它的value值；如果是文件字段，则是文件内容。</strong></li>
<li><strong>String getContentType()：获取上传的文件类型，例如text/plain、image。如果是普通字段，则返回null。</strong></li>
<li><strong>long getSize()：获取字段内容的大小，单位是字节。</strong></li>
<li><strong>boolean isFormField()：判断是否是普通表单字段，若是，返回true，否则返回false。</strong></li>
<li><strong>InputStream getInputStream()：获得文件内容的输入流。如果是普通字段，则返回value值的输入流。</strong></li>
</ul>
<p><strong>文件名中文乱码处理：</strong></p>
<ul>
<li><strong>servletFileUpload.setHeaderEncoding(“utf-8”) 或 request.setCharacterEncoding(“utf-8”);</strong></li>
</ul>
<p><strong>表单普通字段中文乱码处理：</strong></p>
<ul>
<li><strong>new String(str.getBytes(“iso-8859-1”,”utf-8”));</strong></li>
</ul>
<p><strong>设置内存缓冲区的大小，默认为10KB：</strong></p>
<ul>
<li><strong>diskFileItemFactory.setSizeThreshold(1024*1024);</strong></li>
</ul>
<p><strong>指定临时文件目录，如果单个文件的大小超过内存缓冲区，该文件将会临时缓存在此目录下：</strong></p>
<ul>
<li><strong>diskFileItemFactory.setRepository(file);</strong></li>
</ul>
<p><strong>设置单个文件大小限制，如果有某个文件超过此大小，将抛出FileUploadBase.FileSizeLimitExceededException</strong></p>
<ul>
<li><strong>servletFileUpload.setFileSizeMax(1024<em>1024</em>10);</strong></li>
</ul>
<p><strong>设置所有文件，也就是请求大小限制，如果文件总和超过此大小，将抛出FileUploadBase.SizeLimitExceededException</strong></p>
<ul>
<li><strong>servletFileUpload.setSizeMax(1024<em>1024</em>20);</strong></li>
</ul>
<p><strong>利用UUID生成伪随机字符串作为文件名避免重复：UUID.randomUUID().toString();</strong></p>
<p><strong>将文件写到硬盘上。写完之后，系统会自动将放在临时文件目录的该文件删除：</strong></p>
<ul>
<li><strong>fileItem.write(new File(path,fileName));</strong></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105424.png"  alt=""></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"upd"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    文件名&lt;input type=<span class="string">"text"</span> name=<span class="string">"filename"</span>&gt;</span><br><span class="line">    文件: &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"uploadServlet"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    File: &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;&lt;br&gt;</span><br><span class="line">    文本域: &lt;input type=<span class="string">"text"</span> name=<span class="string">"text"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"uploadServlet"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    文本域: &lt;input type=<span class="string">"text"</span> name=<span class="string">"text"</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/uploadServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置当超过文件的大小，就将文件写入到一个临时文件中</span></span><br><span class="line">        factory.setSizeThreshold(<span class="number">1024</span> * <span class="number">500</span>);</span><br><span class="line">        File tempDirectory = <span class="keyword">new</span> File(<span class="string">"C:\\Data\\Log"</span>);</span><br><span class="line">        factory.setRepository(tempDirectory);</span><br><span class="line"></span><br><span class="line">        ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //设置单个文件大小限制</span></span><br><span class="line"><span class="comment">//        upload.setFileSizeMax(1024*1024*10);</span></span><br><span class="line"><span class="comment">//        //设置所有文件总和大小限制</span></span><br><span class="line"><span class="comment">//        upload.setSizeMax(1024*1024*30);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决上传文件名的中文乱码</span></span><br><span class="line">        upload.setHeaderEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.得到FileItem的集合items</span></span><br><span class="line">            List&lt;FileItem&gt; items = upload.parseRequest(req);</span><br><span class="line">            <span class="comment">//2.遍历items 若是一个一般的表单域，打印信息</span></span><br><span class="line">            <span class="keyword">for</span> (FileItem item : items) &#123;</span><br><span class="line">                <span class="keyword">if</span> (item.isFormField()) &#123;</span><br><span class="line">                    String name = item.getFieldName();</span><br><span class="line">                    String value = item.getString(<span class="string">"utf-8"</span>);<span class="comment">//解决一般表单域的乱码问题</span></span><br><span class="line"></span><br><span class="line">                    System.out.println(name + <span class="string">": "</span> + value);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//若是文件域则把文件保存到指定的目录下，</span></span><br><span class="line">                    String fieldName = item.getFieldName();</span><br><span class="line">                    String fileName = item.getName();</span><br><span class="line">                    String contentype = item.getContentType();</span><br><span class="line">                    <span class="keyword">long</span> sizeInBytes = item.getSize();</span><br><span class="line"></span><br><span class="line">                    System.out.println(fieldName);</span><br><span class="line">                    System.out.println(fileName);</span><br><span class="line">                    System.out.println(contentype);</span><br><span class="line">                    System.out.println(sizeInBytes);</span><br><span class="line"></span><br><span class="line">               <span class="comment">/*     InputStream in = item.getInputStream();</span></span><br><span class="line"><span class="comment">                    byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">                    int len = 0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    fileName = "C:\\Data\\Log\\" + fileName;</span></span><br><span class="line"><span class="comment">                    System.out.println(fileName);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    OutputStream out = new FileOutputStream(fileName);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    while ((len = in.read(buffer)) != -1) &#123;</span></span><br><span class="line"><span class="comment">                        out.write(buffer, 0, len);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    out.close();</span></span><br><span class="line"><span class="comment">                    in.close();*/</span></span><br><span class="line">                    String suffix = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));<span class="comment">//截取文件后缀名</span></span><br><span class="line">                    String uuid = UUID.randomUUID().toString();<span class="comment">//制造唯一文件名</span></span><br><span class="line">                    FileUtils.copyInputStreamToFile(item.getInputStream(), <span class="keyword">new</span> File(<span class="string">"C:\\Data\\IDM\\Java学习\\"</span> + uuid + suffix));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaWeb</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-IO流-8</title>
    <url>/30418.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Java-IO流-7</title>
    <url>/29330.html</url>
    <content><![CDATA[<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p><strong>编码表的由来</strong></p>
<ul>
<li><strong>计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识 别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。 这就是编码表。</strong> </li>
</ul>
<p><strong>常见的编码表</strong></p>
<ul>
<li><strong>ASCII：美国标准信息交换码。 用一个字节的7位可以表示。</strong></li>
<li><strong>ISO8859-1：拉丁码表。欧洲码表 用一个字节的8位表示。</strong></li>
<li><strong>GB2312：中国的中文编码表。最多两个字节编码所有字符</strong></li>
<li><strong>GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码</strong></li>
<li><strong>Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。</strong></li>
<li><strong>UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</strong><a id="more"></a>
<img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105749.png"  alt=""></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105750.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105751.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105752.png"  alt=""></p>
<h2 id="字符集和字符编码的区别"><a href="#字符集和字符编码的区别" class="headerlink" title="字符集和字符编码的区别"></a>字符集和字符编码的区别</h2><p><strong>1、字符，字符集，字符编码概念</strong></p>
<p><strong>字符：在计算机和电信技术中，一个字符是一个单位的字形、类字形单位或符号的基本信息。即一个字符可以是一个中文汉字、一个英文字母、一个阿拉伯数字、一个标点符号等。</strong></p>
<p><strong>字符集：多个字符的集合。例如GB2312是中国国家标准的简体中文字符集，GB2312收录简化汉字（6763个）及一般符号、序号、数字、拉丁字母、日文假名、希腊字母、俄文字母、汉语拼音符号、汉语注音字母，共 7445 个图形字符。</strong></p>
<p><strong>字符编码：把字符集中的字符编码为（映射）指定集合中的某一对象（例如：比特模式、自然数序列、电脉冲），以便文本在计算机中存储和通过通信网络的传递。</strong></p>
<p><strong>字符集和字符编码的关系:</strong></p>
<p><strong>字符集是书写系统字母与符号的集合，而字符编码则是将字符映射为一特定的字节或字节序列，是一种规则。通常特定的字符集采用特定的编码方式（即一种字符集对应一种字符编码（例如：ASCII、IOS-8859-1、GB2312、GBK，都是即表示了字符集又表示了对应的字符编码，但Unicode不是，它采用现代的模型）），因此基本上可以将两者视为同义词。</strong></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>IO流</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IO流</tag>
        <tag>字符编码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-IO流-6</title>
    <url>/45651.html</url>
    <content><![CDATA[<h2 id="处理流之二-转换流"><a href="#处理流之二-转换流" class="headerlink" title="处理流之二:转换流"></a>处理流之二:转换流</h2><p><strong>转换流提供了在字节流和字符流之间的转换</strong></p>
<p><strong>Java API提供了两个转换流：</strong></p>
<ul>
<li><strong>InputStreamReader：将InputStream转换为Reader 字节输入流-&gt;字符输出流</strong></li>
<li><strong>OutputStreamWriter：将Writer转换为OutputStream 字符输入流-&gt;字节输出流</strong></li>
</ul>
<p><strong>字节流中的数据都是字符时，转成字符流操作更高效。</strong></p>
<p><strong>很多时候我们使用转换流来处理文件乱码问题。实现编码和解码的功能。</strong></p>
<p><strong>解码：字节、字节数组  —&gt;字符数组、字符串</strong></p>
<p><strong>编码：字符数组、字符串 —&gt; 字节、字节数组</strong></p>
<a id="more"></a>

<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105916.png"  alt="1"></p>
<h2 id="InputStreamReader和OutputStreamWriter"><a href="#InputStreamReader和OutputStreamWriter" class="headerlink" title="InputStreamReader和OutputStreamWriter"></a>InputStreamReader和OutputStreamWriter</h2><p><strong>InputStreamReader</strong></p>
<p><strong>实现将字节的输入流按指定字符集转换为字符的输入流。 需要和InputStream“套接”。</strong></p>
<p><strong>常用构造器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputStreamReader</span><span class="params">(InputStream in)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputSreamReader</span><span class="params">(InputStream in,String charsetName)</span></span></span><br></pre></td></tr></table></figure>

<p><strong>如： Reader isr = new InputStreamReader(System.in,”gbk”);指定字符集</strong></p>
<p><strong>OutputStreamWriter</strong></p>
<p><strong>实现将字符的输出流按指定字符集转换为字节的输出流。需要和OutputStream“套接”。</strong></p>
<p><strong>构造器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span><span class="params">(OutputStream out)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputSreamWriter</span><span class="params">(OutputStream out,String charsetName)</span></span></span><br></pre></td></tr></table></figure>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405105917.png"  alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * .转换流：属于字符流</span></span><br><span class="line"><span class="comment"> * InputStreamReader：将一个字节的输入流转换为字符的输入流</span></span><br><span class="line"><span class="comment"> * OutputStreamWriter：将一个字符的输出流转换为字节的输出流</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 2.作用：提供字节流与字符流之间的转换</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 3. 解码：字节、字节数组  ---&gt;字符数组、字符串</span></span><br><span class="line"><span class="comment"> * 编码：字符数组、字符串 ---&gt; 字节、字节数组</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 4.字符集</span></span><br><span class="line"><span class="comment"> * ASCII：美国标准信息交换码。</span></span><br><span class="line"><span class="comment"> * 用一个字节的7位可以表示。</span></span><br><span class="line"><span class="comment"> * ISO8859-1：拉丁码表。欧洲码表</span></span><br><span class="line"><span class="comment"> * 用一个字节的8位表示。</span></span><br><span class="line"><span class="comment"> * GB2312：中国的中文编码表。最多两个字节编码所有字符</span></span><br><span class="line"><span class="comment"> * GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码</span></span><br><span class="line"><span class="comment"> * Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。所有的文字都用两个字节来表示。</span></span><br><span class="line"><span class="comment"> * UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"dbcp.txt"</span>);</span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(fis);//使用系统默认的字符集</span></span><br><span class="line">            <span class="comment">//参数2指明了字符集，具体使用哪个字符集，取绝于文件保存时所使用的字符集。</span></span><br><span class="line">            isr = <span class="keyword">new</span> InputStreamReader(fis, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = isr.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">/*for (int i = 0; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="comment">                    char c = cbuf[i];</span></span><br><span class="line"><span class="comment">                    System.out.print(c);</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">                String s = <span class="keyword">new</span> String(cbuf, <span class="number">0</span>, len);</span><br><span class="line">                System.out.print(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    isr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//综合使用InputStreamReader和OutputStreamWriter</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"dbcp.txt"</span>), <span class="string">"utf-8"</span>);</span><br><span class="line">            osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"dbcp-gbk.txt"</span>), <span class="string">"gbk"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = isr.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                osw.write(cbuf, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    isr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (osw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    osw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>IO流</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Io流</tag>
        <tag>处理流</tag>
        <tag>转换流</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-IO流-5</title>
    <url>/45843.html</url>
    <content><![CDATA[<h2 id="处理流之一-缓冲流"><a href="#处理流之一-缓冲流" class="headerlink" title="处理流之一:缓冲流"></a>处理流之一:缓冲流</h2><p><strong>处理流，就是“<font color=red size= 5>套接</font>”在已有的流的基础上。</strong></p>
<p><strong>为了提高数据读写的速度，Java API提供了带缓冲功能的流类，在使用这些流类 时，会创建一个内部缓冲区数组，缺省使用<font color=red size= 5>8192个字节(8Kb)的缓冲区</font>。</strong></p>
<p><strong><font color=green >当读取数据时，数据按块读入缓冲区，其后的读操作则直接访问缓冲区</font></strong></p>
<p><strong>当使用BufferedInputStream读取字节文件时，BufferedInputStream会一次性从 文件中读取<font color=red size= 5>8192个(8Kb)</font>，存在缓冲区中，直到缓冲区装满了，才重新从文件中 读取下一个<font color=red size= 5>8192个字节数组。</font></strong></p>
<a id="more"></a>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110120.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110121.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110122.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110123.png"  alt=""></p>
<p><strong>缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为：</strong></p>
<ul>
<li><strong><font color=red>BufferedInputStream 和 BufferedOutputStream</font></strong></li>
<li><strong><font color=blue>BufferedReader 和 BufferedWriter</font></strong></li>
</ul>
<p><strong><font color=green >向流中写入字节时，不会直接写到文件，先写到缓冲区中直到缓冲区写满，BufferedOutputStream才会把缓冲区中的数据一次性写到文件里。使用方法 flush()可以强制将缓冲区的内容全部写入输出流。</font></strong></p>
<p><strong>flush()方法的使用：手动将buffer中内容写入文件</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110112.jpeg"  alt=""></p>
<p><strong><font color=green >上图中WEB服务器通过输出流向客户端响应了一个300字节的信息，但是，这时的输出流有一个1024字节的缓冲区。所以，输出流就一直等着WEB服务器继续向客户端响应信 息，当WEB服务器的响应信息把输出流中的缓冲区填满时，这时，输出流才向WEB客户端响应消息。</font></strong></p>
<p><strong>为了解决这种尴尬的局面，flush()方法出现了。<font color=red >flush()方法可以强迫输出流(或缓冲的流)发送数据，即使此时缓冲区还没有填满，以此来打破这种死锁的状态</font>。</strong></p>
<p><strong>当我们使用输出流发送数据时，当数据不能填满输出流的缓冲区时，这时，数据就会被存储在输出流的缓冲区中。如果，我们这个时候调用关闭(close)输出流，存储在输出流的缓冲区中的数据就会丢失。所以说，关闭(close)输出流时，应先刷新(flush)换冲的输出流，话句话说就是：“迫使所有缓冲的输出数据被写出到底层输出流中”。</strong></p>
<p><strong><font color=red >关闭流的顺序和打开流的顺序相反。只要关闭最外层流即可，但关闭最外层流也 会相应关闭内层节点流*</font ></strong></p>
<p><strong>如果是<font color="orange" size=5>带缓冲区</font><font color=red >的流对象的close()方法，不但会关闭流，还会在关闭流之前刷新缓冲区，关闭后不能再写出，流对象就不能在使用了。</font></strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110124.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110125.png"  alt=""></p>
<h2 id="BufferedInputStream和BufferedOutputStream"><a href="#BufferedInputStream和BufferedOutputStream" class="headerlink" title="BufferedInputStream和BufferedOutputStream"></a>BufferedInputStream和BufferedOutputStream</h2><p><strong>创建一个BufferedInputStream 并保存其参数输入流 in，以供以后使用。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BufferedInputStream​(InputStream in)</span><br></pre></td></tr></table></figure>
<p><strong>创建BufferedInputStream 具有指定缓冲区大小的，并保存其参数输入流 in，以供以后使用。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BufferedInputStream​(InputStream in, <span class="keyword">int</span> size)</span><br></pre></td></tr></table></figure>

<p><strong>创建一个新的缓冲输出流，以将数据写入指定的基础输出流。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BufferedOutputStream​(OutputStream out)</span><br></pre></td></tr></table></figure>

<p><strong>创建一个新的缓冲输出流，以指定的缓冲区大小将数据写入指定的基础输出流。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BufferedOutputStream​(OutputStream out, <span class="keyword">int</span> size)</span><br></pre></td></tr></table></figure>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110126.png"  alt=""></p>
<h2 id="BufferedReader和BufferedWriter"><a href="#BufferedReader和BufferedWriter" class="headerlink" title="BufferedReader和BufferedWriter"></a>BufferedReader和BufferedWriter</h2><p><strong>创建一个使用默认大小的输入缓冲区的缓冲字符输入流。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BufferedReader​(Reader in)</span><br></pre></td></tr></table></figure>
<p><strong>创建使用指定大小的输入缓冲区的缓冲字符输入流。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BufferedReader​(Reader in, <span class="keyword">int</span> sz)</span><br></pre></td></tr></table></figure>

<p><strong>BufferedReader拥有<font color=red size= 5>readLine()</font>方法，方法返回值为一个字符串，其中包含行的内容，不包含任何行终止符；如果在不读取任何字符的情况下到达了流的末尾，则返回null</strong></p>
<p><strong>创建一个使用默认大小的输出缓冲区的缓冲字符输出流。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BufferedWriter​(Writer out)</span><br></pre></td></tr></table></figure>

<p><strong>创建一个使用给定大小的输出缓冲区的新的缓冲字符输出流。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BufferedWriter​(Writer out, <span class="keyword">int</span> sz)</span><br></pre></td></tr></table></figure>

<p><strong>BufferedWriter将文本写入字符输出流，缓冲字符，以便有效地写入单个字符，数组和字符串。可以指定缓冲区大小，也可以接受默认大小。对于大多数用途，默认值足够大。</strong></p>
<p><strong>提供了<font color=red size= 5>newLine()</font>方法，该方法使用平台自己的由system属性定义的行分隔符概念line.separator。并非所有平台都使用换行符（’\ n’）来终止行。因此，调用此方法终止每条输出行比直接编写换行符更好。</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110127.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110128.png"  alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理流之一：缓冲流的使用</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 1.缓冲流：</span></span><br><span class="line"><span class="comment"> * BufferedInputStream</span></span><br><span class="line"><span class="comment"> * BufferedOutputStream</span></span><br><span class="line"><span class="comment"> * BufferedReader</span></span><br><span class="line"><span class="comment"> * BufferedWriter</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 2.作用：提供流的读取、写入的速度</span></span><br><span class="line"><span class="comment"> * 提高读写速度的原因：内部提供了一个缓冲区</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 3. 处理流，就是“套接”在已有的流的基础上。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现非文本文件的复制</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BufferedStreamTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">"爱情与友情.jpg"</span>);</span><br><span class="line">            File descFile = <span class="keyword">new</span> File(<span class="string">"爱情与友情3.jpg"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1造节点流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(descFile);</span><br><span class="line">            <span class="comment">//2.2造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制的细节：读写，写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line"><span class="comment">//              bos.flush();//刷新缓冲区</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内存的流</span></span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动关闭。关于内层流的关闭，我们可以省略。</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">            <span class="keyword">if</span> (bos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现文件复制的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFileWithBuffered</span><span class="params">(String srcPath, String destPath)</span> </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destPath);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            <span class="comment">//2.1 造节点流</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream((srcFile));</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">            <span class="comment">//2.2 造缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.复制的细节：读取、写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源关闭</span></span><br><span class="line">            <span class="comment">//要求：先关闭外层的流，再关闭内层的流</span></span><br><span class="line">            <span class="keyword">if</span> (bos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span></span><br><span class="line"><span class="comment">//        fos.close();</span></span><br><span class="line"><span class="comment">//        fis.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyFileWithBuffered</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        String srcPath = <span class="string">"C:\\Data\\素材库\\视频\\48370019\\588\\48370019_588_0.flv"</span>;</span><br><span class="line">        String destPath = <span class="string">"视频.avi"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        copyFileWithBuffered(srcPath, destPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"复制操作花费的时间为："</span> + (end - start));<span class="comment">//67</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用BufferedReader和BufferedWriter实现文本文件的复制</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBufferedReaderBufferedWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建文件和相应的流</span></span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="string">"dbcp.txt"</span>)));</span><br><span class="line">            bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"dbcp1.txt"</span>)));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读写操作</span></span><br><span class="line">            <span class="comment">//方式一：使用char数组</span></span><br><span class="line">       <span class="comment">/*     char[] cbuf = new char[1024];</span></span><br><span class="line"><span class="comment">            int len;</span></span><br><span class="line"><span class="comment">            while ((len = br.read(cbuf)) != -1) &#123;</span></span><br><span class="line"><span class="comment">                bw.write(cbuf, 0, len);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="comment">//方式二：使用String</span></span><br><span class="line">            String data;</span><br><span class="line">            <span class="keyword">while</span> ((data= br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//方法一：</span></span><br><span class="line"><span class="comment">//                bw.write(data+"\n");//data中不包含换行符</span></span><br><span class="line">                <span class="comment">//方法二：</span></span><br><span class="line">                bw.write(data);</span><br><span class="line"><span class="comment">//                bw.newLine();//提供换行的操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (bw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>IO流</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IO流</tag>
        <tag>缓冲流</tag>
        <tag>BufferInputStream</tag>
        <tag>BufferOutputStream</tag>
        <tag>BufferedReader</tag>
        <tag>BufferedWriter</tag>
        <tag>readline</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-IO流-4</title>
    <url>/29650.html</url>
    <content><![CDATA[<h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><p><strong>FileInputStream是Java语言中抽象类InputStream用来具体实现类的创建对象。FileInputStream可以从文件系统中的某个文件中获得输入字节，获取的文件可用性取决于主机环境。(输入流 字节流 节点流)</strong></p>
<p><strong>FileInputStream通过打开与实际文件的连接来创建一个文件，该文件由文件系统中的File 对象命名file。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> FileInputStream​(File file)</span><br></pre></td></tr></table></figure>
<p>FileInputStream通过使用文件描述符创建一个，该描述符 fdObj表示与文件系统中实际文件的现有连接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> FileInputStream​(FileDescriptor fdObj)</span><br></pre></td></tr></table></figure>

<p><strong>FileInputStream通过打开与实际文件的连接来创建一个文件，该文件由name 文件系统中的路径名命名。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> FileInputStream​(String name)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>FileInputStream操作文本文件时并在控制台打印时的问题</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110249.png"  alt="1"></p>
<h2 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h2><p><strong>FileOutputStream流是指文件字节输出流，专用于输出原始字节流如图像数据等，其继承OutputStream类，拥有输出流的基本特性(输出流 字节流 节点流)</strong></p>
<p><strong>创建文件输出流以写入由指定File对象表示的文件。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> FileOutputStream​(File file)</span><br></pre></td></tr></table></figure>
<p>创建文件输出流以写入指定的文件描述符，该文件描述符表示到文件系统中实际文件的现有连接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> FileOutputStream​(FileDescriptor fdObj)</span><br></pre></td></tr></table></figure>
<p><strong>创建文件输出流以写入由指定File对象表示的文件。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> FileOutputStream​(File file, <span class="keyword">boolean</span> append)</span><br></pre></td></tr></table></figure>
<p><strong>创建文件输出流以写入具有指定名称的文件。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> FileOutputStream​(String name)</span><br></pre></td></tr></table></figure>
<p><strong>创建文件输出流以写入具有指定名称的文件。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> FileOutputStream​(String name, <span class="keyword">boolean</span> append)</span><br></pre></td></tr></table></figure>

<p><strong>FileInputStream和FileOutputStream操作非文本文件</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110250.png"  alt="2"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试FileInputStream和FileOutputStream的使用</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 结论：</span></span><br><span class="line"><span class="comment"> * 1. 对于文本文件(.txt,.java,.c,.cpp)，使用字符流处理</span></span><br><span class="line"><span class="comment"> * 2. 对于非文本文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,...)，使用字节流处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputOutputStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用字节流FileInputStream处理文本文件，在控制台显示可能出现乱码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileInputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.造文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"hello1.txt"</span>);</span><br><span class="line">            <span class="comment">//2.造流</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;<span class="comment">//记录每次读取的字节的个数</span></span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                String str = <span class="keyword">new</span> String(buffer, <span class="number">0</span>, len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileInputOutputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">"爱情与友情.jpg"</span>);</span><br><span class="line">            File descFile = <span class="keyword">new</span> File(<span class="string">"爱情与友情2.jpg"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(descFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//复制</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"复制成功！"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String srcPath, String descPath)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">            File descFile = <span class="keyword">new</span> File(descPath);</span><br><span class="line"></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(descFile);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"复制成功！"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyFile</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        copyFile(<span class="string">"C:\\Data\\素材库\\视频\\48370019\\588\\48370019_588_0.flv"</span>,<span class="string">"视频.flv"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"复制成功花费的时间为："</span>+(end-start));<span class="comment">//花费278</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Java</category>
        <category>IO流</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Io流</tag>
        <tag>FileInputStream</tag>
        <tag>FileOutputStream</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-IO流-3</title>
    <url>/45459.html</url>
    <content><![CDATA[<h2 id="IO流操作文件"><a href="#IO流操作文件" class="headerlink" title="IO流操作文件"></a>IO流操作文件</h2><ul>
<li><p><strong>创建源 File</strong></p>
</li>
<li><p><strong>选择创建流 InputStream OutputStream Reader Writer</strong></p>
</li>
<li><p><strong>读写操作 write() read()</strong></p>
</li>
<li><p><strong>关闭资源 close()</strong></p>
</li>
</ul>
<h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><p><strong>FileReader类从InputStreamReader类继承而来。该类按字符读取流中数据。可以通过以下几种构造方法创建需要的对象。(输入流 节点流 字符流 )</strong></p>
<p><strong>在给定从中读取数据的 File 的情况下创建一个新 FileReader。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileReader</span><span class="params">(File file)</span></span></span><br></pre></td></tr></table></figure>
<p><strong>在给定从中读取数据的 FileDescriptor 的情况下创建一个新 FileReader。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileReader</span><span class="params">(FileDescriptor fd)</span></span></span><br></pre></td></tr></table></figure>
<p><strong>在给定从中读取数据的文件名的情况下创建一个新 FileReader。查看源码得知，当fileName不为空时，会调用new file（fileName）创建出一个file对象，从而简化代码。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileReader</span><span class="params">(String fileName)</span></span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110429.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110430.png"  alt=""></p>
<p><strong>将的hello.txt文件内容读入程序中，并输出到控制台</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110431.png"  alt=""></p>
<p><strong>标准写法</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110432.png"  alt=""></p>
<h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><p><strong>FileWriter 类从 OutputStreamWriter 类继承而来。该类按字符向流中写入数据。可以通过以下几种构造方法创建需要的对象。(输出流 字符流 节点流)</strong></p>
<p><strong>在给出 File 对象的情况下构造一个 FileWriter 对象。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(File file)</span></span></span><br></pre></td></tr></table></figure>
<p><strong>在给出 File 对象的情况下构造一个 FileWriter 对象。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(File file, <span class="keyword">boolean</span> append)</span></span></span><br></pre></td></tr></table></figure>
<p>构造与某个文件描述符相关联的 FileWriter 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(FileDescriptor fd)</span></span></span><br></pre></td></tr></table></figure>
<p><strong>在给出文件名的情况下构造 FileWriter 对象，它具有指示是否挂起写入数据的 boolean 值。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(String fileName, <span class="keyword">boolean</span> append)</span></span></span><br></pre></td></tr></table></figure>

<p><strong>File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。</strong></p>
<p><strong>append：如果 append 参数为 true，则将字节写入文件末尾处，从原有文件中继续写入，相当于追加信息。如果 append 参数为 false, 则写入文件开始处即对原有文件的覆盖。默认为false</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110433.png"  alt=""></p>
<h2 id="FileReader和FileWriter的共同使用"><a href="#FileReader和FileWriter的共同使用" class="headerlink" title="FileReader和FileWriter的共同使用"></a>FileReader和FileWriter的共同使用</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110434.png"  alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一、流的分类：</span></span><br><span class="line"><span class="comment"> * 1.操作数据单位：字节流、字符流</span></span><br><span class="line"><span class="comment"> * 2.数据的流向：输入流、输出流</span></span><br><span class="line"><span class="comment"> * 3.流的角色：节点流、处理流</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 二、流的体系结构</span></span><br><span class="line"><span class="comment"> * 抽象基类         节点流（或文件流）                               缓冲流（处理流的一种）</span></span><br><span class="line"><span class="comment"> * InputStream     FileInputStream   (read(byte[] buffer))        BufferedInputStream (read(byte[] buffer))</span></span><br><span class="line"><span class="comment"> * OutputStream    FileOutputStream  (write(byte[] buffer,0,len)  BufferedOutputStream (write(byte[] buffer,0,len) / flush()</span></span><br><span class="line"><span class="comment"> * Reader          FileReader (read(char[] cbuf))                 BufferedReader (read(char[] cbuf) / readLine())</span></span><br><span class="line"><span class="comment"> * Writer          FileWriter (write(char[] cbuf,0,len)           BufferedWriter (write(char[] cbuf,0,len) / flush()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderWriterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);<span class="comment">//相较于当前工程</span></span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"day09\\hello.txt"</span>);</span><br><span class="line">        System.out.println(file1.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将的hello.txt文件内容读入程序中，并输出到控制台</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 说明点：</span></span><br><span class="line"><span class="comment">     * 1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1</span></span><br><span class="line"><span class="comment">     * 2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</span></span><br><span class="line"><span class="comment">     * 3. 读入的文件一定要存在，否则就会报FileNotFoundException。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.实例化File类的对象，指明要操作的文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">            <span class="comment">//2.提供具体的流</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入</span></span><br><span class="line">            <span class="comment">//read():返回读入的一个字符。如果到达文件末尾，返回-1</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">/*        int data = fr.read();</span></span><br><span class="line"><span class="comment">        while (data != -1) &#123;</span></span><br><span class="line"><span class="comment">            System.out.print((char) data);</span></span><br><span class="line"><span class="comment">            data = fr.read();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：语法上针对方式一的修改</span></span><br><span class="line">            <span class="keyword">int</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.流的关闭连接</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对read()操作升级：使用read的重载方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReader1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.File类的实例化</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.FileReader流的实例化</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读入的操作</span></span><br><span class="line">            <span class="comment">//read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//方式一：</span></span><br><span class="line">                <span class="comment">//错误的写法</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; cbuf.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//正确的写法</span></span><br><span class="line"><span class="comment">//                for(int i = 0;i &lt; len;i++)&#123;</span></span><br><span class="line"><span class="comment">//                    System.out.print(cbuf[i]);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">//方式二：</span></span><br><span class="line">                <span class="comment">//错误的写法,对应着方式一的错误的写法</span></span><br><span class="line"><span class="comment">//                String str = new String(cbuf);</span></span><br><span class="line"><span class="comment">//                System.out.print(str);</span></span><br><span class="line">                <span class="comment">//正确的写法</span></span><br><span class="line">                String str = <span class="keyword">new</span> String(cbuf, <span class="number">0</span>, len);</span><br><span class="line">                System.out.print(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//4.资源的关闭</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从内存中写出数据到硬盘的文件里。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 说明：</span></span><br><span class="line"><span class="comment">     * 1. 输出操作，对应的File可以不存在的。并不会报异常</span></span><br><span class="line"><span class="comment">     * 2.</span></span><br><span class="line"><span class="comment">     * File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。</span></span><br><span class="line"><span class="comment">     * File对应的硬盘中的文件如果存在：</span></span><br><span class="line"><span class="comment">     * 如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原有文件的覆盖</span></span><br><span class="line"><span class="comment">     * 如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.提供File类的对象，指明写出到的文件</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"hello1.txt"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.提供FileWriter的对象，用于数据的写出</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(file, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.写出的操作</span></span><br><span class="line">            fw.write(<span class="string">"I have a dream!\n"</span>);</span><br><span class="line">            fw.write(<span class="string">"you need to have a dream!\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.流资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span> (fw != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFileReaderFileWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建File类的对象，指明读入和写出的文件</span></span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(<span class="string">"hello2.txt"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不能使用字符流来处理图片等字节数据</span></span><br><span class="line"><span class="comment">//            File srcFile = new File("爱情与友情.jpg");</span></span><br><span class="line"><span class="comment">//            File destFile = new File("爱情与友情1.jpg");</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建输入流和输出流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(srcFile);</span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(destFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入和写出操作</span></span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">int</span> len;<span class="comment">//记录每次读入到cbuf数组中的字符的个数</span></span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(cbuf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//每次写出len个字符</span></span><br><span class="line">                fw.write(cbuf, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fw != <span class="keyword">null</span>)</span><br><span class="line">                    fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="keyword">null</span>)</span><br><span class="line">                    fr.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>IO流</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IO流</tag>
        <tag>字符流</tag>
        <tag>FileReader</tag>
        <tag>FileWriter</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-IO流-2</title>
    <url>/29010.html</url>
    <content><![CDATA[<h2 id="Java-IO原理"><a href="#Java-IO原理" class="headerlink" title="Java IO原理"></a>Java IO原理</h2><p><strong>I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。</strong></p>
<p><strong>Java程序中，对于数据的输入/输出操作以“流(stream)” 的 方式进行。</strong></p>
<p><strong>java.io包下提供了各种“流”类和接口，用以获取不同种类的 数据，并通过标准的方法输入或输出数据</strong></p>
<p><strong>输入input：读取外部数据（磁盘、光盘等存储设备的数据）到 程序（内存）中。</strong></p>
<p><strong>输出output：将程序（内存） 数据输出到磁盘、光盘等存储设 备中。</strong></p>
<a id="more"></a>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110639.png"  alt=""></p>
<h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><p><strong>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)</strong></p>
<p><strong>按数据流的流向不同分为：输入流，输出流</strong></p>
<p><strong>按流的角色的不同分为：节点流（文件流），处理流</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110640.png"  alt=""></p>
<p><strong>Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个 抽象基类派生的。</strong></p>
<p><strong>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</strong></p>
<p><strong>节点流：直接从数据源或目的地读写数据</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110641.png"  alt=""></p>
<p><strong>处理流：不直接连接到数据源或目的地，而是“连接”在已存 在的流（节点流或处理流）之上，通过对数据的处理为程序提 供更为强大的读写功能。</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110642.png"  alt=""></p>
<p><strong>对于文本文件(.txt,.java,.c,.cpp)，使用字符流处理</strong></p>
<p><strong>对于非文本文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,…)，使用字节流处理。</strong></p>
<p><strong>使用字节流在不打印在控制台的前提下，也可以实现复制文本文件。但是字符流却不能处理非文本文件。</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110643.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110644.png"  alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>IO流</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>io</tag>
        <tag>流的分类</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-IO流-1</title>
    <url>/28690.html</url>
    <content><![CDATA[<h2 id="File类的使用"><a href="#File类的使用" class="headerlink" title="File类的使用"></a>File类的使用</h2><p>java.io.File类：<strong>文件和文件目录路径的抽象表示形式</strong>，与平台无关</p>
<p><strong>File类的一个对象，代表一个文件或一个文件目录（俗称：文件夹）</strong></p>
<p><strong>File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，并未涉及到写入或读取文件内容的操作。如果需要读取或写入文件内容，必须使用IO流来完成。</strong> </p>
<p><strong>想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对象，但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。</strong></p>
<p><strong>File对象可以作为参数传递给流的构造器</strong></p>
<a id="more"></a>

<h2 id="路径分隔符"><a href="#路径分隔符" class="headerlink" title="路径分隔符"></a>路径分隔符</h2><p><strong>路径中的每级目录之间用一个路径分隔符隔开。</strong></p>
<p><strong>路径分隔符和系统有关：windows和DOS系统默认使用“\”来表示 UNIX和URL使用“/”来表示</strong></p>
<p><strong>Java程序支持跨平台运行，因此路径分隔符要慎用。为了解决这个隐患，File类提供了一个常量： public  static final String separator。根据操作系统，动态的提供分隔符</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110814.png"  alt=""><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110815.png"  alt=""></p>
<h2 id="File类的构造器"><a href="#File类的构造器" class="headerlink" title="File类的构造器"></a>File类的构造器</h2><ul>
<li><p><strong>public File(String pathname) 以pathname为路径创建File对象，可以是绝对路径或者相对路径。</strong></p>
<ul>
<li><strong>绝对路径：是一个固定的路径,从盘符开始</strong></li>
<li><strong>相对路径：是相对于某个位置开始</strong></li>
</ul>
</li>
<li><p><strong>public File(String parent,String child) 以parent为父路径，child为子路径创建File对象。</strong></p>
</li>
<li><p><strong>public File(File parent,String child) 根据一个父File对象和子文件路径创建File对象</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110816.png"  alt=""></p>
</li>
</ul>
<h2 id="File类的常用方法-获取功能"><a href="#File类的常用方法-获取功能" class="headerlink" title="File类的常用方法-获取功能"></a>File类的常用方法-获取功能</h2><ul>
<li><strong>getAbsolutePath():获取绝对路径</strong></li>
<li><strong>getPate():获取路径</strong></li>
<li><strong>getName():获取名称</strong></li>
<li><strong>getParent():获取上层文件目录路径。若无，返回null</strong></li>
<li><strong>length():获取文件长度（即：字节数）。不能获取目录的长度。</strong></li>
<li><strong>lastModified():获取最后一次的修改时间，毫秒值</strong></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110817.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110818.png"  alt=""></p>
<ul>
<li><strong>list():获取指定目录下的所有文件或者文件目录的名称数组</strong></li>
<li><strong>listFiles():获取指定目录下的所有文件或者文件目录的File数组</strong></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110819.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110820.png"  alt=""></p>
<h2 id="File类的常用方法-重命名功能"><a href="#File类的常用方法-重命名功能" class="headerlink" title="File类的常用方法-重命名功能"></a>File类的常用方法-重命名功能</h2><ul>
<li><strong>renameTo(File dest):把文件重命名为指定的文件路径</strong><ul>
<li><strong>比如：file1.renameTo(file2)为例</strong></li>
<li><strong>要想保证返回true，需要file1在硬盘中是存在的，且file2不能在硬盘中存在。</strong></li>
</ul>
</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110821.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110822.png"  alt=""></p>
<h2 id="File类的常用方法-判断功能"><a href="#File类的常用方法-判断功能" class="headerlink" title="File类的常用方法-判断功能"></a>File类的常用方法-判断功能</h2><ul>
<li><strong>isDirectory()：判断是否是文件目录</strong></li>
<li><strong>isFile() ：判断是否是文件</strong></li>
<li><strong>exists() ：判断是否存在</strong></li>
<li><strong>canRead() ：判断是否可读</strong></li>
<li><strong>canWrite() ：判断是否可写</strong></li>
<li><strong>isHidden() ：判断是否隐藏</strong></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110823.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110824.png"  alt=""></p>
<h2 id="File类的常用方法-创建和删除功能"><a href="#File类的常用方法-创建和删除功能" class="headerlink" title="## File类的常用方法-创建和删除功能"></a>## File类的常用方法-创建和删除功能</h2><ul>
<li><p><strong>delete()：删除文件或者文件夹 删除注意事项：Java中的删除不走回收站。</strong></p>
</li>
<li><p><strong>createNewFile() ：创建文件。若文件存在，则不创建，返回false</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110825.png"  alt=""></p>
</li>
<li><p><strong>mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</strong></p>
</li>
<li><p><strong>mkdirs() ：创建文件目录。如果此文件目录存在，就不创建了。如果上层文件目录不存在，一并创建。</strong></p>
</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110826.png"  alt=""></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>相对路径在IDEA和Eclipse中使用的区别？</p>
<ul>
<li><p>IDEA</p>
<ul>
<li>如果使用单元测试方法，使用相对路径基于当前的Moudule的。</li>
<li>如果使用mian()测试，使用相对路径基于当前Project的。</li>
</ul>
</li>
<li><p>Eclipse</p>
<ul>
<li>单元测试方法还是main(),相对于路径都是基于当前Project的。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * File类的使用</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 1.File类的一个对象，代表一个文件或一个文件目录（俗称：文件夹）</span></span><br><span class="line"><span class="comment"> * 2.File类声明在java.io包下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如何创建File类的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器1</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);<span class="comment">//相对路径</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"C:\\Data\\IntelliJ IDEA Work Space\\IO\\he.txt"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file);</span><br><span class="line">        System.out.println(file2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器2</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">"C:\\Data\\IntelliJ IDEA Work Space\\IO"</span>, <span class="string">"IO"</span>);</span><br><span class="line">        System.out.println(file3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器3</span></span><br><span class="line">        File file4 = <span class="keyword">new</span> File(file3, <span class="string">"hi.txt"</span>);</span><br><span class="line">        System.out.println(file4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getAbsolutePath():获取绝对路径</span></span><br><span class="line"><span class="comment">     * getPate():获取路径</span></span><br><span class="line"><span class="comment">     * getName():获取名称</span></span><br><span class="line"><span class="comment">     * getParent():获取上层文件目录路径。若无，返回null</span></span><br><span class="line"><span class="comment">     * length():获取文件长度（即：字节数）。不能获取目录的长度。</span></span><br><span class="line"><span class="comment">     * lastModified():获取最后一次的修改时间，毫秒值</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * list():获取指定目录下的所有文件或者文件目录的名称数组</span></span><br><span class="line"><span class="comment">     * listFiles():获取指定目录下的所有文件或者文件目录的File数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"C:\\Data\\IntelliJ IDEA Work Space\\IO\\he.txt"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(file1.getAbsoluteFile());</span><br><span class="line">        System.out.println(file1.getPath());</span><br><span class="line">        System.out.println(file1.getName());</span><br><span class="line">        System.out.println(file1.getParent());</span><br><span class="line">        System.out.println(file1.length());</span><br><span class="line">        System.out.println(file1.lastModified());</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(file2.getAbsoluteFile());</span><br><span class="line">        System.out.println(file2.getPath());</span><br><span class="line">        System.out.println(file2.getName());</span><br><span class="line">        System.out.println(file2.getParent());</span><br><span class="line">        System.out.println(file2.length());</span><br><span class="line">        System.out.println(file2.lastModified());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\Data\\IntelliJ IDEA Work Space\\IO"</span>);</span><br><span class="line"></span><br><span class="line">        String[] list = file.list();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * renameTo(File dest):把文件重命名为指定的文件路径</span></span><br><span class="line"><span class="comment">     * 比如：file1.renameTo(file2)为例</span></span><br><span class="line"><span class="comment">     * 要想保证返回true，需要file1在硬盘中是存在的，且file2不能在硬盘中存在。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"C:\\Data\\IntelliJ IDEA Work Space\\IO\\hello.txt"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> renameTo = file1.renameTo(file2);</span><br><span class="line">        System.out.println(renameTo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * isDirectory()：判断是否是文件目录</span></span><br><span class="line"><span class="comment">     * isFile() ：判断是否是文件</span></span><br><span class="line"><span class="comment">     * exists() ：判断是否存在</span></span><br><span class="line"><span class="comment">     * canRead() ：判断是否可读</span></span><br><span class="line"><span class="comment">     * canWrite() ：判断是否可写</span></span><br><span class="line"><span class="comment">     * isHidden() ：判断是否隐藏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file1.isDirectory());</span><br><span class="line">        System.out.println(file1.isFile());</span><br><span class="line">        System.out.println(file1.exists());</span><br><span class="line">        System.out.println(file1.canRead());</span><br><span class="line">        System.out.println(file1.canWrite());</span><br><span class="line">        System.out.println(file1.isHidden());</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"c:\\Data"</span>);</span><br><span class="line">        System.out.println(file2.isDirectory());</span><br><span class="line">        System.out.println(file2.isFile());</span><br><span class="line">        System.out.println(file2.exists());</span><br><span class="line">        System.out.println(file2.canRead());</span><br><span class="line">        System.out.println(file2.canWrite());</span><br><span class="line">        System.out.println(file2.isHidden());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建硬盘中对应的文件或文件目录</span></span><br><span class="line"><span class="comment">     * createNewFile() ：创建文件。若文件存在，则不创建，返回false</span></span><br><span class="line"><span class="comment">     * mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</span></span><br><span class="line"><span class="comment">     * mkdirs() ：创建文件目录。如果此文件目录存在，就不创建了。如果上层文件目录不存在，一并创建</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 删除磁盘中的文件或文件目录</span></span><br><span class="line"><span class="comment">     * delete()：删除文件或者文件夹</span></span><br><span class="line"><span class="comment">     * 删除注意事项：Java中的删除不走回收站。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"hi.txt"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!file1.exists()) &#123;</span><br><span class="line">            <span class="comment">//文件的创建</span></span><br><span class="line">            file1.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">"创建成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//文件存在</span></span><br><span class="line">            file1.delete();</span><br><span class="line">            System.out.println(<span class="string">"删除成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//文件目录的创建</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"d:\\io\\io1\\io3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> mkdir = file1.mkdir();</span><br><span class="line">        <span class="keyword">if</span> (mkdir) &#123;</span><br><span class="line">            System.out.println(<span class="string">"创建成功1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"d:\\io\\io1\\io4"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> mkdir1 = file2.mkdirs();</span><br><span class="line">        <span class="keyword">if</span> (mkdir1) &#123;</span><br><span class="line">            System.out.println(<span class="string">"创建成功2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要想删除成功，io4文件目录下不能有子目录或文件</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">"D:\\io\\io1\\io4"</span>);</span><br><span class="line">        System.out.println(file3.delete());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>IO流</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IO流</tag>
        <tag>File类</tag>
        <tag>路径分隔符</tag>
        <tag>File类的常用方法</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-9</title>
    <url>/28234.html</url>
    <content><![CDATA[<h2 id="Spring常用注解"><a href="#Spring常用注解" class="headerlink" title="Spring常用注解"></a>Spring常用注解</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：使用注解，必须要告诉spring在创建容器时要扫描的包。</span><br><span class="line"></span><br><span class="line">用于创建对象的</span><br><span class="line">	他们的作用就和在xml配置文件中编写一个&lt;bean&gt;标签实现的功能是一样的</span><br><span class="line">	@Component</span><br><span class="line">		作用：用于把当前类对象存入spring容器中</span><br><span class="line">		属性：</span><br><span class="line">			value：用于指定的bean的id，当我们不写时默认使用类名首字母小写的值</span><br><span class="line">	@Controller:一般用在表现层，控制器</span><br><span class="line">	@Service:一般用在业务层</span><br><span class="line">	@Repository:一般用在持久层</span><br><span class="line">	以上三个注解他们的作用和属性于Component是一模一样的。</span><br><span class="line">	他们三个是spring框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰</span><br><span class="line"></span><br><span class="line">用于注入数据的</span><br><span class="line">	他们的作用就和在xml配置文件中的bean标签中写一个&lt;property&gt;&lt;&#x2F;property&gt;标签的作用是一样的</span><br><span class="line">	@Autowired:</span><br><span class="line">		作用：</span><br><span class="line">			自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功</span><br><span class="line">			如果ioc容器中没有任何bean类型和和要注入的变量类型匹配，则报错。</span><br><span class="line">		出现位置：</span><br><span class="line">			可以是变量上，也可以是方法上</span><br><span class="line">		细节：</span><br><span class="line">			在使用注解注入式时，set方法就不是必须的了。</span><br><span class="line">	@Qualifier：</span><br><span class="line">		作用：在按照类中注入的基础之上在按名称注入。它在给类成员注入时不能单独使用。（可以配合@Autowired使用，当@Autowired按byType匹配到多个bean时，此时变量名又和所匹配到的多个bean的变量名不一致。可以是用此注解，值为要匹配bean的变量名）但是在给方法参数注入时可以单独使用</span><br><span class="line">		属性：</span><br><span class="line">			value：用于指定注入bean的id。</span><br><span class="line">	@Resource</span><br><span class="line">		作用：直接按照bean的id注入。可以独立使用</span><br><span class="line">		属性：</span><br><span class="line">			name：用于指定bean的id。</span><br><span class="line">		</span><br><span class="line">	以上三个注入都只能注入其他bean类型的数据，而基本数据类型和String类型无法使用上述注解实现。</span><br><span class="line">	另外，集合类型的注入只能通过xml来实现。</span><br><span class="line">	@Value</span><br><span class="line">		作用：用于注入基本数据类型和String类型的数据或者注入properties文件数据</span><br><span class="line">		属性：</span><br><span class="line">			value：用于指定数据的值。它可以使用spring中SpEL（也就是spring的el表达式）</span><br><span class="line">				SpEL的写法：#&#123;表达式&#125;</span><br><span class="line">		使用：</span><br><span class="line">			@Value(&quot;#&#123;&#125;&quot;)   SpEL表达式</span><br><span class="line">			@Value(&quot;#&#123;&#125;&quot;) 表示SpEl表达式通常用来获取bean的属性，或者调用bean的某个方法。当然还有可以表示常量</span><br><span class="line">			</span><br><span class="line">			@Value(&quot;$&#123;&#125;&quot;) </span><br><span class="line">			通过@Value(&quot;$&#123;&#125;&quot;) 可以获取对应属性文件中定义的属性值。</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line">@Value(&quot;#&#123;&#125;&quot;) 表示SpEl表达式通常用来获取bean的属性，或者调用bean的某个方法。当然还有可以表示常量</span><br><span class="line">用于改变作用域范围的</span><br><span class="line">	他们的作用就和在bean标签中使用scope属性实现的功能是一样的</span><br><span class="line">	@Scope</span><br><span class="line">		作用：用于指定bean的作用范围</span><br><span class="line">		属性：</span><br><span class="line">			value：指定范围的取值。常用取值：singleton，prototype(单例，多例)</span><br><span class="line">和声明周期相关(了解)</span><br><span class="line">	他们的作用就和在bean标签中使用init-method和destroy-method的作用是一样的</span><br><span class="line">	@PreDestroy</span><br><span class="line">		作用：用于指定销毁方法</span><br><span class="line">	@PostConstruct</span><br><span class="line">		作用：用于指定初始化方法</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405110944.png"  alt=""></p>
<ul>
<li><p><strong>@Component 创建类对象,相当于配置&lt;-bean/&gt;</strong></p>
</li>
<li><p><strong>@Service 与@Component 功能相同.写在 ServiceImpl 类上.</strong></p>
</li>
<li><p><strong>@Repository 与@Component 功能相同.写在数据访问层类上</strong></p>
</li>
<li><p><strong>@Controller 与@Component 功能相同.写在控制器类上.</strong></p>
</li>
<li><p><strong>@Resource(不需要写对象的 get/set)</strong></p>
<ul>
<li><strong>写在java代码中的注解</strong></li>
<li><strong>默认按照 byName 注入,如果没有名称对象,按照 byType 注入</strong></li>
<li><strong>建议把对象名称和 spring 容器中对象名相同</strong></li>
</ul>
</li>
<li><p><strong>@Autowired(不需要写对象的 get/set)</strong></p>
<ul>
<li><strong>spring 的注解</strong></li>
<li><strong>默认按照 byType 注入.</strong></li>
</ul>
</li>
<li><p><strong>@Value()参照上面详细说明</strong></p>
</li>
<li><p><strong>@Pointcut() 定义切点</strong></p>
</li>
<li><p><strong>@Aspect() 定义切面类</strong></p>
</li>
<li><p><strong>@Before() 前置通知</strong></p>
</li>
<li><p><strong>@After 后置通知</strong></p>
</li>
<li><p><strong>@AfterReturning 后置通知,必须切点正确执行</strong></p>
</li>
<li><p><strong>@AfterThrowing 异常通知</strong></p>
</li>
<li><p><strong>@Arround 环绕通知</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>SSM</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>常用注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-8</title>
    <url>/44683.html</url>
    <content><![CDATA[<h2 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h2><p><strong>由程序员编程事务控制代码.例如：OpenSessionInView 编程式事务</strong></p>
<a id="more"></a>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111044.png"  alt=""></p>
<h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p><strong>事务控制代码已经由 spring 写好.程序员只需要声明出哪些方法需要进行事务控制和如何进行事务控制.</strong></p>
<p><strong>声明式事务都是针对于 ServiceImpl 类下方法的.事务管理器基于通知(advice)的.</strong></p>
<p><strong>在 spring 配置文件中配置声明式事务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;locaohost:3306&#x2F;ssm?characterEncoding&#x3D;utf-8&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;kylin&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;txManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--配置声明式事务--&gt;</span><br><span class="line">    &lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;txManager&quot;&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;!--哪些方法需要有事务控制--&gt;</span><br><span class="line">            &lt;!--方法以ins开头事务管理--&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;ins*&quot;&#x2F;&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;del*&quot;&#x2F;&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;upd*&quot;&#x2F;&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;*&quot; read-only&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;tx:attributes&gt;</span><br><span class="line">    &lt;&#x2F;tx:advice&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!--切点范围设置大一些--&gt;</span><br><span class="line">        &lt;aop:pointcut id&#x3D;&quot;mypoint&quot; expression&#x3D;&quot;execution(* com.kylin.servcie.impl.*.*(..))&quot;&gt;&lt;&#x2F;aop:pointcut&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot; pointcut-ref&#x3D;&quot;mypoint&quot;&gt;&lt;&#x2F;aop:advisor&gt;</span><br><span class="line">    &lt;&#x2F;aop:config&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111045.png"  alt=""></p>
<h2 id="声明式事务中属性解释"><a href="#声明式事务中属性解释" class="headerlink" title="声明式事务中属性解释"></a>声明式事务中属性解释</h2><ul>
<li><p><strong>name=” ” 哪些方法需要有事务控制</strong></p>
<ul>
<li><strong>支持*通配符</strong></li>
</ul>
</li>
<li><p><strong>readonly=”boolean” 是否是只读事务.</strong></p>
<ul>
<li><strong>如果为 true,告诉数据库此事务为只读事务.数据化优化,会对性能有一定提升,所以只要是查询的方法,建议使用此数据.</strong></li>
<li><strong>如果为 false(默认值),事务需要提交的事务.建议新增,删除,修改.</strong></li>
</ul>
</li>
<li><p><strong>propagation 控制事务传播行为.</strong></p>
<ul>
<li><p><strong>当一个具有事务控制的方法被另一个有事务控制的方法调用后,需要如何管理事务(新建事务?在事务中执行?把事务挂起?报异常?)</strong></p>
</li>
<li><p><strong>REQUIRED(默认值): 如果当前有事务,就在事务中执行,如果当前没有事务,新建一个事务.</strong></p>
</li>
<li><p><strong>SUPPORTS:如果当前有事务就在事务中执行,如果当前没有事务,就在非事务状态下执行.</strong></p>
</li>
<li><p><strong>MANDATORY:必须在事务内部执行,如果当前有事务,就在事务中执行,如果没有事务,报错.</strong></p>
</li>
<li><p><strong>REQUIRES_NEW:必须在事务中执行,如果当前没有事务,新建事务,如果当前有事务,把当前事务挂起.</strong></p>
</li>
<li><p><strong>NOT_SUPPORTED:必须在非事务下执行,如果当前没有事务,正常执行,如果当前有事务,把当前事务挂起.</strong></p>
</li>
<li><p><strong>NEVER:必须在非事务状态下执行,如果当前没有事务,正常执行,如果当前有事务,报错.</strong></p>
</li>
<li><p><strong>NESTED:必须在事务状态下执行.如果没有事务,新建事务,如果当前有事务,创建一个嵌套事务.</strong></p>
</li>
</ul>
</li>
<li><p><strong>isolation=”” 事务隔离级别</strong></p>
<ul>
<li><p><strong>在多线程或并发访问下如何保证访问到的数据具有完整性的.</strong></p>
</li>
<li><p><strong>脏读:一个事务(A)读取到另一个事务(B)中未提交的数据,另一个事务中数据可能进行了改变,此时A事务读取的数据可能和数据库中数据是不一致的,此时认为数据是脏数据,读取脏数据过程叫做脏读.</strong></p>
</li>
<li><p><strong>不可重复读</strong></p>
<ul>
<li><strong>主要针对的是某行数据.(或行中某列)</strong></li>
<li><strong>主要针对的操作是修改操作.</strong></li>
<li><strong>两次读取在同一个事务内</strong></li>
<li><strong>当事务A第一次读取事务后,事务B对事务A读取的淑君进行修改,事务 A 中再次读取的数据和之前读取的数据不一致,过程不可重复读.</strong></li>
</ul>
</li>
<li><p><strong>幻读</strong></p>
<ul>
<li><strong>主要针对的操作是新增或删除</strong></li>
<li><strong>两次事务的结果.</strong></li>
<li><strong>事务A按照特定条件查询出结果,事务B新增了一条符合条件的数据.事务 A 中查询的数据和数据库中的数据不一致的,事务 A 好像出现了幻觉,这种情况称为幻读.</strong></li>
</ul>
</li>
<li><p><strong>DEFAULT: 默认值,由底层数据库自动判断应该使用什么隔离界别</strong></p>
</li>
<li><p><strong>READ_UNCOMMITTED: 可以读取未提交数据,可能出现脏读,不重复读,幻读.效率最高.</strong></p>
</li>
<li><p><strong>READ_COMMITTED:只能读取其他事务已提交数据.可以防止脏读,可能出现不可重复读和幻读.</strong></p>
</li>
<li><p><strong>REPEATABLE_READ: 读取的数据被添加锁,防止其他事务修改此数据,可以防止不可重复读.脏读,可能出现幻读.</strong></p>
</li>
<li><p><strong>SERIALIZABLE: 排队操作,对整个表添加锁.一个事务在操作数据时,另一个事务等待事务操作完成后才能操作这个表.最安全的效率最低的.</strong></p>
</li>
</ul>
</li>
<li><p><strong>rollback-for=”异常类型全限定路径”</strong></p>
<ul>
<li><strong>当出现什么异常时需要进行回滚</strong></li>
<li><strong>建议:给定该属性值.</strong></li>
<li><strong>手动抛异常一定要给该属性值.</strong></li>
</ul>
</li>
<li><p>no-rollback-for=” ”</p>
<ul>
<li><strong>当出现什么异常时不滚回事务</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>spring</tag>
        <tag>声明式事务</tag>
        <tag>编程式事务</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-7</title>
    <url>/43723.html</url>
    <content><![CDATA[<h2 id="scope属性"><a href="#scope属性" class="headerlink" title="scope属性"></a>scope属性</h2><p><strong>1. &lt;-bean&gt;的属性</strong><br><strong>2. 作用:控制对象有效范围(单例,多例等)</strong><br><strong>3. <bean/>标签对应的对象默认是单例的.无论获取多少次,都是同一个对象</strong></p>
<ul>
<li>scope 可取值<ul>
<li><strong>singleton 默认值,单例</strong></li>
<li><strong>prototype 多例,每次获取重新实例化</strong></li>
<li>request 每次请求重新实例化</li>
<li>session 每个会话对象内,对象是单例的.</li>
<li>application 在 application 对象内是单例</li>
<li>global session spring推出的一个对象,依赖于spring-webmvc-portlet,类似于 session<a id="more"></a></li>
</ul>
</li>
<li><strong>singleton-单例</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111141.png"  alt=""></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111142.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111143.png"  alt=""></p>
<ul>
<li><strong>prototype-多例</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111144.png"  alt=""></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111145.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111146.png"  alt=""></p>
]]></content>
      <tags>
        <tag>spring</tag>
        <tag>scope属性</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-6</title>
    <url>/27146.html</url>
    <content><![CDATA[<h2 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h2><p><strong>在 Spring 配置文件中对象名和 ref=”id”id 名相同使用自动注入,可以不配置&lt;-property/&gt;</strong></p>
<ul>
<li>两种配置办法<ul>
<li><strong>在&lt;-bean&gt;中通过 autowire=”” 配置,只对这个&lt;-bean&gt;生效</strong></li>
<li><strong>在&lt;-beans&gt;中通过 default-autowire=””配置,表当当前文件中所有&lt;-bean&gt;都是全局配置内容</strong></li>
</ul>
</li>
<li><strong>autowire=”” 可取值</strong><ul>
<li><strong>default: 默认值,根据全局 default-autowire=””值.默认全局和局部都没有配置情况下,相当于 no</strong></li>
<li><strong>no: 不自动注入</strong></li>
<li><strong>byName: 通过名称自动注入.在 Spring 容器中找类的 Id</strong></li>
<li><strong>byType: 根据类型注入.class</strong><ul>
<li><strong>spring 容器中不可以出现两个相同类型的&lt;-bean&gt;，从而保错</strong></li>
</ul>
</li>
<li><strong>constructor: 根据构造方法注入.</strong><ul>
<li><strong>提供对应参数的构造方法(构造方法参数中包含注入对象那个)</strong></li>
<li><strong>底层使用 byName, 构造方法参数名和其他&lt;-bean&gt;的 id相同</strong><a id="more"></a>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>byName<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111303.png"  alt=""><br>byType<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111304.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111305.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111306.png"  alt=""><br><strong>注意：如果通过spring实例化两个一样类型的对象，通过byType自动注入会报异常。</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111307.png"  alt=""><br>constructor<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111308.png"  alt=""></p>
<h2 id="Spring中加载properties文件"><a href="#Spring中加载properties文件" class="headerlink" title="Spring中加载properties文件"></a>Spring中加载properties文件</h2><p><strong>在src下新建 xxx.properties 文件</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111309.png"  alt=""><br><strong>在spring 配置文件中先引入 xmlns:context,在下面使用context：property-placeholder标签并使用location属性加载配置文件。如果需要加载多个配置文件逗号分割</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111310.png"  alt=""><br><strong>添加了属性文件加载,并且在&lt;-beans&gt;中开启自动注入。</strong><br><strong>注意SqlSessionFactoryBean的id 不能叫做sqlSessionFactory</strong><br><strong>把原来通过ref引用替换成value赋值,自动注入只能影响ref,不会影响 value 赋值</strong><br><strong>获取properties文件的值通过“${键名}”获取</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111311.png"  alt=""><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111312.png"  alt=""></p>
<ul>
<li><p><strong>使用注解获取properties的内容</strong></p>
<ul>
<li><p><strong>在被Spring管理的类中通过@Value(“${key}”)取出properties中内容</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111313.png"  alt=""></p>
</li>
<li><p>second.properties文件<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111314.png"  alt=""></p>
</li>
<li><p><strong>在spring中使用注解，就必须添加注解扫描&lt;-context:component-scanbase-package=”com.bjsxt.service.impl”&gt;&lt;/-context:compo nent-scan&gt;</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111315.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111316.png"  alt=""></p>
</li>
<li><p>在类中添加</p>
<ul>
<li><strong>key 和变量名可以不相同</strong></li>
<li><strong>变量类型任意,只要保证 key 对应的 value 能转换成这个类型就可以.</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>spring</tag>
        <tag>自动注入</tag>
        <tag>加载properties文件</tag>
        <tag>使用注解加载properties文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-5</title>
    <url>/27466.html</url>
    <content><![CDATA[<h2 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h2><p><strong>英文名称:(Aspect Oriented Programming)</strong></p>
<p><strong>正常程序执行流程都是纵向执行流程</strong></p>
<p><strong>又叫面向切面编程,在原有纵向执行流程中添加横切面</strong></p>
<ul>
<li><strong>特点：</strong><ul>
<li><strong>不需要修改原有程序代码</strong></li>
<li><strong>高扩展性</strong></li>
<li><strong>原有功能相当于释放了部分逻辑.让职责更加明确.</strong><a id="more"></a></li>
</ul>
</li>
</ul>
<p><strong>面向切面编程是什么?</strong></p>
<ul>
<li><p><strong>在程序原有纵向执行流程中,针对某一个或某一些方法添加通知,形成横切面过程就叫做面向切面编程.</strong></p>
</li>
<li><p><strong>常用概念</strong></p>
<ul>
<li><strong>原有功能: 切点,pointcut</strong></li>
<li><strong>前置通知: 在切点之前执行的功能.beforeadvice</strong></li>
<li><strong>后置通知: 在切点之后执行的功能,afteradvice</strong></li>
<li><strong>如果切点执行过程中出现异常,会触发异常通知.throwsadvice</strong></li>
<li><strong>所有功能总称叫做切面.</strong></li>
<li><strong>织入: 把切面嵌入到原有功能的过程叫做织入</strong></li>
<li><strong>spring 提供了 2 种 AOP 实现方式</strong><ul>
<li><strong>Schema-based</strong><ul>
<li><strong>每个通知都需要实现接口或类</strong></li>
<li><strong>配置 spring 配置文件时在&lt;-aop:config&gt;配置</strong></li>
</ul>
</li>
<li><strong>AspectJ</strong><ul>
<li><strong>每个通知不需要实现接口或类</strong></li>
<li><strong>配置 spring 配置文件是在&lt;-aop:config&gt;的子标签&lt;-aop:aspect&gt;中配置</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Schema-based-实现AOP"><a href="#Schema-based-实现AOP" class="headerlink" title="Schema-based 实现AOP"></a>Schema-based 实现AOP</h2><p>导入jar<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111522.png"  alt=""></p>
</li>
<li><p>新建通知类</p>
<ul>
<li><p><strong>新建前置通知类–实现MethodBeforeAdvice接口</strong></p>
<ul>
<li><strong>method: 切点方法对象 Method 对象</strong></li>
<li><strong>objects: 切点方法参数</strong></li>
<li><strong>o:切点在哪个对象中</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111523.png"  alt=""></li>
</ul>
</li>
<li><p><strong>新建后置通知类–实现AfterReturningAdvice接口</strong></p>
<ul>
<li><strong>o:切点方法返回值</strong></li>
<li><strong>method:切点方法对象</strong></li>
<li><strong>objects:切点方法参数</strong></li>
<li><strong>o1:切点方法所在类的对象</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111524.png"  alt=""></li>
</ul>
</li>
<li><p><strong>配置 spring 配置文件</strong></p>
<ul>
<li><p><strong>引入 aop 命名空间</strong></p>
</li>
<li><p><strong>配置通知类的&lt;-bean&gt;</strong></p>
</li>
<li><p><strong>配置切面</strong></p>
</li>
<li><p><strong>‘*’ 通配符,匹配任意方法名,任意类名,任意一级包名</strong></p>
</li>
<li><p><strong>如果希望匹配任意方法参数 (..)</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111525.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111526.png"  alt=""></p>
</li>
</ul>
</li>
<li><p><strong>异常通知–实现throwsAdvice接口</strong></p>
<ul>
<li><p><strong>必须自己写方法,且必须叫 afterThrowing</strong></p>
</li>
<li><p><strong>有两种参数方式 必须是 1 个或 4 个</strong></p>
</li>
<li><p><strong>异常类型要与切点报的异常类型一致</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111527.png"  alt=""></p>
</li>
<li><p><strong>在 ApplicationContext.xml 配置</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111528.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111529.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111530.png"  alt=""></p>
</li>
</ul>
</li>
<li><p><strong>环绕通知–实现 MethodInterceptor接口</strong></p>
<ul>
<li><p>新建一个类实现 MethodInterceptor<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111531.png"  alt=""></p>
</li>
<li><p>配置spring配置文件<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111532.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111533.png"  alt=""></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Schema-based-实现AOP总结"><a href="#Schema-based-实现AOP总结" class="headerlink" title="Schema-based 实现AOP总结"></a>Schema-based 实现AOP总结</h2><p><strong>新建一个通知，要创建一个类来实现相应通知的接口。</strong></p>
<p><strong>在spring配置文件中，首先要通过bean标签将通知类交给spring实例化。然后通过aop:config标签配置切面，在此标签下通过aop:pointcut配置切点，expression属性配置切点的具体所在位置。通过aop:advisor标签引入相应已经给spring实例类。</strong></p>
<h2 id="AspectJ方式-实现AOP"><a href="#AspectJ方式-实现AOP" class="headerlink" title="AspectJ方式 实现AOP"></a>AspectJ方式 实现AOP</h2><ul>
<li><p><strong>新建类,不用实现</strong></p>
<ul>
<li><strong>类中方法名任意</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111534.png"  alt=""></li>
</ul>
</li>
<li><p><strong>配置 spring 配置文件</strong></p>
<ul>
<li><p><strong>&lt;-aop:after/&gt; 后置通知,是否出现异常都执行</strong></p>
</li>
<li><p><strong>&lt;-aop:after-returing/&gt; 后置通知,只有当切点正确执行时执行</strong></p>
</li>
<li><p><strong>&lt;-aop:after/&gt; 和 &lt;-aop:after-returing/&gt; 和&lt;-aop:after-throwing/&gt;执行顺序和配置顺序有关</strong></p>
</li>
<li><p><strong>execution() 括号不能扩上 args</strong></p>
</li>
<li><p><strong>中间使用 and 不能使用&amp;&amp; 由 spring 把 and 解析成&amp;&amp;</strong></p>
</li>
<li><p><strong>args(名称) 名称自定义的.顺序和 demo1(参数,参数)对应</strong></p>
</li>
<li><p><strong>&lt;-aop:before/&gt; arg-names=” 名 称 ” 名 称 来 源 于expression=”” 中 args(),名称必须一样</strong></p>
<ul>
<li><p><strong>args() 有几个参数,arg-names 里面必须有几个参数</strong></p>
</li>
<li><p><strong>arg-names=”” 里面名称必须和通知方法参数名对应</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111535.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111536.png"  alt=""></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="AspectJ方式实现AOP总结"><a href="#AspectJ方式实现AOP总结" class="headerlink" title="AspectJ方式实现AOP总结"></a>AspectJ方式实现AOP总结</h2><p><strong>使用AspectJ方式不需要实现通知接口，自定义通知方法。</strong></p>
<p><strong>在spring配置文件中首先通过bean标签将存在通知方法的的类交给spring管理实例化。在通过aop:config标签配置切面，在标签内使用aop:aspect标签声明使用的是AspectJ方式并通过ref引用含有通知方法的类。通过aop:pointcut配置切点expression属性配置切点的具体所在位置。通过aop:before标签声明前置通知，aop:after标签声明后置通知，aop:after-throwing声明异常通知，aop:around声明环绕通知。此类标签通过pointcut-ref引用切点，method引用具体方法，arg-names引用参数。</strong></p>
<h2 id="使用注解实现AOP-基于-Aspect"><a href="#使用注解实现AOP-基于-Aspect" class="headerlink" title="使用注解实现AOP(基于 Aspect)"></a>使用注解实现AOP(基于 Aspect)</h2><ul>
<li><strong>spring 不会自动去寻找注解,必须告诉 spring 哪些包下的类中可能有注解</strong><ul>
<li><strong>引入 xmlns:context 和context:component-scan标签</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111537.png"  alt=""></li>
</ul>
</li>
<li>@Component<ul>
<li><strong>相当于<bean/></strong></li>
<li><strong>如果括号里没有参数,默认实例化后id为把类名首字母变小写,相当于&lt;-bean id=””/&gt;</strong></li>
<li><strong>@Component(“自定义名称”)</strong></li>
</ul>
</li>
<li>在 Demo 类中添加@Componet<ul>
<li><strong>在方法上添加@Pointcut(“execution(* 包名+类名+方法名”) 定义切点</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111538.png"  alt=""></li>
</ul>
</li>
<li><strong>在通知类中配置</strong><ul>
<li><strong>@Component 类被 spring 管理</strong></li>
<li><strong>@Aspect 相当于&lt;-aop:aspect/&gt;表示通知方法在当前类中</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111539.png"  alt=""></li>
</ul>
</li>
<li>spring配置文件中修改代理模式 默认为jdk模式<br>  <img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111540.png"  alt=""></li>
</ul>
<h2 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h2><p><strong>设计模式:前人总结的一套解决特定问题的代码.</strong></p>
<ul>
<li>代理设计模式优点:<ul>
<li><strong>保护真实对象</strong></li>
<li><strong>让真实对象职责更明确.</strong></li>
<li><strong>扩展</strong></li>
</ul>
</li>
<li>代理设计模式<ul>
<li><strong>真实对象.(老总)</strong></li>
<li><strong>代理对象(秘书)</strong></li>
<li><strong>抽象对象(抽象功能),谈小目标</strong></li>
</ul>
</li>
</ul>
<h2 id="静态代理设计模式"><a href="#静态代理设计模式" class="headerlink" title="静态代理设计模式"></a>静态代理设计模式</h2><ul>
<li>由代理对象代理所有真实对象的功能.<ul>
<li>自己编写代理类</li>
<li>每个代理的功能需要单独编写</li>
</ul>
</li>
<li>静态代理设计模式的缺点:<ul>
<li><strong>当代理功能比较多时,代理类中方法需要写很多.</strong></li>
</ul>
</li>
</ul>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p><strong>为了解决静态代理频繁编写代理功能缺点.</strong></p>
<ul>
<li><p>分类:</p>
<ul>
<li><strong>JDK 提供的</strong></li>
<li><strong>cglib 动态代理</strong></li>
</ul>
</li>
<li><p><strong>JDK 动态代理</strong></p>
</li>
<li><p><strong>和 cglib 动态代理对比</strong></p>
<ul>
<li><strong>优点:jdk 自带,不需要额外导入 jar</strong></li>
</ul>
</li>
<li><p>缺点:</p>
<ul>
<li><strong>真实对象必须实现接口</strong></li>
<li><strong>利用反射机制.效率不高.</strong></li>
</ul>
</li>
</ul>
<p>使用 JDK 动态代理时可能出现下面异常<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111541.png"  alt=""></p>
<p><strong>出现原因:希望把接口对象转换为具体真实对象</strong></p>
<h2 id="cglib-动态代理"><a href="#cglib-动态代理" class="headerlink" title="cglib 动态代理"></a>cglib 动态代理</h2><ul>
<li>cglib 优点:<ul>
<li><strong>基于字节码,生成真实对象的子类.</strong></li>
<li><strong>运行效率高于 JDK 动态代理.</strong></li>
<li><strong>不需要实现接口</strong></li>
</ul>
</li>
<li>cglib 缺点:<br>  <strong>非 JDK 功能,需要额外导入 jar</strong></li>
<li>使用 springaop 时,只要出现 Proxy 和真实对象转换异常<ul>
<li>设置为 true 使用 cglib</li>
<li>设置为 false 使用 jdk(默认值) <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy proxy-target-class&#x3D;&quot;true&quot;&gt;&lt;&#x2F;aop:aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure>




</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>spring</tag>
        <tag>aop</tag>
        <tag>面向切面编程</tag>
        <tag>Schema-based</tag>
        <tag>前置通知</tag>
        <tag>后置通知</tag>
        <tag>异常通知</tag>
        <tag>环绕通知</tag>
        <tag>jdk动态代理</tag>
        <tag>cglib动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-4</title>
    <url>/43915.html</url>
    <content><![CDATA[<h2 id="使用-Spring-简化-MyBatis（不完全）"><a href="#使用-Spring-简化-MyBatis（不完全）" class="headerlink" title="使用 Spring 简化 MyBatis（不完全）"></a>使用 Spring 简化 MyBatis（不完全）</h2><p><strong>导入 mybatis 所有jar和spring基本包,spring-jdbc,spring-tx,spring-aopspring-web,spring整合mybatis的包等</strong></p>
<a id="more"></a>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111630.png"  alt=""></p>
<p><strong>先配置 web.xml</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111631.png"  alt=""></p>
<p><strong>配置spring配置文件</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111632.png"  alt=""></p>
<ul>
<li><p>编写代码</p>
<ul>
<li><p><strong>正常编写 pojo</strong></p>
</li>
<li><p><strong>编写 mapper 包下时必须使用接口绑定方案或注解方案(必须有接口)</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111633.png"  alt=""></p>
</li>
<li><p><strong>正常编写 Service 接口和 Service 实现类</strong></p>
</li>
<li><p><strong>需要在 Service 实现类中声明 Mapper 接口对象,并生成get/set 方法</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111634.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111635.png"  alt=""></p>
</li>
<li><p><strong>spring 无法管理 Servlet,在 service 中取出 Servie 对象</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111636.png"  alt=""></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>整合mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-3</title>
    <url>/27082.html</url>
    <content><![CDATA[<h2 id="给Bean的属性赋值-注入"><a href="#给Bean的属性赋值-注入" class="headerlink" title="给Bean的属性赋值(注入)"></a>给Bean的属性赋值(注入)</h2><ul>
<li><strong>通过构造器注入</strong><ul>
<li><strong>通过使用index，name，ref，type进行条件匹配。最后用value赋值</strong><a id="more"></a>
<img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111747.png"  alt=""></li>
</ul>
</li>
<li><strong>通过set注入(set方法)</strong><ul>
<li><strong>如果属性是基本数据类型或 String 等简单类型</strong><br>   <img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111748.png"  alt=""><ul>
<li>等效于<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111749.png"  alt=""></li>
</ul>
</li>
<li><strong>如果属性是 Set&lt;?&gt;</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111750.png"  alt=""></li>
<li><strong>如果属性是 List&lt;?&gt;</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111751.png"  alt=""></li>
<li><strong>如果属性是数组</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111752.png"  alt=""></li>
<li><strong>如果属性是map</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111753.png"  alt=""></li>
<li><strong>如果属性 Properties 类型</strong></li>
</ul>
</li>
</ul>
<p><strong>当注入的值为一个时，set，list，数组类型可以简写</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111754.png"  alt=""></p>
<h2 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI(依赖注入)"></a>DI(依赖注入)</h2><p><strong>英文名称：Dependency Injection</strong></p>
<ul>
<li>DI 是什么?<ul>
<li>DI 和 IoC 是一样的</li>
<li><strong>当一个类(A)中需要依赖另一个类()对象时,把 B 赋值给 A 的过程就叫做依赖注入.</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111755.png"  alt=""></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>spring</tag>
        <tag>注入</tag>
        <tag>依赖注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-2</title>
    <url>/43275.html</url>
    <content><![CDATA[<h2 id="IoC-控制反转"><a href="#IoC-控制反转" class="headerlink" title="IoC(控制反转)"></a>IoC(控制反转)</h2><p>英文名称:(Inversion of Control)</p>
<ul>
<li>IoC 是什么?<ul>
<li><strong>IoC 完成的事情原先由程序员主动通过 new 实例化对象事情,转交给 Spring 负责.</strong></li>
<li><strong>控制反转中控制指的是:控制类的对象.</strong></li>
<li><strong>控制反转中反转指的是转交给 Spring 负责.</strong></li>
</ul>
</li>
<li><strong>IoC 最大的作用:解耦.</strong><ul>
<li><strong>程序员不需要管理对象.解除了对象管理和程序员之间的耦合.</strong><a id="more"></a>

</li>
</ul>
</li>
</ul>
<h2 id="Spring-环境搭建"><a href="#Spring-环境搭建" class="headerlink" title="Spring 环境搭建"></a>Spring 环境搭建</h2><ul>
<li><p><strong>导入 jar 四个核心包一个日志包(commons-logging)</strong><br>  <img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111933.png"  alt=""></p>
</li>
<li><p><strong>在 src 下新建 applicationContext.xml(文件名称和路径自定义)</strong><br>  <img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111934.png"  alt=""></p>
</li>
<li><p><strong>记住 Spring 容器 ApplicationContext,applicationContext.xml 配置的信息最终存储到了 AppliationContext 容器中</strong></p>
</li>
<li><p><strong>spring 配置文件是基于 schema</strong></p>
<ul>
<li><strong>schema 文件扩展名.xsd</strong></li>
<li><strong>把 schema 理解成 DTD 的升级版.比 DTD 具备更好的扩展性.</strong></li>
<li><strong>每次引入一个 xsd 文件是一个 namespace(xmlns)</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111935.png"  alt=""></li>
</ul>
</li>
<li><p><strong>配置文件中只需要引入基本 schema</strong></p>
<ul>
<li><strong>通过&lt;-bean/&gt; 创建对象.</strong></li>
<li><strong>默认配置文件被加载时创建对象.</strong></li>
</ul>
</li>
</ul>
<h2 id="Spring通过构造方法创建对象"><a href="#Spring通过构造方法创建对象" class="headerlink" title="Spring通过构造方法创建对象"></a>Spring通过构造方法创建对象</h2><ul>
<li><p><strong>无参构造创建:默认情况.</strong></p>
<ul>
<li><strong>配置文件通过&lt;-bean/&gt; 创建对象.</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111936.png"  alt=""></li>
<li><strong>getBean(“<bean>标签id值”,返回值类型);如果没有第二个参数,默认是 Object</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111937.png"  alt=""></li>
</ul>
</li>
<li><p><strong>有参构造创建:需要明确配置</strong></p>
<ul>
<li><p><strong>需要在类中提供有参构造方法</strong></p>
</li>
<li><p><strong>在 applicationContext.xml 中设置调用哪个构造方法创建对象</strong></p>
</li>
<li><p><strong>如果设定的条件匹配多个构造方法执行最后的构造方法（构造器在前面声明时，在最后面声明调用第一个）</strong></p>
</li>
<li><p><strong>index: 参数的索引,从 0 开始</strong></p>
</li>
<li><p><strong>name: 参数名</strong></p>
</li>
<li><p><strong>type:类型(区分开关键字和封装类 int 和 Integer)</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111938.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111939.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111940.png"  alt=""></p>
</li>
<li><p><strong>按条件匹配多个构造器时</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111941.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111942.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111943.png"  alt=""></p>
</li>
</ul>
</li>
</ul>
<h2 id="Spring通过实例工厂创建对象"><a href="#Spring通过实例工厂创建对象" class="headerlink" title="Spring通过实例工厂创建对象"></a>Spring通过实例工厂创建对象</h2><ul>
<li><p><strong>工厂设计模式:帮助创建类对象.一个工厂可以生产多个对象.</strong></p>
</li>
<li><p><strong>实例工厂:需要先创建工厂,才能生产对象</strong></p>
</li>
<li><p>实现步骤:</p>
<ul>
<li><p><strong>必须要有一个实例工厂</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111944.png"  alt=""></p>
</li>
<li><p><strong>在 applicationContext.xml 中配置工厂对象和需要创建的对象</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111945.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111946.png"  alt=""></p>
</li>
</ul>
</li>
</ul>
<h2 id="Spring通过实例工厂创建对象-1"><a href="#Spring通过实例工厂创建对象-1" class="headerlink" title="Spring通过实例工厂创建对象"></a>Spring通过实例工厂创建对象</h2><p><strong>不需要创建工厂,快速创建对象.</strong></p>
<ul>
<li><p>实现步骤</p>
<ul>
<li><p><strong>编写一个静态工厂(在方法上添加 static)</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111947.png"  alt=""></p>
</li>
<li><p><strong>配置文件，配置工厂对象</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111948.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111949.png"  alt=""><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405111950.png"  alt="">    </p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>spring</tag>
        <tag>控制反转</tag>
        <tag>ioc</tag>
        <tag>三种创建对象方法</tag>
        <tag>构造器创建对象</tag>
        <tag>实例工厂创建对象</tag>
        <tag>静态工厂创建对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring学习-1</title>
    <url>/43083.html</url>
    <content><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2995354372,2168828254&fm=26&gp=0.jpg"  alt=""></p>
<a id="more"></a>
<p><strong>Spring框架是由于软件开发的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。</strong></p>
<p>官网 : <a href="http://spring.io/" target="_blank" rel="noopener">http://spring.io/</a></p>
<p>官方下载地址 : <a href="https://repo.spring.io/libs-release-local/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/libs-release-local/org/springframework/spring/</a></p>
<p>官方文档：<a href="https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/</a></p>
<p>GitHub : <a href="https://github.com/spring-projects" target="_blank" rel="noopener">https://github.com/spring-projects</a></p>
<ul>
<li>主要发明者:RodJohnson<ul>
<li>轮子理论推崇者:</li>
<li>轮子理论:不用重复发明轮子.IT 行业:直接使用写好的代码.</li>
</ul>
</li>
</ul>
<p><strong>Spring 框架宗旨:不重新发明技术,让原有技术使用起来更加方便.</strong></p>
<ul>
<li><strong>Spring 几大核心功能</strong><ul>
<li><strong>IoC/DI 控制反转/依赖注入</strong></li>
<li><strong>AOP 面向切面编程</strong></li>
<li><strong>声明式事务.</strong></li>
</ul>
</li>
</ul>
<h2 id="Spring-框架-Runtime"><a href="#Spring-框架-Runtime" class="headerlink" title="Spring 框架 Runtime"></a>Spring 框架 Runtime</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405112049.png"  alt=""></p>
<ul>
<li>test:spring 提供测试功能</li>
<li><strong>CoreContainer:核心容器.Spring 启动最基本的条件.</strong><ul>
<li><strong>Beans:Spring 负责创建类对象并管理对象</strong></li>
<li><strong>Core: 核心类</strong></li>
<li><strong>Context: 上下文参数.获取外部资源或这管理注解等</strong></li>
<li><strong>SpEl:expression.jar</strong></li>
</ul>
</li>
<li><strong>AOP: 实现 aop 功能需要依赖</strong></li>
<li><strong>Aspects: 切面 AOP 依赖的包</strong></li>
<li><strong>DataAccess/Integration:spring 封装数据访问层相关内容</strong><ul>
<li><strong>JDBC:Spring 对 JDBC 封装后的代码.</strong></li>
<li><strong>ORM: 封装了持久层框架的代码.例如 Hibernate</strong></li>
<li><strong>transactions:对应 spring-tx.jar,声明式事务使用.</strong></li>
</ul>
</li>
<li><strong>WEB:需要 spring 完成 web 相关功能时需要.</strong><ul>
<li><strong>例如:由tomcat加载spring配置文件时需要有spring-web包</strong></li>
</ul>
</li>
</ul>
<h2 id="Spring-框架中重要概念"><a href="#Spring-框架中重要概念" class="headerlink" title="Spring 框架中重要概念"></a>Spring 框架中重要概念</h2><p>容器(Container):Spring 当作一个大容器.</p>
<p>BeanFactory 接口.老版本.新版本中 ApplicationContext 接口,是 BeanFactory 子接口.BeanFactory 的功能在 ApplicationContext 中都有.</p>
<p>从 Spring3 开始把 Spring 框架的功能拆分成多个 jar.Spring2 及以前就一个 jar</p>
]]></content>
      <categories>
        <category>SSM</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>概念</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习-10</title>
    <url>/57545.html</url>
    <content><![CDATA[<h2 id="MyBatis运行原理"><a href="#MyBatis运行原理" class="headerlink" title="MyBatis运行原理"></a>MyBatis运行原理</h2><p>运行过程中涉及到的类</p>
<ul>
<li><strong>ResourcesMyBatis 中 IO 流的工具类</strong><ul>
<li>加载配置文件</li>
</ul>
</li>
<li><strong>SqlSessionFactoryBuilder() 构建器</strong><ul>
<li><strong>作用:创建 SqlSessionFactory 接口的实现类</strong></li>
</ul>
</li>
<li><strong>XMLConfigBuilder MyBatis 全局配置文件内容构建器类</strong><ul>
<li><strong>作用负责读取流内容并转换为 JAVA 代码.</strong></li>
</ul>
</li>
<li>Configuration 封装了全局配置文件所有配置信息.<ul>
<li>全局配置文件内容存放在 Configuration 中</li>
</ul>
</li>
<li>DefaultSqlSessionFactory <ul>
<li>是SqlSessionFactory接口的实现类</li>
</ul>
</li>
<li>Transaction 事务类<ul>
<li>每一个 SqlSession 会带有一个 Transaction 对象.</li>
</ul>
</li>
<li>TransactionFactory 事务工厂<ul>
<li>负责生产 Transaction</li>
</ul>
</li>
<li><strong>Executor MyBatis 执行器</strong><ul>
<li><strong>作用:负责执行 SQL 命令</strong></li>
<li><strong>相当于 JDBC 中 statement 对象(或 PreparedStatement或 CallableStatement)</strong></li>
<li><strong>默认的执行器 SimpleExcutor</strong></li>
<li><strong>批量操作 BatchExcutor</strong></li>
<li><strong>通过 openSession(参数控制)</strong></li>
</ul>
</li>
<li>DefaultSqlSession 是 SqlSession 接口的实现类</li>
<li>ExceptionFactoryMyBatis 中异常工厂<a id="more"></a>

</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405112135.png"  alt=""></p>
<p><strong>在 MyBatis 运行开始时需要先通过 Resources 加载全局配置文件.下面需要实例化 SqlSessionFactoryBuilder 构建器.帮助 SqlSessionFactory 接口实现类 DefaultSqlSessionFactory.</strong></p>
<p><strong>在实例化 DefaultSqlSessionFactory 之前需要先创建 XmlConfigBuilder解析全局配置文件流,并把解析结果存放在 Configuration 中.之后把Configuratin 传递给 DefaultSqlSessionFactory.到此 SqlSessionFactory 工厂创建成功.</strong></p>
<p><strong>由 SqlSessionFactory 工厂创建 SqlSession.每次创建 SqlSession 时,都需要由 TransactionFactory 创建 Transaction对象,同时还需要创建 SqlSession 的执行器 Excutor,最后实例化DefaultSqlSession,传递给 SqlSession 接口.</strong></p>
<p><strong>根据项目需求使用 SqlSession 接口中的 API 完成具体的事务操作.如果事务执行失败,需要进行 rollback 回滚事务.如果事务执行成功提交给数据库.关闭 SqlSession</strong></p>
]]></content>
      <categories>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>运行原理</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习-9</title>
    <url>/20046.html</url>
    <content><![CDATA[<h2 id="MyBatis-注解"><a href="#MyBatis-注解" class="headerlink" title="MyBatis 注解"></a>MyBatis 注解</h2><p><strong>注解:为了简化配置文件.Mybatis 的注解简化 mapper.xml 文件.</strong></p>
<p><strong>如果涉及动态 SQL 依然使用 mapper.xml</strong></p>
<p><strong>mapper.xml 和注解可以共存.</strong></p>
<p><strong>使用注解时 mybatis.xml 中&lt;-mappers&gt;使用&lt;-package/&gt;或者&lt;-mapper class=””/&gt;</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405112234.png"  alt=""></p>
<a id="more"></a>
<p>实现查询<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405112235.png"  alt=""><br>实现新增<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405112236.png"  alt=""><br>实现修改<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405112237.png"  alt=""><br>实现删除<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405112238.png"  alt=""><br>使用注解通过AutoMapping结合别名实现多表查询<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405112239.png"  alt=""></p>
<ul>
<li>使用注解实现&lt;-resultMap&gt;功能（不推荐使用）<ul>
<li>以 N+1 举例</li>
<li>在 StudentMapper 接口添加查询<br>  <img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405112240.png"  alt=""></li>
<li>在 TeacherMapper 接口添加<ul>
<li>@Results() 相当于&lt;-resultMap&gt;</li>
<li>@Result() 相当于&lt;-id/&gt;或&lt;-result/&gt;</li>
<li>@Result(id=true) 相当与&lt;-id/&gt;</li>
<li>@Many() 相当于&lt;-collection/&gt;</li>
<li>@One() 相当于&lt;-association/&gt;<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405112241.png"  alt=""></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习-8</title>
    <url>/36495.html</url>
    <content><![CDATA[<h2 id="MyBatis多表查询"><a href="#MyBatis多表查询" class="headerlink" title="MyBatis多表查询"></a>MyBatis多表查询</h2><ul>
<li>实现多表查询方式<ul>
<li><strong>业务装配.对两个表编写单表查询语句,在业务(Service)把查询的两个结果进行关联.</strong></li>
<li><strong>使用AutoMapping特性,在实现两表联合查询时通过别名完成映射.</strong></li>
<li><strong>使用 MyBatis 的<resultMap>标签进行实现.</strong></li>
</ul>
</li>
<li><strong>多表查询时,类中包含另一个类的对象的分类</strong><ul>
<li><strong>单个对象</strong></li>
<li><strong>集合对象</strong><a id="more"></a>
<h2 id="resultMap-标签"><a href="#resultMap-标签" class="headerlink" title="resultMap 标签"></a>resultMap 标签</h2></li>
</ul>
</li>
</ul>
<p><strong>&lt;-resultMap&gt;标签写在mapper.xml中,由程序员控制SQL查询结果与实体类的映射关系.</strong></p>
<p><strong>默认 MyBatis 使用 AutoMapping 特性.</strong></p>
<p><strong>使用&lt;-resultMap&gt;标签时,&lt;-select&gt;标签不写 resultType 属性,而是使用 resultMap 属性引用&lt;-resultMap&gt;标签.</strong></p>
<h2 id="使用-resultMap-实现单表映射关系"><a href="#使用-resultMap-实现单表映射关系" class="headerlink" title="使用 resultMap 实现单表映射关系"></a>使用 resultMap 实现单表映射关系</h2><ul>
<li>数据库设计<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114218.png"  alt=""></li>
<li>实体类设计<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114219.png"  alt=""></li>
<li>TeacherMapper.xml代码<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114220.png"  alt=""></li>
</ul>
<h2 id="resultMap-实现关联单个对象-N-1-方式"><a href="#resultMap-实现关联单个对象-N-1-方式" class="headerlink" title="resultMap 实现关联单个对象(N+1 方式)"></a>resultMap 实现关联单个对象(N+1 方式)</h2><p><strong>N+1 查询方式,先查询出某个表的全部信息,根据这个表的信息查询另一个表的信息.</strong></p>
<ul>
<li><strong>&lt;-association&gt; 装配一个对象时使用</strong></li>
<li><strong>property: 对象在类中的属性名</strong></li>
<li><strong>select:通过哪个查询查询出这个对象的信息</strong></li>
<li><strong>column: 把当前表的哪个列的值做为参数传递给另一个查询</strong></li>
</ul>
<ul>
<li>与业务装配的区别:<ul>
<li><strong>在 service 里面写的代码,由 mybatis 完成装配</strong></li>
</ul>
</li>
<li>实现步骤:<ul>
<li>在 Student 实现类中包含了一个 Teacher 对象<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114221.png"  alt=""></li>
<li>在 TeacherMapper 中提供一个查询<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114222.png"  alt=""></li>
<li>在 StudentMapper 中<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114223.png"  alt=""></li>
<li><strong>大前提使用 N+1 方式.时如果列名和属性名相同可以不配置,使用 Automapping 特性.但是 mybatis 默认只会给列专配一次。也就是需要把当前表的某列数据传给另个查询的列不能省略不配值</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114224.png"  alt=""></li>
</ul>
</li>
</ul>
<h2 id="resultMap-实现关联单个对象-联合查询方式"><a href="#resultMap-实现关联单个对象-联合查询方式" class="headerlink" title="resultMap 实现关联单个对象(联合查询方式)"></a>resultMap 实现关联单个对象(联合查询方式)</h2><p>只需要编写一个 SQL,在 StudentMapper 中添加下面效果</p>
<p><strong>&lt;-association/&gt;只要专配一个对象就用这个标签</strong></p>
<p><strong>此时把&lt;-association/&gt;小的&lt;-resultMap&gt;看待</strong></p>
<p><strong>javaType 属性:&lt;-association/&gt;专配完后返回一个什么类型的对象.取值是一个类(或类的别名)</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114225.png"  alt=""></p>
<h2 id="N-1-方式和联合查询方式对比"><a href="#N-1-方式和联合查询方式对比" class="headerlink" title="N+1 方式和联合查询方式对比"></a>N+1 方式和联合查询方式对比</h2><p>N+1:需求不确定时.</p>
<p>联合查询:需求中确定查询时两个表一定都查询.</p>
<ul>
<li>N+1 名称由来<ul>
<li>举例:学生中有 3 条数据</li>
<li>需求:查询所有学生信息级授课老师信息</li>
<li>需要执行的 SQL 命令<ul>
<li>查询全部学生信息:select*from 学生</li>
<li>执行 3 遍 select*from 老师 whereid=学生的外键</li>
<li>使用多条 SQl 命令查询两表数据时,如果希望把需要的数据都查询出来,需要执行 N+1 条 SQl 才能把所有数据库查询出来.</li>
<li>缺点:效率低</li>
<li>优点:如果有的时候不需要查询学生时同时查询老师.只需要执行一个 select*fromstudent;</li>
<li>适用场景: 有的时候需要查询学生同时查询老师,有的时候只需要查询学生.</li>
</ul>
</li>
</ul>
</li>
<li>如何解决 N+1 查询带来的效率低的问题<ul>
<li>默认带的前提: 每次都是两个都查询.</li>
<li><strong>使用两表联合查询.</strong></li>
</ul>
</li>
</ul>
<h2 id="resultMap查询关联集合对象-N-1"><a href="#resultMap查询关联集合对象-N-1" class="headerlink" title="resultMap查询关联集合对象(N+1)"></a>resultMap查询关联集合对象(N+1)</h2><ul>
<li>在 Teacher 中添加 List&lt;-Student&gt;<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114226.png"  alt=""></li>
<li>在 StudentMapper.xml 中添加通过 tid 查询<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114227.png"  alt=""></li>
<li>在 TeacherMapper.xml 中添加查询全部 </li>
<li><strong>&lt;-collection/&gt; 当属性是集合类型时使用的标签.</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114228.png"  alt=""></li>
</ul>
<h2 id="resultMap实现加载集合数据-联合查询方式"><a href="#resultMap实现加载集合数据-联合查询方式" class="headerlink" title="resultMap实现加载集合数据(联合查询方式)"></a>resultMap实现加载集合数据(联合查询方式)</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114229.png"  alt=""></p>
<p><strong>mybatis 可以通过主键判断对象是否被加载过.不需要担心创建重复 Teacher</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114230.png"  alt=""><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114231.png"  alt=""></p>
<h2 id="AutoMapping-结合别名实现多表查询"><a href="#AutoMapping-结合别名实现多表查询" class="headerlink" title="AutoMapping 结合别名实现多表查询"></a>AutoMapping 结合别名实现多表查询</h2><p><strong>只能使用多表联合查询方式.</strong></p>
<p><strong>要求:查询出的列别和属性名相同</strong></p>
<p><strong>.在 SQL 是关键字符,两侧添加反单引号</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114232.png"  alt=""></p>
]]></content>
      <categories>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>实现多表查询</tag>
        <tag>resultMap</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习-7</title>
    <url>/35535.html</url>
    <content><![CDATA[<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p><strong>应用程序和数据库交互的过程是一个相对比较耗时的过程。缓存存在的意义:让应用程序减少对数据库的访问,提升程序运行效率</strong></p>
<ul>
<li><p><strong>MyBatis 中默认 SqlSession 缓存开启</strong></p>
<ul>
<li><strong>同一个 SqlSession 对象调用同一个&lt;-select&gt;时,只有第一次访问数据库,第一次之后把查询结果缓存到 SqlSession 缓存区(内存)中</strong></li>
<li><strong><em>缓存的是 statement 对象.–简单记忆。(必须是用一个&lt;-select&gt;增删改都没有数据库数据返回)</em></strong></li>
<li><strong>在 myabtis 时一个&lt;-select&gt;对应一个 statement 对象</strong></li>
<li><strong>有效范围必须是同一个 SqlSession 对象</strong></li>
</ul>
</li>
<li><p>缓存流程</p>
<ul>
<li><strong>步骤一: 先去缓存区中找是否存在 statement</strong></li>
<li><strong>步骤二:返回结果</strong></li>
<li><strong>步骤三:如果没有缓存 statement 对象,去数据库获取数据</strong></li>
<li><strong>步骤四:数据库返回查询结果</strong></li>
<li><strong>步骤五:把查询结果放到对应的缓存区中</strong><a id="more"></a>
<img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114317.png"  alt=""><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114318.png"  alt=""><h2 id="SqlSessionFactory-缓存-二级缓存"><a href="#SqlSessionFactory-缓存-二级缓存" class="headerlink" title="SqlSessionFactory 缓存(二级缓存)"></a>SqlSessionFactory 缓存(二级缓存)</h2></li>
</ul>
</li>
</ul>
<p><strong>有效范围:同一个 factory 内哪个 SqlSession 都可以获取</strong></p>
<ul>
<li>什么时候使用二级缓存:<ul>
<li><strong>当数据频繁被使用,很少被修改</strong></li>
</ul>
</li>
<li><strong>使用二级缓存步骤</strong><ul>
<li><strong>在 mapper.xml 中添加 &lt;-cache readOnly=”true”&gt;&lt;-/cache&gt;</strong></li>
<li><strong>如果不写 readOnly=”true”需要把实体类序列化</strong></li>
<li><strong>当 SqlSession 对象 close()时或 commit()时会把 SqlSession 缓存的数据刷(flush)到 SqlSessionFactory 缓存区中</strong></li>
</ul>
</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114319.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114320.png"  alt=""></p>
]]></content>
      <categories>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习-6</title>
    <url>/18958.html</url>
    <content><![CDATA[<h2 id="ThreadLocal（jdk中）"><a href="#ThreadLocal（jdk中）" class="headerlink" title="ThreadLocal（jdk中）"></a>ThreadLocal（jdk中）</h2><p><strong>线程容器,给线程绑定一个 Object 内容,后只要线程不变,可以随时取出.改变线程,无法取出内容.</strong></p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">threadLocal.set(<span class="string">"测试"</span>); <span class="keyword">new</span> Thread()&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        String result = threadLocal.get(); </span><br><span class="line">        System.out.println(<span class="string">"结果:"</span>+result); </span><br><span class="line">        &#125;; </span><br><span class="line">    &#125;.start();</span><br></pre></td></tr></table></figure>
<p>利用这一特性优化mybatis中service加载配置文件，创建session代码</p>
<p>MyUtil</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//factory实例化的过程是一个比较耗费性能的过程</span></span><br><span class="line">    <span class="comment">//保证有且只有一个factory</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;SqlSession&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = Resources.getResourceAsStream(<span class="string">"mybatis.xml"</span>);</span><br><span class="line">            factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取SqlSession的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession session = tl.get();</span><br><span class="line">        <span class="keyword">if</span> (session==<span class="keyword">null</span>)&#123;</span><br><span class="line">            tl.set(factory.openSession());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">closeSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession session = tl.get();</span><br><span class="line">        <span class="keyword">if</span> (session!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">        tl.set(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OpenSessionInView</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kylin.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最开始是有Spring框架提出的，整合Hibernate框架是使用的是OpenSessionInView</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpenSessionInView</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">/*InputStream is = Resources.getResourceAsStream("mybatis.xml");</span></span><br><span class="line"><span class="comment">        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(is);</span></span><br><span class="line"><span class="comment">        SqlSession session = factory.openSession();*/</span></span><br><span class="line">        SqlSession session = MyBatisUtil.getSession();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            session.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            session.rollback();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            MyBatisUtil.closeSession();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>InsertServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.Servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kylin.pojo.Log;</span><br><span class="line"><span class="keyword">import</span> com.kylin.service.LogService;</span><br><span class="line"><span class="keyword">import</span> com.kylin.service.impl.LogServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/insert"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  LogService logService = <span class="keyword">new</span> LogServiceImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        Log log = <span class="keyword">new</span> Log();</span><br><span class="line">        log.setAccIn(req.getParameter(<span class="string">"accin"</span>));</span><br><span class="line">        log.setAccOut(req.getParameter(<span class="string">"accout"</span>));</span><br><span class="line">        log.setMoney(Double.parseDouble(req.getParameter(<span class="string">"money"</span>)));</span><br><span class="line">        <span class="keyword">int</span> index = logService.ins(log);</span><br><span class="line">        <span class="keyword">if</span> (index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">"success.jsp"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">"/os/error.jsp"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LogServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kylin.mapper.LogMapper;</span><br><span class="line"><span class="keyword">import</span> com.kylin.pojo.Log;</span><br><span class="line"><span class="keyword">import</span> com.kylin.service.LogService;</span><br><span class="line"><span class="keyword">import</span> com.kylin.util.MyBatisUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogServiceImpl</span> <span class="keyword">implements</span> <span class="title">LogService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ins</span><span class="params">(Log log)</span> </span>&#123;</span><br><span class="line">        SqlSession session = MyBatisUtil.getSession();</span><br><span class="line">        LogMapper mapper = session.getMapper(LogMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.ins(log);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体过程和代码意义：<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114420.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114421.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114422.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114423.png"  alt=""></p>
]]></content>
      <categories>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>threadlocal</tag>
        <tag>opensessioninview</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习-5</title>
    <url>/19278.html</url>
    <content><![CDATA[<h2 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h2><p><strong>根据不同的条件需要执行不同的 SQL 命令.称为动态 SQL</strong></p>
<p><strong>MyBatis 中动态 SQL 在 mapper.xml 中添加逻辑判断等.</strong></p>
<p><strong>OGNL 表达式,直接写 key 或对象的属性，不需要添加任何特殊符号。只能获取kye或对象的属性</strong></p>
<a id="more"></a>
<h2 id="If标签使用"><a href="#If标签使用" class="headerlink" title="If标签使用"></a>If标签使用</h2><p><strong>判断是否满足条件，在动态 SQL 中所做的最通用的事情是包含部分 where 字句的条件。注意：在where子句后面如果直接使用if，会造成where and···语法错误，若where后面没有条件，则需要添加一个正确的等式（例如1=1）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selByAccinAccout"</span> <span class="attr">resultType</span>=<span class="string">"log"</span>&gt;</span> </span><br><span class="line">    select * from log where 1=1</span><br><span class="line">    <span class="comment">&lt;!-- OGNL 表达式,直接写 key 或对象的属性.不需要添加任 何特字符号 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"accin!=null and accin!=''"</span>&gt;</span> </span><br><span class="line">        and accin=#&#123;accin&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"accout!=null and accout!=''"</span>&gt;</span> </span><br><span class="line">        and accout=#&#123;accout&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="where标签使用"><a href="#where标签使用" class="headerlink" title="where标签使用"></a>where标签使用</h2><p><strong>当编写 where 标签时,如果内容中第一个是 and 去掉第一个and。配合if使用,比直接使用&lt;-if&gt;少写 where1=1</strong></p>
<p><strong>如果&lt;-where&gt;中有内容会生成 where 关键字,如果没有内容不生成 where 关键</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selByAccinAccout"</span> <span class="attr">resultType</span>=<span class="string">"log"</span>&gt;</span> </span><br><span class="line">    select * from log </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"accin!=null and accin!=''"</span>&gt;</span> </span><br><span class="line">        and accin=#&#123;accin&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"accout!=null and accout!=''"</span>&gt;</span> </span><br><span class="line">        and accout=#&#123;accout&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span> <span class="tag">&lt;</span></span><br><span class="line"><span class="tag">    /<span class="attr">where</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="choose-when-otherwise使用"><a href="#choose-when-otherwise使用" class="headerlink" title="choose, when, otherwise使用"></a>choose, when, otherwise使用</h2><p><strong>有时我们不想应用所有的条件, 相反我们想选择很多情况下的一种。 Java 中的 switch 和语句相似,MyBatis 提供 choose 元素。</strong></p>
<p><strong>我们来搜索当 title 提供时仅有 title 条件,当 author 提供时仅有 author 条件。如果二者都没提供,只返回 featured blogs(也许是由管理员策略地选择的结果列表,而不是返回大量没有意义的随机博客结果列表)。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">parameterType</span>=<span class="string">"Blog"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="set标签使用"><a href="#set标签使用" class="headerlink" title="set标签使用"></a>set标签使用</h2><p><strong>作用:去掉最后一个逗号。如果&lt;-set&gt;里面有内容生成 set 关键字,没有就不生成</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;update id&#x3D;&quot;upd&quot; parameterType&#x3D;&quot;log&quot; &gt; </span><br><span class="line">    update log &lt;set&gt; id&#x3D;#&#123;id&#125;, </span><br><span class="line">    &lt;if test&#x3D;&quot;accIn!&#x3D;null and accIn!&#x3D;&#39;&#39;&quot;&gt; </span><br><span class="line">    accin&#x3D;#&#123;accIn&#125;, </span><br><span class="line">    &lt;&#x2F;if&gt; </span><br><span class="line">    &lt;if test&#x3D;&quot;accOut!&#x3D;null and accOut!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">    accout&#x3D;#&#123;accOut&#125;, </span><br><span class="line">    &lt;&#x2F;if&gt; &lt;&#x2F;set&gt; </span><br><span class="line">    where id&#x3D;#&#123;id&#125; </span><br><span class="line">&lt;&#x2F;update</span><br></pre></td></tr></table></figure>
<p><strong>id=#{id} 目的防止<set>中没有内容,mybatis 不生成 set 关键字,如果修改中没有 set 从句 SQL 语法错误.</strong></p>
<h2 id="trim标签使用"><a href="#trim标签使用" class="headerlink" title="trim标签使用"></a>trim标签使用</h2><p><strong>prefix 在前面添加内容</strong></p>
<p><strong>prefixOverrides 去掉前面内容</strong></p>
<p><strong>suffix 在后面添加内容</strong></p>
<p><strong>suffixOverrieds 去掉后面内容</strong></p>
<p><strong>执行顺序:去掉内容后添加内容</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"upd"</span> <span class="attr">parameterType</span>=<span class="string">"log"</span>&gt;</span> </span><br><span class="line">    update log </span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span> a=a, </span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span> </span><br><span class="line">    where id=100 </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="bind标签使用"><a href="#bind标签使用" class="headerlink" title="bind标签使用"></a>bind标签使用</h2><p><strong>作用:给参数重新赋值</strong></p>
<p><strong>使用场景:模糊查询。原内容前或后添加内容</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selByLog"</span> <span class="attr">parameterType</span>=<span class="string">"log"</span> <span class="attr">resultType</span>=<span class="string">"log"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"accin"</span> <span class="attr">value</span>=<span class="string">"'%'+accin+'%'"</span>/&gt;</span> </span><br><span class="line">    select * from log where accin like #&#123;accin&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h2><p><strong>循环参数内容,还具备在内容的前后添加内容,还具备添加分隔符功能.</strong></p>
<p><strong>适用场景:in 查询中。批量新增中(mybatis 中 foreach 效率比较低)</strong></p>
<p>如果希望批量新增,SQL 命令</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">insertintologVALUES</span><br><span class="line">(default,1,2,3),(default,2,3,4),(default,3,4,5)</span><br></pre></td></tr></table></figure>
<p><strong>openSession()必须指定</strong></p>
<ul>
<li><strong>底层 JDBC 的 PreparedStatement.addBatch(); factory.openSession(ExecutorType.BATCH);</strong></li>
</ul>
<p><strong>collectino=”” 要遍历的集合</strong></p>
<p><strong>item 迭代变量,#{迭代变量名}获取内容</strong></p>
<p><strong>open 循环后左侧添加的内容</strong></p>
<p><strong>close 循环后右侧添加的内容</strong></p>
<p><strong>separator 每次循环时,元素之间的分隔符</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selIn"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"log"</span>&gt;</span> </span><br><span class="line">    select * from log where id in </span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"abc"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span> </span><br><span class="line">        #&#123;abc&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="sql和include标签使用"><a href="#sql和include标签使用" class="headerlink" title="sql和include标签使用"></a>sql和include标签使用</h2><p><strong>某些 SQL 片段如果希望复用,可以使用&lt;-sql&gt;定义这个片段</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span> </span><br><span class="line">    id,accin,accout,money </span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>在&lt;-select&gt;或&lt;-delete&gt;或&lt;-update&gt;或&lt;-insert&gt;中使用&lt;-include&gt;引用</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span> </span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"mysql"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> </span><br><span class="line">    from log</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>动态sql</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习-4</title>
    <url>/35727.html</url>
    <content><![CDATA[<h2 id="MyBatis-接口绑定"><a href="#MyBatis-接口绑定" class="headerlink" title="MyBatis 接口绑定"></a>MyBatis 接口绑定</h2><p><strong>作用:实现创建一个接口后，把mapper.xml变成由mybatis生成接口的实现类,通过调用接口对象就可以获取 mapper.xml中编写的 sql.</strong></p>
<p>后面 mybatis 和 spring 整合时使用的是这个方案.</p>
<ul>
<li><p>实现步骤:</p>
<ul>
<li><strong>创建一个接口</strong></li>
<li><strong>接口包名和接口名与 mapper.xml 中&lt;- mapper&gt;namespace相同</strong></li>
<li><strong>接口中方法名和 mapper.xml 标签的 id 属性要报持相同</strong></li>
<li><strong>在 mybatis.xml 中使用&lt;-package&gt;进行扫描接口和 mapper.xml</strong><a id="more"></a></li>
</ul>
</li>
<li><p>代码实现步骤:</p>
<ul>
<li><p>在 mybatis.xml 中&lt;-mappers&gt;下使用&lt;-package&gt;<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114552.png"  alt=""></p>
</li>
<li><p><strong>创建一个接口,接口包名和接口名与 mapper.xml 中<mapper>namespace相同。接口中方法名和 mapper.xml 标签的 id 属性相同</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114553.png"  alt=""></p>
</li>
<li><p><strong>创建xml文件，获取参数，编写sql namespace 必须和接口全限定路径(包名+类名)一致。id值必须和接口中方法名相同，使用接口绑定可以省略parameterType</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114554.png"  alt=""></p>
</li>
<li><p><strong>通过session.getMapper(接口类对象);创建了一个实现接口类，并将它实例化,之后调用相应的方法</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114555.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114556.png"  alt=""></p>
</li>
</ul>
</li>
<li><p><strong>多参数实现方法–#{角标}</strong></p>
<ul>
<li><p><strong>前面步骤一样，创建接口，创建方法，mybatis配置文件中使用&lt;-package&gt;进行扫描接口和xml文件</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114557.png"  alt=""></p>
</li>
<li><p><strong>namespace 必须和接口全限定路径(包名+类名)一致。id值必须和接口中方法名相同</strong></p>
</li>
<li><p><strong>使用#{角标}获取参数，从零开始，0代表第一个参数，以此类推</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114558.png"  alt=""></p>
<ul>
<li><strong>通过session.getMapper(接口类对象);创建了一个实现接口类，并将它实例化,之后调用相应的方法</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114559.png"  alt=""></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114600.png"  alt=""></p>
</li>
</ul>
</li>
<li><p><strong>多参数实现方法–注解</strong></p>
<ul>
<li><p><strong>前面步骤一样，创建接口，创建方法，mybatis配置文件中使用&lt;-package&gt;进行扫描接口和xml文件</strong></p>
</li>
<li><p><strong>通过@Param注解获取参数， mybatis 把参数转换为 map 了,其中@Param(“key”)参数内容就是 map 的 value，使用动态sql时可以使用此方法</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114601.png"  alt=""></p>
<ul>
<li><strong>通过注解把参数转换成了map对象，获取参数就变成了通过#{键}来获取参数内容</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114602.png"  alt=""></li>
<li><strong>通过session.getMapper(接口类对象);创建了一个实现接口类，并将它实例化,之后调用相应的方法</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114603.png"  alt=""></li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405114604.png"  alt=""></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>接口绑定</tag>
        <tag>重点</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习-3</title>
    <url>/18894.html</url>
    <content><![CDATA[<h2 id="MyBatis事务操作"><a href="#MyBatis事务操作" class="headerlink" title="MyBatis事务操作"></a>MyBatis事务操作</h2><p><strong>功能:从应用程序角度出发,软件具有哪些功能.</strong></p>
<p><strong>业务:完成功能时的逻辑.对应 Service 中一个方法</strong></p>
<p><strong>事务:从数据库角度出发,完成业务时需要执行的 SQL 集合,统称一个事务.</strong></p>
<p><strong>事务回滚.如果在一个事务中某个 SQL 执行事务,希望回归到事务的原点,保证数据库数据的完整性.</strong></p>
<p><strong>在mybatis中默认是关闭了 JDBC 的自动提交功能。每一个 SqlSession 默认都是不自动提交事务.于是利用mybatis进行增删改操作时应该手都动交事务–session.commit()，操作失败发生异常应该回滚事务–seesion.rollback()</strong></p>
<a id="more"></a>
<p><strong>openSession(true);自动提交.setAutoCommit(true);</strong></p>
<ul>
<li><strong>mybatis底层是对JDBC的封装.</strong><ul>
<li><strong>JDBC 中 executeUpdate()执行新增,删除,修改的 SQL.返回值 int,表示受影响的行数.</strong></li>
<li><strong>mybatis中&lt;-insert&gt;&lt;-delete&gt;&lt;-update&gt;标签没有 resultType 属性,默认认为返回值都是 int</strong></li>
<li><strong>在 openSession()时 Mybatis 会创建 SqlSession 时同时创建一个Transaction(事务对象),同时 autoCommit 都为 false</strong></li>
</ul>
</li>
</ul>
<h2 id="MyBatis-实现新增"><a href="#MyBatis-实现新增" class="headerlink" title="MyBatis 实现新增"></a>MyBatis 实现新增</h2><p><strong>在 mapper.xml 中使用&lt;-insert&gt;标签,标签没有返回值类型</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115032.png"  alt=""><br><strong>通过 session.insert()调用新增方法 返回值为int类型</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115033.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115034.png"  alt=""></p>
<h2 id="MyBatis-实现修改"><a href="#MyBatis-实现修改" class="headerlink" title="MyBatis 实现修改"></a>MyBatis 实现修改</h2><p><strong>在 mapper.xml 中提供&lt;-update&gt;标签标签没有返回值类型</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115035.png"  alt=""><br><strong>通过 session.update()调用更新方法 返回值为int类型</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115036.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115037.png"  alt=""></p>
<h2 id="MyBatis-实现删除"><a href="#MyBatis-实现删除" class="headerlink" title="MyBatis 实现删除"></a>MyBatis 实现删除</h2><p><strong>在 mapper.xml 中提供&lt;-delete&gt;标签标签没有返回值类型</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115038.png"  alt=""><br><strong>通过 session.delete()调用更新方法 返回值为int类型</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115039.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115040.png"  alt=""></p>
]]></content>
      <categories>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>事务</tag>
        <tag>新增</tag>
        <tag>修改</tag>
        <tag>删除</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习-2</title>
    <url>/35087.html</url>
    <content><![CDATA[<h2 id="三种查询方式"><a href="#三种查询方式" class="headerlink" title="三种查询方式"></a>三种查询方式</h2><ul>
<li><strong>.selectList() 返回值为 List&lt;resultType 属性控制&gt; 适用于查询结果都需要遍历的需求</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115203.png"  alt=""> </li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115204.png"  alt=""> </p>
<ul>
<li><strong>.selectOne() 返回值 Object,适用于返回结果只是变量或一行数据时</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115205.png"  alt=""> </li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115206.png"  alt=""> </p>
<ul>
<li><strong>.selectMap() 返回值 Map 适用于需要在查询结果中通过某列的值取到这行数据的需求. Map&lt;key,resultType 控制&gt;</strong><a id="more"></a>
<img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115207.png"  alt=""> </li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115208.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115209.png"  alt=""></p>
<h2 id="settings标签"><a href="#settings标签" class="headerlink" title="settings标签"></a>settings标签</h2><ul>
<li>在mybatis全局配置文件中通过settings标签控制 mybatis 全局开关</li>
<li><strong>在mybatis.xml（mybatis配置文件)中开启log4j</strong><ul>
<li><strong>必须保证有 log4j.jar</strong></li>
<li><strong>在 src 下有 log4j.properties</strong><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>注意再mybais.xml中的标签顺序</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115210.png"  alt=""></p>
<h2 id="parameterType-属性"><a href="#parameterType-属性" class="headerlink" title="parameterType 属性"></a>parameterType 属性</h2><p><strong>在XXXMapper.xml中&lt;-select&gt;&lt;-delete&gt;等标签的 parameterType 可以控制传入的参数类型</strong></p>
<p><strong>SqlSession 的 selectList()和 selectOne()的第二个参数和 selectMap()的第三个参数都表示方法的参数.</strong></p>
<ul>
<li><strong>在 Mapper.xml 中可以通过#{}获取参数，只能获取单个参数</strong><ul>
<li><strong>多个参数（基本数据类型或 String，只有使用接口绑定时才能获取到多个参数，否则只能用对象或者map来获取多个参数）</strong><ul>
<li><strong>parameterType 控制参数类型</strong></li>
<li><strong>#{}获取参数内容</strong></li>
<li><strong>使用索引,从 0 开始 #{0}表示第一个参数</strong></li>
<li>也可以使用#{param1}第一个参数</li>
<li><strong>如果只有一个参数(基本数据类型或 String),mybatis对#{}里面内容没有要求只要写内容即可.</strong></li>
</ul>
</li>
<li>参数是对象<ul>
<li><strong>#{属性名}</strong></li>
</ul>
</li>
<li>参数是 map <ul>
<li><strong>写成#{key}</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115211.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115212.png"  alt=""></p>
<ul>
<li><strong>#{} 和 ${} 的区别</strong><ul>
<li><strong>#{} 获取参数的内容支持 索引获取,param1获取指定位置参数,并且 SQL 使用?占位符</strong></li>
<li><strong>${} 字符串拼接不使用?,默认找${内容}内容的 get/set 方法,如果写数字,就是一个数字</strong></li>
</ul>
</li>
</ul>
<p><strong>如果在 xml 文件中出现 “&lt;”,“&gt;”,双引号 等特殊字符时可以使用XML 文件转义标签(XML 自身的) &lt;-![CDATA[ 内容 ]]&gt;</strong></p>
<h2 id="typeAliases-别名"><a href="#typeAliases-别名" class="headerlink" title="typeAliases 别名"></a>typeAliases 别名</h2><ul>
<li>给某个类起别名<ul>
<li><strong>在typeAliasese标签下创建一个typeAlias标签，type属性为类名的全限定路径，alias属性值为别名名</strong><br>mybatis.xml配置<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115213.png"  alt=""><br>mapper.xml引用<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115214.png"  alt=""></li>
</ul>
</li>
<li><strong>直接给某个包下所有类起别名,别名为类名,不区分大小写</strong><ul>
<li><strong>在typeAliasese标签下创建一个package标签，name属性值为包名</strong><br>mybatis.xml配置<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115215.png"  alt=""><br>mapper.xml中通过类名引用<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115216.png"  alt=""></li>
</ul>
</li>
</ul>
<h2 id="mybatis中实现mysql分页写法"><a href="#mybatis中实现mysql分页写法" class="headerlink" title="mybatis中实现mysql分页写法"></a>mybatis中实现mysql分页写法</h2><p><strong>由于mybatis底层参数的传递和获取通过占位符?实现，而？不允许在关键字前后进行数学运算，需要在代码中计算完成后传递到 mapper.xml中</strong></p>
<p><strong>在java代码中计算（如果希望传递多个参数,可以使用对象或 map）</strong></p>
<p><strong>通过声明一个变量名为pageStart的变量接收  pageSize*(pageNumber-1)的值</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115217.png"  alt=""><br>在 mapper.xml 中代码<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115218.png"  alt=""></p>
]]></content>
      <categories>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>三种查询方式</tag>
        <tag>selectList()</tag>
        <tag>selectOne()</tag>
        <tag>selectMap()</tag>
        <tag>settings标签</tag>
        <tag>parameterType</tag>
        <tag>typeAliases</tag>
        <tag>别名</tag>
        <tag>分页查询</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习-1</title>
    <url>/34895.html</url>
    <content><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115407.png"  alt=""></p>
<h2 id="MyBatis-简介"><a href="#MyBatis-简介" class="headerlink" title="MyBatis 简介"></a>MyBatis 简介</h2><p>MyBatis 本是apache的一个开源项目<strong>iBatis</strong>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为<strong>MyBatis</strong> 。2013年11月迁移到Github。</p>
<p>iBATIS一词来源于“internet”和“abatis”的组合，是一个<strong>基于Java的持久层框架</strong>。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）</p>
<p><strong>作用: 数据访问层框架. 底层是对 JDBC 的封装.</strong></p>
<p><strong>优点之一:使用mybatis时不需要编写实现类,只需要写需要执行的sql命令</strong></p>
<a id="more"></a>

<h2 id="MyBatis环境搭建和使用"><a href="#MyBatis环境搭建和使用" class="headerlink" title="MyBatis环境搭建和使用"></a>MyBatis环境搭建和使用</h2><p><strong>1.导入 jar</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115317.png"  alt=""></p>
<p><strong>2.在src下新建全局配置文件</strong></p>
<ul>
<li><strong>没有名称和地址要求</strong></li>
<li><strong>在全局配置文件中引入 DTD 或 schema</strong></li>
<li><strong>如果导入dtd后没有提示，可以采用使用本地dtd</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115318.png"  alt=""><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--default引用的environment的id，当前所使用的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--使用原生JDBC事务--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssm"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"kylin"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/kylin/mapper/FlowerMapper.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注意environments标签中的default属性值可以随便取，但是下方的environment标签中的id属性值则必须于default属性值保持一致。通过mappers标签中的maper标签并设置resource属性的值为要执行的sql操作的xml的文件路径从而连接数据库进行操作</strong></p>
<p><strong>3.新建以 mapper 结尾的包,在包下新建:实体类名+Mapper.xml</strong></p>
<ul>
<li><strong>文件作用:编写需要执行的 SQL 命令</strong></li>
<li><strong>把 xml 文件理解成实现类</strong><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace:理解成实现类的全路径（包名+类名）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"a.b"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id:方法名</span></span><br><span class="line"><span class="comment">        parameterType:定义参数类型</span></span><br><span class="line"><span class="comment">        resultType:返回值类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        如果方法返回值是list，在resultType中写List的泛型，因为mybatis对jdbc封装，一行一行读取数据</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selAll"</span> <span class="attr">resultType</span>=<span class="string">"com.kylin.pojo.Flower"</span>&gt;</span></span><br><span class="line">        select * from flower</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selById"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        select count(*) from flower</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">resultType</span>=<span class="string">"com.kylin.pojo.Flower"</span>&gt;</span></span><br><span class="line">        select * from flower</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong><a href="namespace:理解成实现类的全路径（包名+类名）">namespace:理解成实现类的全路径（包名+类名）</a></strong><br><strong><a href="id:方法名">id:方法名</a></strong><br><strong><a href="parameterType:定义参数类型">parameterType:定义参数类型</a></strong><br><strong><a href="resultType:返回值类型">resultType:返回值类型</a>:如果方法返回值是list，在resultType中写List的泛型，因为mybatis对jdbc封装，一行一行读取数据</strong><br><strong>注意：namespace属性值可以随便取，但是调用实现的时候，使用的路径就是namespac+id，并且不要忘记这mybaits的配置文件中对此xml文件进行绑定</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115319.png"  alt=""></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115320.png"  alt=""><br><strong>4.测试结果(只有在单独使用 mybatis 时使用,最后 ssm 整合时下面代码不需要编写.)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream is = Resources.getResourceAsStream(<span class="string">"myabtis.xml"</span>);</span><br><span class="line"><span class="comment">//使用工厂设计模式 </span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"><span class="comment">//生产 </span></span><br><span class="line">SqlSession SqlSession session=factory.openSession();</span><br><span class="line">List&lt;Flower&gt; list = session.selectList(<span class="string">"a.b.selAll"</span>); </span><br><span class="line"><span class="keyword">for</span> (Flower flower : list) &#123;</span><br><span class="line">     System.out.println(flower.toString()); </span><br><span class="line">&#125;</span><br><span class="line">session.close();</span><br></pre></td></tr></table></figure>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115321.png"  alt=""></p>
<h2 id="环境搭建详解"><a href="#环境搭建详解" class="headerlink" title="环境搭建详解"></a>环境搭建详解</h2><ul>
<li><transactionManager/>type 属性可取值<ul>
<li><strong>JDBC,事务管理使用 JDBC 原生事务管理方式</strong></li>
<li><strong>MANAGED 把事务管理转交给其他容器.原生 JDBC 事务setAutoMapping(false);</strong></li>
</ul>
</li>
<li><dataSouce/>type 属性<ul>
<li><strong>POOLED 使用数据库连接池</strong></li>
<li>UNPOOLED 不实用数据库连接池,和直接使用 JDBC 一样</li>
<li>JNDI:java 命名目录接口技</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>SSM</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>环境代建</tag>
        <tag>基本使用</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC开发模式和命名规范</title>
    <url>/4762.html</url>
    <content><![CDATA[<h2 id="MVC开发模式"><a href="#MVC开发模式" class="headerlink" title="MVC开发模式"></a>MVC开发模式</h2><p><strong>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。</strong></p>
<ul>
<li><strong>M:Model 模型,实体类和业务和 dao</strong></li>
<li><strong>V:view 视图,JSP</strong></li>
<li><strong>C:Controller 控制器,servlet</strong></li>
<li><strong>作用:视图和逻辑分离</strong></li>
</ul>
<p><strong>MVC 适用场景:大型项目开发.</strong></p>
<a id="more"></a>
<ul>
<li>开发步骤<ul>
<li><strong>设计数据库</strong></li>
<li><strong>实体类</strong></li>
<li><strong>持久层（dao）</strong></li>
<li><strong>业务逻辑</strong></li>
<li><strong>控制器</strong></li>
<li>**视图<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115457.png"  alt=""></li>
</ul>
</li>
</ul>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p><strong>1.项目名:没有要求,不起中文</strong></p>
<p><strong>2.包:公司域名倒写 com.bjsxt</strong></p>
<p><strong>3.数据访问层:dao,persist,mapper</strong></p>
<p><strong>4.实体:entity,model,bean,javabean,pojo</strong></p>
<p><strong>5.业务逻辑:service,biz</strong></p>
<p><strong>6.控制器:controller,servlet,action,web</strong></p>
<p><strong>7.过滤器:filter</strong></p>
<p><strong>8.异常:exception</strong></p>
<p><strong>9.监听器:listener</strong></p>
<p><strong>10.注释:类上和方法上使用文档注释  在方法里面使用多行注释或者单行注释</strong></p>
<p><strong>11.类: 大驼峰（每个首字母大写）</strong></p>
<p><strong>12.方法,属性:小驼峰（首个首字母不大写，后面的首字母大写）</strong></p>
]]></content>
      <tags>
        <tag>mvc开发模式</tag>
        <tag>命名规范</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet的过滤器和监听器</title>
    <url>/8602.html</url>
    <content><![CDATA[<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p><strong>问题：Servlet 的作用是针对浏览器发起的请求，进行请求的 处理。通过 Servlet 技术我们可以灵活的进行请求的处理，但是我们不但要对请求记性处理，我们还需对服务器的资源进行统一的管理 ，比如请求编码格式的统一设置，资源的统一分配等等，这个时候该怎么办呢？</strong></p>
<p><strong>解决：使用过滤器。</strong></p>
<p><strong>作用：对服务器资源进行管理 保护 servlet</strong></p>
<a id="more"></a>
<h2 id="过滤器的使用"><a href="#过滤器的使用" class="headerlink" title="过滤器的使用"></a>过滤器的使用</h2><ul>
<li><p><strong>创建一个实现了Filter接口的普通java类</strong></p>
</li>
<li><p><strong>覆写接口的方法</strong></p>
<ul>
<li><strong>init方法:服务器启动即执行。资源初始化</strong></li>
<li><strong>doFilter方法:拦截请求的方法，在此方法中可以对资源实现管理。</strong></li>
<li><strong>destory方法：服务器关闭执行。</strong></li>
<li><strong>注意：需要手动对请求进行放行。chain.doFilter(request, response);</strong></li>
</ul>
</li>
<li><p><strong>在web.xml中配置过滤器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.bjsxt.filter.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意:</p>
<ul>
<li><strong>url-pattern:/* 表示拦截所有的请求。</strong></li>
<li><strong>url-pattern:*.do表示所有以.do结尾的请求。一般是用来进行模块拦截处理。</strong></li>
<li><strong>url-pattern:/ts 表示拦截指定url的请求。针对某个servlet的请求进行拦截，保护servlet。</strong></li>
</ul>
</li>
<li><p><strong>过滤器的生命周期：服务器启动到服务器关闭。</strong></p>
</li>
<li><p>执行:</p>
<ul>
<li><strong>浏览器发起请求到服务器，服务器接收到请求后，根据URI信息在web.xml中找到对应的过滤器执行doFilter方法，该方法对此次请求进行处理后如果符合要求则放行，放行后如果还有符合要求的过滤则继续进行过滤，找到执行对应的servlet进行请求处理。servlet对请求处理完毕后，也就service方法结束了。还需继续返回相应的doFilter方法继续执行。</strong></li>
</ul>
</li>
<li><p>案例：</p>
<ul>
<li><strong>统一编码格式设置。</strong></li>
<li><strong>session管理</strong></li>
<li><strong>权限管理</strong></li>
<li><strong>资源管理（统一水印，和谐词汇等等）</strong></li>
</ul>
</li>
<li><p><strong>总结:过滤器程序员声明和配置，服务器根据请求中的uri信息调用。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我被destroy"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"MyFilter.doFilter(我被执行了)"</span>);</span><br><span class="line">		<span class="comment">//设置编码格式</span></span><br><span class="line">		request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">		response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">		<span class="comment">//判断session</span></span><br><span class="line">			HttpSession hs=((HttpServletRequest) request).getSession();</span><br><span class="line">			<span class="keyword">if</span>(hs.getAttribute(<span class="string">"user"</span>)==<span class="keyword">null</span>)&#123;</span><br><span class="line">				((HttpServletResponse)response).sendRedirect(<span class="string">"/a/login.jsp"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="comment">//放行</span></span><br><span class="line">				chain.doFilter(request, response);</span><br><span class="line">			&#125;</span><br><span class="line">		System.out.println(<span class="string">"MyFilter.doFilter(我被执行了2)"</span>);</span><br><span class="line">	&#125;<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我被init"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2></li>
</ul>
<p><strong>问题：在 Servlet技术中我们学习了request、session，application作用域对象，其主要作用是实现数据的在不同场景中的灵活流转。但是数据的具体流转过程我们是看不到的，比如作用域对象是什么时候创建和销毁的，数据是什么时候存取，改变和删除的。因为具体的流转过程看不到，所以也就无法再指定的时机对数据和对象进行操作，比如 session 销毁的时候，在线人数-1。</strong></p>
<p><strong>解决：使用监听器</strong></p>
<p><strong>概念：Servlet 监听器是 Servlet 规范中定义的一种特殊类，用 于监听 ServletContext、HttpSession 和 ServletRequest 等域对象的创建与销毁事件，以及监听这些域对象中属性发生修改的事件。</strong></p>
<h2 id="监听器的使用"><a href="#监听器的使用" class="headerlink" title="监听器的使用"></a>监听器的使用</h2><ul>
<li><strong>使用:创建一个实现了指定接口的java类</strong></li>
<li><strong>监听request—&gt;ServletRequestListener  监听request对象的创建和销毁</strong><ul>
<li>requestInitialized(ServletRequestEvent sre)//创建</li>
<li>requestDestroyed(ServletRequestEvent sre)//销毁</li>
<li><strong>注意:形参可以获取监听的request对象 sre.getServletRequest();</strong></li>
</ul>
</li>
<li><strong>监听request—&gt;ServletRequestAttributeListener  监听request作用域数据的变更。</strong><ul>
<li>attributeAdded(ServletRequestAttributeEvent srae)</li>
<li>attributeRemoved(ServletRequestAttributeEvent srae)    </li>
<li>attributeReplaced(ServletRequestAttributeEvent srae)</li>
<li>注意：形参可以获取被监听的数据    <ul>
<li><strong>srae.getName()  获取监听数据的键</strong></li>
<li><strong>srae.getValue() 获取监听数据的值</strong></li>
</ul>
</li>
</ul>
</li>
<li><strong>监听session—&gt;HttpSessionListener 监听session的创建和销毁</strong><ul>
<li>sessionCreated(HttpSessionEvent se)  创建</li>
<li>sessionDestroyed(HttpSessionEvent se) 销毁</li>
<li><strong>注意：形参可以获取被监听的session对象 se.getSession();</strong></li>
</ul>
</li>
<li><strong>监听session—&gt;HttpSessionAttributeListener 监听session数据的变更</strong><ul>
<li>attributeAdded(HttpSessionBindingEvent event)</li>
<li>attributeRemoved(HttpSessionBindingEvent event)</li>
<li>attributeReplaced(HttpSessionBindingEvent event)</li>
<li><strong>注意:形参可以获取被监听的数据</strong><ul>
<li><strong>event.getName()     获取数据的键名</strong></li>
<li><strong>event.getValue()    获取数据的值</strong></li>
</ul>
</li>
</ul>
</li>
<li><strong>监听application—&gt;ServletContextListener 监听application对象的初始化和销毁</strong><ul>
<li><strong>contextInitialized(ServletContextEvent sce) 初始化    服务器启动</strong></li>
<li><strong>contextDestroyed(ServletContextEvent sce)    销毁         服务器关闭</strong></li>
<li><strong>注意：形参可以获取当前application对象。sce.getServletContext();</strong></li>
</ul>
</li>
<li><strong>监听application—&gt;ServletContextAttributeListener 监听数据的变更</strong><ul>
<li>attributeAdded(ServletContextAttributeEvent event)</li>
<li>attributeRemoved(ServletContextAttributeEvent event)</li>
<li>attributeReplaced(ServletContextAttributeEvent event)</li>
<li><strong>注意：形参可以获取当前监听的数据</strong><ul>
<li><strong>event.getName()  获取数据的键名</strong></li>
<li><strong>event.getValue() 获取数据的值</strong></li>
</ul>
</li>
</ul>
</li>
<li>总结<ul>
<li><strong>实现接口名为（Servlet+作用域对象+Listener）的方法都是对此作用域对象的创建和销毁的监听。形参可以获取到当前的作用域对象</strong></li>
<li><strong>实现接口名为（Servlet+作用域对象+AttributeListener）的方法都是此作用域数据的增加，移除，替换的监听。形参可以通过getName()和getValue()分别获取到数据的键名和值</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextAttributeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextAttributeListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestAttributeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestAttributeListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionAttributeListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionBindingEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span>,<span class="title">ServletRequestAttributeListener</span>,<span class="title">HttpSessionListener</span>,<span class="title">HttpSessionAttributeListener</span>,<span class="title">ServletContextListener</span>,<span class="title">ServletContextAttributeListener</span></span>&#123;</span><br><span class="line">	<span class="comment">//request对象销毁</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我被销毁了"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//request对象创建</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我被创建了"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//监听request作用域数据的添加</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletRequestAttributeEvent srae)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"request中增加了一条数据-"</span>+srae.getName()+<span class="string">":"</span>+srae.getValue());</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletRequestAttributeEvent srae)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletRequestAttributeEvent srae)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">/*------------------------------------------------------------------------------*/</span></span><br><span class="line">	<span class="comment">//监听session的创建</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"session被创建了"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//监听session的销毁</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"session被销毁了"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//监听session数据的表更</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(HttpSessionBindingEvent event)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"session中增加了一条数据"</span>+event.getName()+<span class="string">":"</span>+event.getValue());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(HttpSessionBindingEvent event)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(HttpSessionBindingEvent event)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">/*------------------------------------------------------------------------------*/</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"application对象被初始化了"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"application对象被销毁了"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//监听application的数据变更</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletContextAttributeEvent event)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"application中存储了数据:"</span>+event.getName()+<span class="string">":"</span>+event.getValue());</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletContextAttributeEvent event)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletContextAttributeEvent event)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>servlet</tag>
        <tag>过滤器</tag>
        <tag>监听器</tag>
      </tags>
  </entry>
  <entry>
    <title>Jstl标签库</title>
    <url>/2172.html</url>
    <content><![CDATA[<h2 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h2><p><strong>什么是JSTL标签库 JSTL是apache对EL表达式的扩展（也就是说JSTL依赖EL）， JSTL是标签语言！JSTL标签使用以来非常方便，它与JSP动作 标签一样，只不过它不是JSP内置的标签，需要我们自己导包，以 及指定标签库而已！</strong></p>
<p><strong>如果你使用MyEclipse开发JavaWeb，那么在把项目发布 到Tomcat时，你会发现，MyEclipse会在lib目录下存放jstl的 Jar包！如果你没有使用MyEclipse开发那么需要自己来导入这个 JSTL的Jar包：jstl-1.2.jar。</strong> </p>
<p><strong>JSTL标签库的作用 用来提升在JSP页面的逻辑代码的编码效率，使用标签来替换逻辑代码的直接书写，高效，美观，整洁，易读</strong></p>
<a id="more"></a>
<h2 id="Jstl标签库的使用"><a href="#Jstl标签库的使用" class="headerlink" title="Jstl标签库的使用"></a>Jstl标签库的使用</h2><ul>
<li><p>核心标签库</p>
<ul>
<li><p>1.导入jar包</p>
</li>
<li><p>2.声明jstl标签库的引入(核心标签库)</p>
<ul>
<li><strong>&lt;%@taglib prefix=”c” uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;</strong></li>
</ul>
</li>
<li><p>基本标签：</p>
<ul>
<li><strong>&lt;-c:out value=”数据” default=”默认值”&gt;&lt;-/c:out&gt;</strong><ul>
<li><strong>数据可以为常量值也可以是EL表达式。</strong></li>
<li><strong>作用：将数据输出给客户端。</strong></li>
</ul>
</li>
<li><strong>&lt;-c:set var=”hello” value=”hello pageContext” scope=”page”&gt;&lt;-/c:set&gt;</strong><ul>
<li><strong>作用：存储数据到作用域对象中</strong></li>
<li><strong>var：表示存储的键名</strong></li>
<li><strong>value：表示存储的数据</strong></li>
<li><strong>scope：表示要存储的作用域对象 page request session application</strong></li>
</ul>
</li>
<li><strong>&lt;-c:remove var=”hello” scope=”page”/&gt;</strong><ul>
<li><strong>作用：删除作用域中的指定键的数据。</strong></li>
<li><strong>var：表示要删除的键的名字</strong></li>
<li><strong>scope：表示要删除的作用域（可选）</strong></li>
<li><strong>注意：如果在不指定作用域的情况使用该标签删除数据，会将四个作用域对象中的符合要求的数据全部删除。</strong></li>
</ul>
</li>
</ul>
</li>
<li><p>逻辑标签：</p>
<ul>
<li><p><strong>&lt;-c:if test=”${表达式}”&gt;前端代码&lt;-/c:if&gt;</strong></p>
<ul>
<li><strong>作用：进行逻辑判断，相当于java代码的单分支判断。</strong></li>
</ul>
</li>
<li><p>&lt;-c:choose&gt;<br>  &lt;-c:when test=””&gt;执行内容&lt;-/c:when&gt;<br>  &lt;-c:when test=””&gt;执行内容&lt;-/c:when&gt;<br>…<br>  &lt;-c:otherwise&gt;执行内容&lt;-/c:otherwise&gt;<br>&lt;- /c:choose&gt;</p>
</li>
<li><p><strong>作用：用来进行多条件的逻辑判断，类似java中的多分支语句</strong></p>
<ul>
<li><strong>注意：条件成立只会执行一次，都不成立则执行otherwise</strong></li>
</ul>
</li>
</ul>
</li>
<li><p>循环标签:</p>
<ul>
<li><strong>&lt;-c:forEach begin=”1” end=”4” step=”2”&gt;循环体&lt;-/c:forEach&gt;</strong><br>  <strong>作用：循环内容进行处理</strong></li>
<li>使用:<ul>
<li><strong>begin:声明循环开始位置</strong></li>
<li><strong>end:声明循环结束位置</strong></li>
<li><strong>step：设置步长</strong></li>
<li><strong>varStatus:声明变量记录每次循环的数据(角标，次数，是否是第一次循环，是否是最后一次循环)</strong><ul>
<li><strong>注意:数据存储在作用域中，需要使用EL表达式获取。</strong></li>
<li><strong>例如：${vs.index}–${vs.count}–${vs.first}–${vs.last}</strong></li>
</ul>
</li>
<li><strong>items:声明要遍历的对象。结合EL表达式获取对象</strong></li>
<li><strong>var:声明变量记录每次循环的结果。存储在作用域中，需要使用EL表达式获取。</strong></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>注意：逻辑判断标签需要依赖于EL的逻辑运算，也就是表达式中涉及到的数据必须从作用域中获取。</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115704.png"  alt=""></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	request.setAttribute(<span class="string">"str"</span>,<span class="string">"今天天气真好，适合学习"</span>);</span><br><span class="line">	<span class="comment">//request.setAttribute("hello","hello request");</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;!--基本标签学习  --&gt;</span><br><span class="line">&lt;h3&gt;基本标签学习&lt;/h3&gt;</span><br><span class="line">&lt;c:out value="哈哈"&gt;&lt;/c:out&gt;---哈哈--$&#123;str2&#125;&lt;br /&gt;</span><br><span class="line">&lt;c:out value="$&#123;str2&#125;" default="嘿嘿"&gt;&lt;/c:out&gt;&lt;br /&gt;</span><br><span class="line">&lt;c:set var="hello" value="hello pageContext" scope="page"&gt;&lt;/c:set&gt;&lt;br /&gt;</span><br><span class="line">&lt;c:set var="hello" value="hello request" scope="request"&gt;&lt;/c:set&gt;&lt;br /&gt;</span><br><span class="line">&lt;c:set var="hello" value="hello session" scope="session"&gt;&lt;/c:set&gt;&lt;br /&gt;</span><br><span class="line">&lt;c:set var="hello" value="hello application" scope="application"&gt;&lt;/c:set&gt;&lt;br /&gt;</span><br><span class="line">&lt;%-- &lt;c:out value="$&#123;applicationScope.hello&#125;"&gt;&lt;/c:out&gt; --%&gt;</span><br><span class="line">&lt;c:remove <span class="keyword">var</span>=<span class="string">"hello"</span> scope=<span class="string">"page"</span>/&gt;&lt;br /&gt;</span><br><span class="line">&lt;c:out value="$&#123;hello&#125;"&gt;&lt;/c:out&gt;</span><br><span class="line">&lt;hr /&gt;</span><br><span class="line">&lt;h3&gt;逻辑标签学习&lt;/h3&gt;</span><br><span class="line">&lt;!--传统方式：  --&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	<span class="keyword">int</span>  a=<span class="number">4</span>;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;<span class="number">3</span>)&#123;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;b&gt;今天的天气有点热哦&lt;/b&gt;</span><br><span class="line">&lt;%&#125; %&gt;</span><br><span class="line">&lt;!--jstl方式： --&gt;</span><br><span class="line">&lt;c:set var="a" value="4"&gt;&lt;/c:set&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;a&gt;3&#125;"</span>&gt;</span><br><span class="line">	&lt;b&gt;今天的天气有点热哦&lt;/b&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;c:set var="score" value="68"&gt;&lt;/c:set&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">	&lt;c:when test=<span class="string">"$&#123;score&gt;=90&#125;"</span>&gt;</span><br><span class="line">		&lt;i&gt;奖励吃鸡装配一套&lt;/i&gt;</span><br><span class="line">	&lt;/c:when&gt;</span><br><span class="line">	&lt;c:when test=<span class="string">"$&#123;score&lt;90&amp;&amp;score&gt;=80&#125;"</span>&gt;</span><br><span class="line">		&lt;i&gt;奖励空投箱&lt;/i&gt;</span><br><span class="line">	&lt;/c:when&gt;</span><br><span class="line">	&lt;c:when test=<span class="string">"$&#123;score&lt;80&amp;&amp;score&gt;=70&#125;"</span>&gt;</span><br><span class="line">		&lt;i&gt;无奖励无惩罚&lt;/i&gt;</span><br><span class="line">	&lt;/c:when&gt;</span><br><span class="line">	&lt;c:otherwise&gt;</span><br><span class="line">		&lt;i&gt;男女混合双打&lt;/i&gt;</span><br><span class="line">	&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line">&lt;hr /&gt;</span><br><span class="line">&lt;h3&gt;JSTL的循环标签&lt;/h3&gt;</span><br><span class="line">&lt;!--传统方式的表格  --&gt;</span><br><span class="line">&lt;table border=<span class="string">"1px"</span>&gt;</span><br><span class="line">	&lt;tr&gt;</span><br><span class="line">		&lt;td&gt;课程名称&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;教师&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;价格&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;重要性&lt;/td&gt;</span><br><span class="line">	&lt;/tr&gt;</span><br><span class="line">	&lt;%</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">2</span>)&#123;</span><br><span class="line">	%&gt;</span><br><span class="line">	&lt;tr&gt;</span><br><span class="line">		&lt;td&gt;java&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;张老师&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;不要钱&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;非常重要&lt;/td&gt;</span><br><span class="line">	&lt;/tr&gt;</span><br><span class="line">	&lt;%&#125;&#125; %&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">	list.add(<span class="string">"a"</span>);</span><br><span class="line">	list.add(<span class="string">"b"</span>);</span><br><span class="line">	list.add(<span class="string">"c"</span>);</span><br><span class="line">	list.add(<span class="string">"d"</span>);</span><br><span class="line">	request.setAttribute(<span class="string">"list"</span>,list);</span><br><span class="line">	HashMap&lt;String,String&gt; map=<span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">	map.put(<span class="string">"a1"</span>, <span class="string">"哈哈哈"</span>);</span><br><span class="line">	map.put(<span class="string">"b1"</span>, <span class="string">"嘿嘿"</span>);</span><br><span class="line">	request.setAttribute(<span class="string">"map"</span>,map);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;!-- 使用JSTL方式完成循环 --&gt;</span><br><span class="line">&lt;!--常量循环  --&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">"0"</span> end=<span class="string">"4"</span> step=<span class="string">"1"</span> varStatus=<span class="string">"vs"</span>&gt;</span><br><span class="line">	<span class="number">1111</span>---$&#123;vs.index&#125;--$&#123;vs.count&#125;--$&#123;vs.first&#125;--$&#123;vs.last&#125;&lt;br /&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;!--动态循环  --&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"str"</span>&gt;</span><br><span class="line">	$&#123;str&#125;&lt;br /&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;!--创建表格数据  --&gt;</span><br><span class="line">&lt;table border=<span class="string">"1px"</span>&gt;</span><br><span class="line">	&lt;tr&gt;</span><br><span class="line">		&lt;td&gt;课程名称&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;教师&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;价格&lt;/td&gt;</span><br><span class="line">		&lt;td&gt;重要性&lt;/td&gt;</span><br><span class="line">	&lt;/tr&gt;</span><br><span class="line">	&lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"s"</span>&gt;</span><br><span class="line">		&lt;tr&gt;</span><br><span class="line">			&lt;td&gt;$&#123;s&#125;&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;$&#123;s&#125;&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;$&#123;s&#125;&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;$&#123;s&#125;&lt;/td&gt;</span><br><span class="line">		&lt;/tr&gt;</span><br><span class="line">	&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;!--遍历map集合  --&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;map&#125;"</span> <span class="keyword">var</span>=<span class="string">"m"</span>&gt;</span><br><span class="line">	$&#123;m.key&#125;--$&#123;m.value&#125; &lt;br /&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Jstl标签库</tag>
      </tags>
  </entry>
  <entry>
    <title>El表达式</title>
    <url>/32496.html</url>
    <content><![CDATA[<h2 id="El表达式"><a href="#El表达式" class="headerlink" title="El表达式"></a>El表达式</h2><ul>
<li>传统方式获取作用域数据<ul>
<li>缺点一:导入包</li>
<li>缺点二:需要强转</li>
<li>缺点三:获取数据的代码过于麻烦。</li>
</ul>
</li>
</ul>
<p><strong>什么是EL表达式 全称：Expression Language，一种写法非常简介的表达式。语法 简单易懂，便于使用。表达式语言的灵感来自于 ECMAScript 和 XPath 表达式语言</strong></p>
<p><strong>EL表达式的作用 让jsp书写起来更加的方便。简化在jsp中获取作用域或者请 求数据的写法。也会搭配Jstl来进行使用。</strong></p>
<a id="more"></a>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115755.png"  alt=""><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115756.png"  alt=""></p>
<h2 id="El表达式的使用"><a href="#El表达式的使用" class="headerlink" title="El表达式的使用"></a>El表达式的使用</h2><ul>
<li><strong>语法结构：${expression},提供.和[ ]两种运算符来存取数据。</strong></li>
<li>使用EL表达式获取请求数据<ul>
<li>请求头数据：<ul>
<li>${header}–&gt;返回所有的请求头数据</li>
<li>${header[“键名”]}—&gt;返回指定的键名的请求头数据</li>
<li>${hedaerValues[“键名”]}—&gt;返回指定的键名(同键不同值)的值的数组。</li>
</ul>
</li>
<li><strong>获取用户请求数据</strong><ul>
<li>获取请求数据<ul>
<li><strong>request对象存储了请求数据—&gt;${param.键名}           返回值</strong></li>
<li><strong>request对象存储了请求数据—&gt;${paramvalues.键名}     返回的是数组</strong></li>
<li><strong>获取的是通过setAttribute方法存储到作用域对象中的数据</strong></li>
<li><strong>${键名} 返回键名所对应的值。</strong></li>
<li><strong>注意：如果存储的是普通字符串则直接返回。如果存储的是对象，则返回的是对象</strong></li>
</ul>
</li>
<li>获取对象中的数据：<ul>
<li>普通对象<ul>
<li><strong>${键名.属性名.属性名….}</strong></li>
</ul>
</li>
<li>集合对象<ul>
<li><strong>list集合—&gt;${键名[角标]}</strong></li>
<li><strong>map集合—&gt;${键名.map集合存储的键名}</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>获取Cookie数据 <ul>
<li>${cookie}—&gt;返回存储了所有的cookie对象的map集合</li>
<li>${cookie.键名}—-&gt;返回指定的cookie对象</li>
<li>${cookie.键名.name}—&gt;返回指定的cookie对象存储的数据的键名。</li>
<li>${cookie.键名.value}—&gt;返回指定的cookie对象存储的数据的值。        </li>
</ul>
</li>
</ul>
</li>
<li>使用EL表达式获取作用域数据<ul>
<li>获取作用域数据 <ul>
<li><strong>${键名}</strong></li>
</ul>
</li>
<li>作用域查找顺序<ul>
<li><strong>默认查找顺序：pageConext–&gt;request—&gt;session—&gt;application</strong></li>
<li><strong>注意：每次查找都是从小到大进行查找，找到了则获取，不再继续找了。</strong></li>
</ul>
</li>
<li>指定查找<ul>
<li><strong>${pageScope.键名}—${requestScope.键名}–${sessionScope.键名}–${applicationScope.键名}</strong></li>
</ul>
</li>
<li><strong>注意：获取的是pageContext、request、session、application四个对象中的数据，其他数据一概不理会。找到了则获取返回，找不到则什么都不做，也不报错。</strong></li>
</ul>
</li>
<li>使用EL表达式进行运算 <ul>
<li>逻辑运算<ul>
<li><strong>${逻辑表达式}：&amp;&amp; || !</strong></li>
</ul>
</li>
<li>算术运算<ul>
<li><strong>${算术表达式}：+，-，*，/</strong></li>
</ul>
</li>
<li>关系运算<ul>
<li><strong>${关系表达式}：&gt;,&lt;,&gt;=,==,!=,%</strong></li>
</ul>
</li>
<li><strong>特殊:三目运算</strong></li>
<li><strong>注意：+表示加法运算，不表示字符链接。使用EL表达式进行字符链接会报错。</strong></li>
<li>EL的空值判断:<ul>
<li><strong>${empty 键名}</strong></li>
<li><strong>作用:判断键名对象的值是否存有数据。</strong><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"com.kylin.pojo.User"</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><br><span class="line">&lt;!-- 使用传统方式获取作用域对象的数据 --&gt;</span><br><span class="line">&lt;h3&gt;EL表达式学习：使用传统方式获取作用域对象的数据&lt;/h3&gt;</span><br><span class="line">&lt;b&gt;&lt;%=request.getParameter("uname") %&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=request.getAttribute("str") %&gt;&lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((User)request.getAttribute("user")).getAddr().getTown() %&gt; &lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((ArrayList)request.getAttribute("list")).get(2) %&gt; &lt;/b&gt;&lt;br&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((User)(((ArrayList)request.getAttribute("list2")).get(0))).getAddr().getPre() %&gt;&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((HashMap)request.getAttribute("map")).get("c") %&gt;&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;&lt;%=((User)(((HashMap)request.getAttribute("map2")).get("a1"))).getAddr().getCity() %&gt;&lt;/b&gt;&lt;br /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">	String str2=<span class="string">"哈哈哈"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!-- 使用EL表达式获取作用域对象数据 --&gt;</span><br><span class="line">&lt;h3&gt;EL表达式学习：使用EL表达式获取作用域对象的数据&lt;/h3&gt;</span><br><span class="line">&lt;b&gt;$&#123;param.uname&#125;&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;$&#123;paramValues.fav[0]&#125;&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;$&#123;str&#125;&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;$&#123;user&#125;&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;$&#123;list[2]&#125;&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;$&#123;list2[0].addr.pre&#125;&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;$&#123;map.c&#125;&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;$&#123;map2.a1.addr.city&#125;&lt;/b&gt;&lt;br /&gt;</span><br><span class="line">&lt;b&gt;$&#123;str2&#125;&lt;/b&gt;</span><br><span class="line">&lt;hr /&gt;</span><br><span class="line">&lt;h3&gt;EL的作用域查找顺序&lt;/h3&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	pageContext.setAttribute(<span class="string">"hello"</span>,<span class="string">"hello pageContext"</span>);</span><br><span class="line">	request.setAttribute(<span class="string">"hello"</span>,<span class="string">"hello request"</span>);</span><br><span class="line">	session.setAttribute(<span class="string">"hello"</span>,<span class="string">"hello session"</span>);</span><br><span class="line">	application.setAttribute(<span class="string">"hello"</span>,<span class="string">"hello application"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123;hello&#125;&lt;br&gt;</span><br><span class="line">$&#123;pageScope.hello&#125;----$&#123;requestScope.hello&#125;----$&#123;sessionScope.hello&#125;------$&#123;applicationScope.hello&#125;</span><br><span class="line">&lt;h3&gt;EL表达式的逻辑运算&lt;/h3&gt;</span><br><span class="line">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;--$&#123;<span class="number">1</span>*<span class="number">2</span>&#125;--$&#123;<span class="number">4</span>/<span class="number">2</span>&#125;--$&#123;<span class="number">4</span>-<span class="number">2</span>&#125;--$&#123;<span class="number">4</span>%<span class="number">3</span>&#125;--$&#123;<span class="number">4</span>==<span class="number">4</span>&#125;--$&#123;<span class="number">4</span>&gt;<span class="number">2</span>&#125;--$&#123;sex==<span class="number">1</span>?<span class="string">'男'</span>:<span class="string">'女'</span>&#125;--$&#123;<span class="number">1</span>+<span class="string">'2'</span>&#125;</span><br><span class="line">&lt;h3&gt;EL表达式的空值判断&lt;/h3&gt;</span><br><span class="line">$&#123;empty s&#125;--$&#123;empty s1&#125;--$&#123;empty s2&#125;---$&#123;empty s3&#125;</span><br><span class="line">&lt;h3&gt;EL获取请求头数据和Cookie数据&lt;/h3&gt;</span><br><span class="line">	$&#123;header&#125;--$&#123;headerValues[<span class="string">"accept-language"</span>][<span class="number">0</span>]&#125; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">	$&#123;cookie&#125;--$&#123;cookie.JSESSIONID&#125;---$&#123;cookie.JSESSIONID.name&#125;--$&#123;cookie.JSESSIONID.value&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>El表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax学习</title>
    <url>/59920.html</url>
    <content><![CDATA[<h2 id="Ajax概念"><a href="#Ajax概念" class="headerlink" title="Ajax概念"></a>Ajax概念</h2><p><strong>问题：目前来，所有的请求的发送都是通过浏览器自己直接进行发送，响应是浏览器在接收到响应信息后自主的将响应数据覆盖当前页面显示。现在，要求在保留原有页面内容的情况下显示新的响应内容.</strong></p>
<p><strong>解决:使用ajax技术</strong></p>
<p><strong>ajax原理:请求由ajax引擎对象发送，响应数据，浏览器不会直接进行处理，而是流转给发请求的ajax引擎对象。这样我们可以通过操作ajax引擎对象变相的实现在页面中显示新的响应资源。</strong></p>
<p><strong>本质：js的DOM操作中的数据由程序员自己写死声明，变成从服务器动态的获取。</strong></p>
<a id="more"></a>
<h2 id="Ajax使用"><a href="#Ajax使用" class="headerlink" title="Ajax使用"></a>Ajax使用</h2><ul>
<li><strong>创建ajax引擎对象</strong></li>
<li><strong>覆写onreadystatechange函数</strong><ul>
<li><strong>判断数据状态码(ajax.readyState)</strong></li>
<li><strong>判断响应状态码(ajax.status)</strong></li>
<li><strong>获取响应数据</strong></li>
<li><strong>处理响应数据(js的DOM操作)</strong></li>
</ul>
</li>
<li><strong>创建并发送请求</strong><ul>
<li>ajax.open(method,url,async)</li>
<li>ajax.send(“请求数据”)</li>
<li>解释<ul>
<li><strong>method：表示请求的方式，值为get/post</strong></li>
<li><strong>url:表示请求地址，一般为要请求的servlet的别名。</strong></li>
<li><strong>async:表示异步还是同步请求， true表示异步， false表示同步，默认为异步。</strong></li>
</ul>
</li>
<li>注意<ul>
<li><strong>如果请求方式是get方式，则请求数据需要拼接在url的后面，以？隔开，键值对。并且send中要写null。</strong></li>
<li><strong>如果是post请求方式，则在send方法中书写请求数据即可。并且要声明数据的提交格式为键值对。</strong></li>
<li><strong>get方式提交经常会遇到浏览器缓存问题，浏览器不对同样的url重复提交。这时可以在url后面增加参数：?rand = Math.random()   或者：rand = new Date()</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115913.png"  alt=""></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Ajax的响应数据格式"><a href="#Ajax的响应数据格式" class="headerlink" title="Ajax的响应数据格式"></a>Ajax的响应数据格式</h2><ul>
<li><p><strong>普通文本：后台在接收到ajax请求后，处理后直接响应普通字符串给ajax</strong></p>
</li>
<li><p><strong>josn数据：后台在接收到ajax请求后，处理后响应json格式的字符串给ajax.ajax处理代码中使用eval()方法将json数据转换为js对的对象，将对象中的数据通过js的dom操作显示到页面中。</strong></p>
</li>
<li><p><strong>注意：json格式：var 对象名={键名:值,键名:值,……..}</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115914.png"  alt=""><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115915.png"  alt=""></p>
</li>
<li><p><strong>xml数据:后台在接收到ajax请求后，处理后响应xml格式的字符串给ajax。</strong></p>
<ul>
<li><strong>前台使用ajax.responseXML进行数据接收，返回的是xml文档对象(document)。使用document对象将xml中取出并显示到页面中即可</strong></li>
<li><strong>注意：后台的响应数据格式必须设置成xml格式：resp.setContentType(“text/xml;charset=utf-8”);</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115916.png"  alt=""><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405115917.png"  alt=""></li>
</ul>
</li>
<li><p><strong>注意：ajax是前端的技术，由浏览器进行解析执行。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"utf-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明js代码域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="function"><span class="keyword">function</span> <span class="title">getData</span><span class="params">()</span></span>&#123;		</span></span><br><span class="line"><span class="actionscript">		<span class="comment">//创建ajax引擎对象</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> ajax;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;<span class="comment">//火狐</span></span></span><br><span class="line"><span class="actionscript">				ajax=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;<span class="comment">//ie</span></span></span><br><span class="line"><span class="actionscript">				ajax=<span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span></span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line"><span class="actionscript">			<span class="comment">//复写onreadystatement函数</span></span></span><br><span class="line"><span class="actionscript">			ajax.onreadystatechange=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//判断Ajax状态码</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">if</span>(ajax.readyState==<span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//判断响应状态码</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">if</span>(ajax.status==<span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取响应内容</span></span></span><br><span class="line"><span class="actionscript">					<span class="keyword">var</span> result = ajax.responseText;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> showdiv=<span class="built_in">document</span>.getElementById(<span class="string">"showdiv"</span>);</span></span><br><span class="line">					showdiv.innerHTML=result;</span><br><span class="line"><span class="actionscript">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ajax.status==<span class="number">404</span>)&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> showdiv=<span class="built_in">document</span>.getElementById(<span class="string">"showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">					showdiv.innerHTML=<span class="string">"请求资源不存在!"</span>;</span></span><br><span class="line"><span class="actionscript">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(ajax.status==<span class="number">500</span>)&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> showdiv=<span class="built_in">document</span>.getElementById(<span class="string">"showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">					showdiv.innerHTML=<span class="string">"服务器繁忙!"</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">		&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> showdiv=<span class="built_in">document</span>.getElementById(<span class="string">"showdiv"</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">					showdiv.innerHTML="<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'img/2.gif'</span> <span class="attr">width</span>=<span class="string">'200px'</span> <span class="attr">height</span>=<span class="string">'100px'</span>/&gt;</span>";</span></span></span><br><span class="line">				&#125; </span><br><span class="line">	&#125;</span><br><span class="line"><span class="actionscript">		<span class="comment">//发送请求</span></span></span><br><span class="line"><span class="actionscript">		ajax.open(<span class="string">"get"</span>,<span class="string">"ajax"</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">		ajax.send(<span class="literal">null</span>);</span></span><br><span class="line"><span class="actionscript">		alert(<span class="string">"哈哈"</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-id">#showdiv</span>&#123;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">border</span><span class="selector-pseudo">:solid</span> 1<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">		<span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>; </span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>欢迎登录403峡谷<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"测试 "</span> <span class="attr">onclick</span>=<span class="string">"getData()"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ajax"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//设置请求编码格式</span></span><br><span class="line">		req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">		<span class="comment">//设置响应编码格式</span></span><br><span class="line">		resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">		resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">		<span class="comment">//获取请求信息</span></span><br><span class="line">			String name = req.getParameter(<span class="string">"name"</span>);</span><br><span class="line">			String pwd = req.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line">			System.out.println(name+<span class="string">":"</span>+pwd+<span class="string">":"</span>+req.getMethod());</span><br><span class="line">		<span class="comment">//处理请求信息</span></span><br><span class="line">		<span class="comment">//响应处理结果</span></span><br><span class="line">		resp.getWriter().write(<span class="string">"你好Ajax"</span>);</span><br><span class="line">	&#125;java</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP学习</title>
    <url>/62960.html</url>
    <content><![CDATA[<h2 id="JSP-学习"><a href="#JSP-学习" class="headerlink" title="JSP 学习"></a>JSP 学习</h2><p><strong>问题：在学习了 Servlet 之后，使用 Servlet 进行页面的展现，代码书写过于麻烦。极大的影响了开发的效率，那么有没有一种方式可以让我们像以前写网页一样来进行网页的编程工作呢?</strong></p>
<p><strong>解决：使用 JSP 技术</strong></p>
<p><strong>概念：JSP 全名为 JavaServerPages，中文名叫 java 服务器页面，其根本是一个简化的 Servlet 设计，它是由 SunMicrosystems 公司倡导、许多公司参与一起建立的一种动态网页技术标准。</strong></p>
<ul>
<li>特点  <ul>
<li><strong>本质上还是 Servlet</strong></li>
<li><strong>跨平台，一次编写处处运行</strong></li>
<li>组件跨平台</li>
<li>健壮性和安全性</li>
</ul>
</li>
</ul>
<p><strong>Jsp 的访问原理： 浏览器发起请求，请求 JSP，请求被 Tomcat 服务器接收，执行JspServlet 将请求的 JSP 文件转义成为对应的 java 文件(也是Servlet)，然后执行转义好的 java 文件。</strong></p>
<a id="more"></a>

<h2 id="Jsp的三种注释"><a href="#Jsp的三种注释" class="headerlink" title="Jsp的三种注释"></a>Jsp的三种注释</h2><p>前端语言注释：会被转译，也会被发送，但是不会被浏览器执行</p>
<p>java语言注释：会被转译，但是不会被servlet执行</p>
<p>Jsp注释：不会被转译。</p>
<h2 id="Jsp的page指令学习"><a href="#Jsp的page指令学习" class="headerlink" title="Jsp的page指令学习"></a>Jsp的page指令学习</h2><ul>
<li><strong>&lt;%@page 属性名=”属性值” 属性名=”属性值”…%&gt;</strong><ul>
<li><strong>language：声明jsp要被转译的语言。</strong></li>
<li><strong>import:声明转译的java文件要导入的包，不同的包使用逗号隔开。</strong></li>
<li><strong>pageEncoding:设置jsp文件的数据编码格式。</strong></li>
<li><strong>contentType=”text/html; charset=utf-8”  设置jsp数据响应给浏览器时，浏览器的解析和编码格式。</strong></li>
<li><strong>session:设置转译的servlet中是否开启session支持,默认开启，true表示开启。false表示关闭。</strong></li>
<li><strong>errorPage:设置jsp运行错误跳转的页面.</strong></li>
<li><strong>extends:设置jsp转译的java文件要继承的父类(包名+类名)。</strong></li>
</ul>
</li>
<li><strong>作用：配置jsp文件的转译相关的参数。</strong></li>
</ul>
<h2 id="Jsp的代码块"><a href="#Jsp的代码块" class="headerlink" title="Jsp的代码块"></a>Jsp的代码块</h2><ul>
<li>Jsp的局部代码块：<ul>
<li><strong>特点：局部代码块中声明的java代码会被原样转译到jsp对应的servlet文件的_JspService方法中。代码块中声明的变量都是局部变量。</strong></li>
<li><strong>使用：&lt;% java代码  %&gt;</strong></li>
<li><strong>缺点：使用局部代码块在jsp中进行逻辑判断，书写麻烦，阅读困难。</strong></li>
<li>开发：servlet进行请求逻辑处理，使用jsp进行页面展现。</li>
</ul>
</li>
<li>Jsp的全局代码块：<ul>
<li><strong>特点：声明的java代码作为全局代码转译到对应的servlet类中。</strong></li>
<li><strong>使用：&lt;%! 全局代码 %&gt;</strong></li>
<li><strong>注意：全局代码块声明的代码，需要使用局部代码块调用。</strong></li>
</ul>
</li>
</ul>
<h2 id="Jsp的脚本段语句"><a href="#Jsp的脚本段语句" class="headerlink" title="Jsp的脚本段语句"></a>Jsp的脚本段语句</h2><ul>
<li><p><strong>特点：帮助我们快速的获取变量或者方法的返回值作为数据响应给浏览器。</strong></p>
</li>
<li><p><strong>使用：&lt;%=变量名或者方法%&gt;</strong></p>
</li>
<li><p><strong>注意：不要在变量名或者方法后使用分号。</strong></p>
</li>
<li><p><strong>位置：除jsp语法要求以外的任意位置。</strong></p>
</li>
</ul>
<h2 id="Jsp的静态引入和动态引入"><a href="#Jsp的静态引入和动态引入" class="headerlink" title="Jsp的静态引入和动态引入"></a>Jsp的静态引入和动态引入</h2><ul>
<li>静态引入:<ul>
<li><strong>&lt;%@include file=”要引入的jsp文件的相对路径” %&gt;</strong></li>
<li><strong>特点：会将引入的jsp文件和当前jsp文件转译成一个java(Servlet)文件使用。在网页中也就显示了合并后的显示效果。</strong></li>
<li><strong>注意：静态引入的jsp文化不会单独转译成java(Servlet)文件。当前文件和静态引入的jsp文件中不能够使用java代码块声明同名变量。</strong></li>
</ul>
</li>
<li>动态引入：<ul>
<li><strong>&lt;-jsp:include page=”要引入的jsp文件的相对路径”&gt;&lt;-/jsp:include&gt;</strong></li>
<li><strong>特点：会将引入的jsp文件单独转译，在当前文件转译好的java文件中调用引入的jsp文件的转译文件。在网页中显示合并后的显示效果。</strong></li>
<li><strong>注意：动态引入允许文件中声明同名变量。</strong></li>
</ul>
</li>
</ul>
<h2 id="Jsp的转发标签"><a href="#Jsp的转发标签" class="headerlink" title="Jsp的转发标签"></a>Jsp的转发标签</h2><ul>
<li><strong>优点：降低jsp代码的冗余，便于维护升级。</strong></li>
<li><strong>使用：&lt;-jsp:forward page=”要转发的jsp文件的相对路径”&gt;&lt;-/jsp:forward&gt;</strong></li>
<li><strong>特点：一次请求。地址栏信息不改变。（请求转发）</strong></li>
<li><strong>注意：在转发标签的两个标签中间除了写&lt;-jsp:param name=”str” value=”aaa” /&gt;子标签不会报错，其他任意字符都会报错。</strong></li>
<li><strong>&lt;-jsp:param name=”str” value=”aaa” /&gt;</strong><ul>
<li><strong>name属性为附带的数据的键名</strong></li>
<li><strong>value为附带的数据内容</strong></li>
<li><strong>注意：会将数据以？的形式拼接在转发路径的后面。</strong></li>
</ul>
</li>
</ul>
<h2 id="Jsp的九大内置对象"><a href="#Jsp的九大内置对象" class="headerlink" title="Jsp的九大内置对象"></a>Jsp的九大内置对象</h2><ul>
<li>内置对象：<ul>
<li><strong>jsp文件在转译成其对应的Servlet文件的时候自动生成的并声明的对象。我们在jsp页面中直接使用即可。</strong></li>
<li><strong>注意：内置对象在jsp页面中使用，使用局部代码块或者脚本段语句来使用。不能够在全局代码块中使用。</strong></li>
</ul>
</li>
<li>九大内置对象<ul>
<li><strong>pageContext:页面上下文对象，封存了其他内置对象。封存了当前jsp的运行信息。</strong><ul>
<li><strong>注意：每个Jsp文件单独拥有一个pageContext对象。</strong></li>
<li><strong>作用域：当前页面。</strong></li>
</ul>
</li>
<li><strong>request：封存当前请求数据的对象。由tomcat服务器创建。一次请求</strong></li>
<li><strong>session:此对象用来存储用户的不同请求的共享数据的。一次会话</strong></li>
<li><strong>application：也就是ServletContext对象，一个项目只有一个。存储用户共享数据的对象，以及完成其他操作。项目内</strong></li>
<li><strong>response:响应对象，用来响应请求处理结果给浏览器的对象。设置响应头，重定向。</strong></li>
<li><strong>out:响应对象，Jsp内部使用。带有缓冲区的响应对象，效率高于response对象。</strong></li>
<li><strong>page:代表当前Jsp的对象。相当于java中的this。</strong></li>
<li><strong>exception：异常对象。存储了当前运行的异常信息。</strong><ul>
<li><strong>注意：使用此对象需要在page指定中使用属性isErrorPage=”true”开启。</strong></li>
</ul>
</li>
<li><strong>config：也就是ServletConfig，主要是用来获取web.xml中的配置数据，完成一些初始化数据的读取。</strong></li>
</ul>
</li>
</ul>
<h2 id="四个作用域对象"><a href="#四个作用域对象" class="headerlink" title="四个作用域对象"></a>四个作用域对象</h2><ul>
<li><p><strong>pageContext:当前页面.解决了在当前页面内的数据共享问题。获取其他内置对象。</strong></p>
</li>
<li><p><strong>request:一次请求。一次请求的servlet的数据共享。通过请求转发，将数据流转给下一个servlet。</strong></p>
</li>
<li><p><strong>session:一次会话.一个用户的不同请求的数据共享。将数据从一次请求流转给其他请求。</strong></p>
</li>
<li><p><strong>application:项目内.不同用户的数据共享问题。将数据从一个用户流转给其他用户。</strong></p>
</li>
<li><p><strong>作用：数据流转</strong></p>
</li>
<li><p>Jsp的路径</p>
</li>
<li><p>在jsp中资源路径可以使用相对路径完成跳转，但是：</p>
<ul>
<li>问题一：资源的位置不可随意更改。</li>
<li>问题二：需要使用../进行文件夹的跳出。使用比较麻烦。</li>
<li>使用绝对路径：(必须会)<ul>
<li><strong>/虚拟项目名/项目资源路径</strong></li>
<li>例如：<ul>
<li>&lt;-a href=”/jsp/jspPro.jsp”&gt;jspPro.jsp&lt;-/a&gt;</li>
<li>&lt;-a href=”/jsp/a/a.jsp”&gt;a.jsp&lt;-/a&gt;</li>
</ul>
</li>
<li><strong>注意：在jsp中资源的第一个/表示的是服务器根目录，相当于:localhost:8080</strong></li>
</ul>
</li>
</ul>
</li>
<li><p>使用jsp中自带的全局路径声明：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">	String path = request.getContextPath();</span><br><span class="line">	String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path+<span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>作用：给资源前面添加项目路径：        <a href="http://127.0.0.1:8080/虚拟项目名/" target="_blank" rel="noopener">http://127.0.0.1:8080/虚拟项目名/</a></strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405120147.png"  alt="image-20200405120145236"></p>
</li>
</ul>
<p>src： 存放java源码，编译后的文件都会放在WEB-INF下的classes文件夹下</p>
<p>WebContent：项目创建完后，只有这个目录有用，因为web项目需要的所有文件都在这里。</p>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>web.xml和Tomcat下的server.xml学习</title>
    <url>/62927.html</url>
    <content><![CDATA[<h2 id="Web-xml文件使用总结"><a href="#Web-xml文件使用总结" class="headerlink" title="Web.xml文件使用总结"></a>Web.xml文件使用总结</h2><p><strong>作用：存储项目相关的配置信息，保护 Servlet。解耦一些数据对程序的依赖。</strong></p>
<p><strong>使用位置：每个 Web 项目中</strong></p>
<p><strong>Tomcat 服务器中(在服务器目录 conf 目录中)</strong></p>
<ul>
<li>区别：<ul>
<li><strong>Web 项目下的 web.xml 文件为局部配置，针对本项目的位置。</strong></li>
<li><strong>Tomcat 下的 web.xml 文件为全局配置，配置公共信息。</strong></li>
<li><strong>如果单个servlet的web.xml没有配置相关信息，则按Tomcat下的web.xml使用</strong><a id="more"></a></li>
</ul>
</li>
<li>内容(核心组件)：<ul>
<li>全局上下文配置(全局配置参数)</li>
<li>Servlet 配置</li>
<li>过滤器配置</li>
<li>监听器配置</li>
</ul>
</li>
</ul>
<p><strong>加载顺序：Web 容器会按 ServletContext -&gt; context-param -&gt; listener -&gt;filter-&gt; servlet 这个顺序加载组件，这些元素可配置在 web.xml文件中的任意位置。</strong></p>
<p><strong>加载时机：服务器启动时</strong></p>
<h2 id="server-xml-文件"><a href="#server-xml-文件" class="headerlink" title="server.xml 文件"></a>server.xml 文件</h2><p><strong>问题：浏览器发起请求后，服务器根据请求在 webapps 目下调用对应的 Servlet 进行请求处理。那么为什么是 webapps 目录难道不能是其他的目录吗？</strong></p>
<p><strong>解决：了解 server.xml 文件的配置信息</strong></p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405120309.png"  alt="image-20200405120307839"></p>
<p>Server.xml 文件核心组件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Service</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">Engine</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">Host</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">Context</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">Host</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">Service</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">          <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 自己配置 --&gt;</span></span><br><span class="line">	      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"sso.com"</span>  <span class="attr">appBase</span>=<span class="string">"suibian"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">Host</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">useBodyEncodingForURI</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>由该xml文件可以看出一个Server容器中包含三个主要部分，其中最核心的为Service部分，当浏览器发送一个请求给服务器时首先会被地址栏后的域名或Ip找到对应的Engine拦截其中关键的几点：</p>
<ul>
<li><strong>Engin会被配置的defaultHost=”localhost”根据地址栏找到，可以是Ip映射也可以是虚拟域名映射。同时根据Host后面指定的appBase寻找相对路径来作为要访问资源的根目录，其该路径是相对于tomcat的根目录即（bin的父目录为该目录）需要注意的是：当不是默认的webapps时里面的资源需要放在一文件夹下</strong></li>
<li><strong>Engin会找跟自己名字相同的Service，对应的Service寻找其下配置的Connector根据端口号、以及协议版本来找到对应的Connector</strong></li>
</ul>
]]></content>
      <tags>
        <tag>web.xml</tag>
        <tag>server.xml</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet基础-8</title>
    <url>/50355.html</url>
    <content><![CDATA[<h2 id="ServletContext-对象"><a href="#ServletContext-对象" class="headerlink" title="ServletContext 对象"></a>ServletContext 对象</h2><p><strong>问题:Request 解决了一次请求内的数据共享问题，session 解决了用户不同请求的数据共享问题，那么不同的用户的数据共享该怎么办呢？</strong></p>
<p><strong>解决：使用 ServletContext 对象</strong></p>
<p><strong>作用：解决了不同用户的数据共享问题</strong></p>
<p><strong>原理：ServletContext 对象由服务器进行创建，一个项目只有一个对象。不管在项目的任意位置进行获取得到的都是同一个对象，那么不同用户发起的请求获取到的也就是同一个对象了，该对象由用户共同拥有。</strong></p>
<a id="more"></a>

<ul>
<li>特点<ul>
<li><strong>服务器进行创建</strong></li>
<li><strong>用户共享</strong></li>
<li><strong>一个项目只有一个</strong></li>
</ul>
</li>
</ul>
<p><strong>生命周期：服务器启动到服务器关闭</strong></p>
<p><strong>作用域：项目内</strong></p>
<ul>
<li>使用<ul>
<li>获取ServletContext对象<ul>
<li><strong>第一种方式：ServletContext sc=this.getServletContext();</strong></li>
<li><strong>第二种方式：ServletContext sc2=this.getServletConfig().getServletContext();</strong></li>
<li><strong>第三种方式：ServletContext sc3=req.getSession().getServletContext();</strong></li>
</ul>
</li>
<li>使用ServletContext对象完成数据共享<ul>
<li><strong>数据存储 sc.setAttribute(String name, Object value);</strong></li>
<li><strong>数据获取 sc.getAttribute(“str”) 返回的是Object类型</strong></li>
<li><strong>注意：不同的用户可以给ServletContext对象进行数据的存取。获取的数据不存在返回null。</strong></li>
</ul>
</li>
<li>获取项目中web.xml文件中的全局配置数据<ul>
<li><strong>sc.getInitParameter(String name); 根据键的名字返回web.xml中配置的全局数据的值，返回String类型。如果数据不存在返回null。</strong></li>
<li><strong>sc.getInitParameterNames();返回键名的枚举</strong></li>
</ul>
</li>
<li>全局配置方式<ul>
<li><strong>注意 一组&lt;-context-param&gt;标签只能存储一组键值对数据，多组可以声明多个&lt;-context-param&gt;进行存储。</strong></li>
<li><strong>作用：将静态数据和代码进行解耦。</strong><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- 获取项目webroot下的资源的绝对路径。</span><br><span class="line">  - **String path=sc.getRealPath(String path);**</span><br><span class="line">  		- **获取的路径为项目根目录，path参数为项目根目录中的路径**</span><br><span class="line">- 获取webroot下的资源的流对象</span><br><span class="line">  - InputStream is = sc.getResourceAsStream(String path);</span><br><span class="line">		- **注意：此种方式只能获取项目根目录下的资源流对象，<span class="class"><span class="keyword">class</span>文件的流对象需要使用类加载器获取。<span class="title">path</span>参数为项目根目录中的路径**</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContextServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//获取ServletContex对象</span></span><br><span class="line">		<span class="comment">//第一种方式</span></span><br><span class="line">		ServletContext sc = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">		<span class="comment">//第二种方式</span></span><br><span class="line">		ServletContext sc2 = <span class="keyword">this</span>.getServletConfig().getServletContext();</span><br><span class="line">		<span class="comment">//第三种方式</span></span><br><span class="line">		ServletContext sc3 = req.getSession().getServletContext();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//使用ServletContext对象完成数据共享</span></span><br><span class="line">		sc.setAttribute(<span class="string">"str"</span>, <span class="string">"ServletContext对象学习"</span>);<span class="comment">//数据存储</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取项目web.xml的全局配置数据</span></span><br><span class="line">		String str =  sc.getInitParameter(<span class="string">"name"</span>);</span><br><span class="line">		System.out.println(<span class="string">"全局配置"</span>+str);</span><br><span class="line">		System.out.println(<span class="string">"全局配置参数："</span>+str);</span><br><span class="line">		<span class="comment">//获取项目根目录下的资源的绝对路径</span></span><br><span class="line">			<span class="comment">//String path="D:\\apache-tomcat-7.0.56\\webapps\\sc\\doc\\1.txt";</span></span><br><span class="line">			String path=sc.getRealPath(<span class="string">"/doc/1.txt"</span>);</span><br><span class="line">			System.out.println(path);</span><br><span class="line">		<span class="comment">//获取项目根目录下资源的流对象</span></span><br><span class="line">			InputStream is = sc.getResourceAsStream(<span class="string">"/doc/1.txt"</span>);</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--配置全局数据  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>06-ServletContext<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>This is the description of my J2EE component<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>This is the display name of my J2EE component<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletContextServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kylin.servlet.ServletContextServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>This is the description of my J2EE component<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>This is the display name of my J2EE component<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletContextServlet2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kylin.servlet.ServletContextServlet2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletContextServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/context<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletContextServlet2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/context2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="ServletConfig对象"><a href="#ServletConfig对象" class="headerlink" title="ServletConfig对象"></a>ServletConfig对象</h2><p><strong>问题：使用ServletContext对象可以获取web.xml中的全局配置文件，在 web.xml中每个 Servlet 也可以进行单独的配置，那么该怎么获取配置信息呢</strong></p>
<p><strong>解决：使用 ServletConfig 对象</strong></p>
<p><strong>作用：ServletConfig 对象是 Servlet 的专属配置对象，每个 Servlet 都单独拥有一个 ServletConfig 对象，用来获取 web.xml 中的配置信息。</strong></p>
<ul>
<li>使用<ul>
<li><strong>获取ServletConfig对象 ServletConfig sc = this.getServletConfig();</strong></li>
<li><strong>获取web.xml中的配置数据 String code = sc.getInitParameter(“config”);</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletConfigServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取ServletConfig对象</span></span><br><span class="line">		ServletConfig sc = <span class="keyword">this</span>.getServletConfig();</span><br><span class="line">		<span class="comment">//获取web.xml中的配置数据</span></span><br><span class="line">		String code = sc.getInitParameter(<span class="string">"config"</span>);</span><br><span class="line">		System.out.println(code);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>07-ServletConfig<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>This is the description of my J2EE component<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>This is the display name of my J2EE component<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletConfigServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kylin.servlet.ServletConfigServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletConfigServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/sg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>servlet</tag>
        <tag>ServletContex</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet基础-7</title>
    <url>/49395.html</url>
    <content><![CDATA[<h2 id="Session学习"><a href="#Session学习" class="headerlink" title="Session学习"></a>Session学习</h2><p><strong>问题：Request 对象解决了一次请求内的不同 Servlet 的数据共享问 题，那么一个用户的不同请求的处理需要使用相同的数据怎么办呢?</strong></p>
<p><strong>解决：使用 session 技术。</strong></p>
<p><strong>原理：用户使用浏览器第一次向服务器发送请求，服务器在接受到请求后，调用对应的 Servlet 进行处理。在处理过程中会给用户创建 一个 session 对象，用来存储用户请求处理相关的公共数据，并将 此 session 对象的 JSESSIONID 以 Cookie 的形式存储在浏览器中 (临时存储，浏览器关闭即失效)。用户在发起第二次请求及后续请 求时，请求信息中会附带 JSESSIONID，服务器在接收到请求后， 调用对应的 Servlet 进行请求处理，同时根据 JSESSIONID返回其对应的session 对象。</strong></p>
<a id="more"></a>

<ul>
<li>特点：<ul>
<li><strong>存储在服务器端</strong></li>
<li><strong>服务器进行创建</strong></li>
<li><strong>依赖Cookie技术</strong></li>
<li><strong>一次会话</strong></li>
<li><strong>默认存储时间是30分钟</strong></li>
</ul>
</li>
</ul>
<p><strong>作用：解决了一个用户不同请求处理的数据共享问题</strong></p>
<ul>
<li>使用：<ul>
<li><strong>创建session对象/获取session对象</strong><ul>
<li><strong>HttpSession hs=req.getSession();</strong></li>
<li><strong>如果请求中拥有session的标识符也就是JSESSIONID，则返回其对应的session对象</strong></li>
<li><strong>如果请求中没有session的标识符也就是JSESSIONID，则创建新的session对象，并将其JSESSIONID作为从cookie数据存储到浏览器内存中</strong></li>
<li><strong>如果session对象是失效了，也会重新创建一个session对象，并将其JSESSIONID存储在浏览器内存中。</strong></li>
</ul>
</li>
<li><strong>设置session存储时间</strong><ul>
<li><strong>hs.setMaxInactiveInterval(int seconds);默认存储时间是30分钟</strong></li>
<li><strong>注意：在指定的时间内session对象没有被使用则销毁，如果使用了则重新计时。</strong></li>
</ul>
</li>
<li><strong>设置session强制失效</strong><ul>
<li><strong>hs.invalidate();</strong></li>
</ul>
</li>
<li><strong>存储和获取数据</strong><ul>
<li><strong>存储：hs.setAttribute(String name,Object value);</strong></li>
<li><strong>获取：hs.getAttribute(String name) 返回的数据类型为Object</strong></li>
<li><strong>获取此session对象的JSESSIONID hs.getId()</strong></li>
<li><strong>注意：存储的动作和取出的动作发生在不同的请求中，但是存储要先于取出执行。</strong></li>
</ul>
</li>
</ul>
</li>
<li><strong>使用时机:一般用户在登陆web项目时会将用户的个人信息存储到Sesion中，供该用户的其他请求使用。</strong></li>
</ul>
<p><strong>总结：session解决了一个用户的不同请求的数据共享问题，只要在JSESSIONID不失效和session对象不失效的情况下。用户的任意请求在处理时都能获取到同一个session对象。</strong></p>
<p><strong>作用域：一次会话。(至浏览器关闭)在JSESSIONID和SESSION对象不失效的情况下为整个项目内。</strong></p>
<p><strong>session失效处理：将用户请求中的JSESSIONID和后台获取到的SESSION对象的JSESSIONID进行比对，如果一致则session没有失效，如果不一致则证明session失效了。重定向到登录页面，让用户重新登录。</strong></p>
<p><strong>注意：JSESSIONID存储在了Cookie的临时存储空间中，浏览器关闭即失效。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//设置请求编码格式</span></span><br><span class="line">		req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">		<span class="comment">//设置响应编码格式</span></span><br><span class="line">		resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">		<span class="comment">//获取请求信息</span></span><br><span class="line">		String name =<span class="string">"张三"</span>;</span><br><span class="line">		<span class="comment">//处理请求信息</span></span><br><span class="line">			<span class="comment">//创建session对象</span></span><br><span class="line">			HttpSession hs = req.getSession();<span class="comment">//即是创建又是获取</span></span><br><span class="line">			<span class="comment">//设置session存储时间</span></span><br><span class="line"><span class="comment">//			hs.setMaxInactiveInterval(5);</span></span><br><span class="line">			<span class="comment">//设置session强制失效</span></span><br><span class="line"><span class="comment">//			hs.invalidate();</span></span><br><span class="line">            <span class="comment">//获取此session对象的JSESSIONID</span></span><br><span class="line">			System.out.println(hs.getId());</span><br><span class="line">			<span class="comment">//存储数据</span></span><br><span class="line">			hs.setAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">		<span class="comment">//响应处理结果</span></span><br><span class="line">			<span class="comment">//直接响应</span></span><br><span class="line">			resp.getWriter().write(<span class="string">"session学习"</span>);</span><br><span class="line">			<span class="comment">//请求转发</span></span><br><span class="line">			<span class="comment">//重定向</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Session和Cookie的区别"><a href="#Session和Cookie的区别" class="headerlink" title="Session和Cookie的区别"></a>Session和Cookie的区别</h2><p><strong>存储数据量方面：session 能够存储任意的 java 对象，cookie 只能存储 String 类型的对象</strong></p>
<p><strong>一个在客户端一个在服务端。因Cookie在客户端所以可以编辑伪造，不是十分安全。</strong></p>
<p><strong>Session过多时会消耗服务器资源，大型网站会有专门Session服务器，Cookie存在客户端没问题。</strong></p>
<p><strong>域的支持范围不一样，比方说a.com的Cookie在a.com下都能用，而<a href="http://www.a.com的Session在api.a.com下都不能用，解决这个问题的办法是JSONP或者跨域资源共享。" target="_blank" rel="noopener">www.a.com的Session在api.a.com下都不能用，解决这个问题的办法是JSONP或者跨域资源共享。</a></strong></p>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>servlet</tag>
        <tag>session</tag>
        <tag>Session和Cookie的区别</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet基础-6</title>
    <url>/50.html</url>
    <content><![CDATA[<h2 id="Cookie学习"><a href="#Cookie学习" class="headerlink" title="Cookie学习"></a>Cookie学习</h2><p><strong>问题：HTTP 协议是没有记忆功能的，一次请求结束后，相关数据会被销毁。如果第二次的请求需要使用相同的请求数据怎么办呢？难道是让用户再次请求书写吗?</strong></p>
<p><strong>解决：使用Cookie技术，解决了发送的不同请求的数据共享问题</strong></p>
<p><strong>解释：Cookie 技术其实是浏览器端的数据存储技术，解决了不同请求需要使用相同的请求数据的问题。我们把请求需要共享的请求数据，存储在浏览器端，避免用户进行重复的书写请求数据。但是哪些数据需要使用 Cookie 技术存储起来是一个主观问题，需要在后台进行响应的时候来告诉浏览器，有些数据其他请求还会使用，需要存储起来。</strong></p>
<a id="more"></a>

<ul>
<li><p>使用</p>
<ul>
<li><p>Cookie 数据存储</p>
<ul>
<li><strong>创建Cookie对象 Cookie c=new Cookie(String name, String value);</strong></li>
</ul>
</li>
<li><p>设置Cookie(可选)</p>
<ul>
<li><strong>设置有效期 c.setMaxAge(int seconds)（参数以秒数为单位）;设置存储时间，周期为时间设置，存储在用户电脑中。</strong></li>
<li><strong>设置有效路径 c.setPath(String uri)</strong></li>
<li><strong>不设置 cookie 信息的存储时间，周期为一次会话，即关闭浏览器后消失</strong></li>
</ul>
</li>
<li><p>响应Cookie信息给客户端</p>
<ul>
<li><p><strong>resp.addCookie(c);</strong></p>
<ul>
<li>Cookie数据获取</li>
<li><strong>获取Cookie信息数组 Cookie[] cks=req.getCookies();</strong></li>
<li><strong>获取Cookie的键 c.getName();</strong></li>
<li><strong>获取Cookie的值 c.getValue();</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="comment">//获取Cookie信息数组</span></span><br><span class="line">			Cookie[] cks=req.getCookies();</span><br><span class="line">			<span class="comment">//遍历数组获取Cookie信息</span></span><br><span class="line">				使用<span class="keyword">for</span>循环遍历即可，示例：</span><br><span class="line"> 					<span class="keyword">if</span>(cks!=<span class="keyword">null</span>)&#123;</span><br><span class="line">						<span class="keyword">for</span>(Cookie c:cks)&#123;</span><br><span class="line">							String name=c.getName();</span><br><span class="line">							String value=c.getValue();</span><br><span class="line">							System.out.println(name+<span class="string">":"</span>+value);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<ul>
<li>特点<ul>
<li><strong>适合少量数据</strong></li>
<li><strong>键值对</strong></li>
<li><strong>不安全</strong></li>
<li><strong>浏览器端的数据存储技术。</strong></li>
<li><strong>存储的数据声明在服务器端。</strong></li>
<li><strong>临时存储:存储在浏览器的运行内存中，浏览器关闭即失效。</strong></li>
<li><strong>定时存储:设置了Cookie的有效期，存储在客户端的硬盘中，在有效期内符合路径要求的请求都会附带该信息。</strong></li>
<li><strong>默认cookie信息存储好之后，每次请求都会附带，除非设置有效路径</strong></li>
</ul>
</li>
</ul>
<p><strong>注意:一个Cookie对象存储一条数据。多条数据，可以多创建几个Cookie对象进行存储。</strong></p>
<p><strong>总结：Cookie 技术解决了不同请求发送之间的数据共享问题。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//设置请求编码格式</span></span><br><span class="line">		req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">		<span class="comment">//设置响应编码格式</span></span><br><span class="line">		resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">		<span class="comment">//获取请求信息</span></span><br><span class="line">		<span class="comment">//处理请求信息</span></span><br><span class="line">		<span class="comment">//响应处理结果</span></span><br><span class="line">			<span class="comment">//使用Cookie进行浏览器的数据存储</span></span><br><span class="line">			<span class="comment">//创建Cookie对象</span></span><br><span class="line">			Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"mouse"</span>, <span class="string">"thinkpad"</span>);</span><br><span class="line">			Cookie c2 = <span class="keyword">new</span> Cookie(<span class="string">"key"</span>, <span class="string">"kylin"</span>);</span><br><span class="line">			<span class="comment">//设值Cookie</span></span><br><span class="line">				<span class="comment">//设置Cookie的有效期</span></span><br><span class="line">				c2.setMaxAge(<span class="number">3</span>*<span class="number">24</span>*<span class="number">3600</span>);</span><br><span class="line">				<span class="comment">//设值有效路径</span></span><br><span class="line">				c2.setPath(<span class="string">"/cookie/abc"</span>);</span><br><span class="line">			<span class="comment">//响应Cookie信息</span></span><br><span class="line">			resp.addCookie(c);</span><br><span class="line">			resp.addCookie(c2);</span><br><span class="line">			<span class="comment">//直接响应</span></span><br><span class="line">			resp.getWriter().write(<span class="string">"Cookie学习"</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//获取Cookie信息数组</span></span><br><span class="line">			 Cookie[] cks=req.getCookies();</span><br><span class="line">			 <span class="comment">//遍历数组获取Cookie信息</span></span><br><span class="line">			 <span class="keyword">if</span>(cks!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">for</span>(Cookie cs:cks)&#123;</span><br><span class="line">					String name=cs.getName();</span><br><span class="line">					String value=cs.getValue();</span><br><span class="line">					System.out.println(name+<span class="string">":"</span>+value);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">			<span class="comment">//请求转发</span></span><br><span class="line">			<span class="comment">//重定向</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>基础</tag>
        <tag>servlet</tag>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet基础-5</title>
    <url>/370.html</url>
    <content><![CDATA[<p><strong>问题：服务器在接收到浏览器的请求后，仅仅使用一个 Servlet进行请求处理，会造成不同的Servlet逻辑代码冗余，Servlet的职责不明确。</strong></p>
<p><strong>解决：使用请求转发。</strong></p>
<p><strong>特点：一次请求地址栏信息不改变。</strong></p>
<a id="more"></a>
<h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><ul>
<li><strong>作用:实现多个servlet联动操作处理请求，这样避免代码冗余，让servlet的职责更加明确。</strong></li>
<li>使用<ul>
<li>req.getRequestDispatcher(“要转发的地址”).forward(req, resp);<ul>
<li>地址：相对路径，直接书写servlet的别名即可。</li>
</ul>
</li>
</ul>
</li>
<li>特点:一次请求，浏览器地址栏信息不改变。</li>
<li><strong>注意：请求转发后直接return结束即可。</strong></li>
</ul>
<h2 id="Request对象作用域"><a href="#Request对象作用域" class="headerlink" title="Request对象作用域"></a>Request对象作用域</h2><p>问题：使用请求转发后，不同的 Servlet 之间怎么进行数据的共享呢？或者说数据怎么从一个servlet流转给另外一个 Servlet 呢？</p>
<p>解决：使用request对象的作用域</p>
<p><strong>使用：request.setAttribute(objectname,Objectvalue);request.getAttribute(Objectobj)</strong></p>
<p><strong>作用：解决了一次请求内的不同 Servlet 的数据(请求数据+其他数据)共享问题。</strong></p>
<p>作用域：基于请求转发，一次请求中的所有 Servlet 共享。</p>
<p><strong>注意：使用 Request 对象进行数据流转，数据只在一次请求内有效。</strong></p>
<ul>
<li>特点：<ul>
<li>服务器创建</li>
<li>每次请求都会创建</li>
<li>生命周期一次请求</li>
</ul>
</li>
</ul>
<p><strong>问题：如果当前的请求，Servlet 无法进行处理怎么办?如果使用请求转发，造成表单数据重复提交怎么办？</strong></p>
<p><strong>解决：使用重定向</strong></p>
<p><strong>使用：response.sendRedirect(“路径”).</strong>本地路径为：uri  网络路径为：定向资源的 URL 信息</p>
<p><strong>特点：两次请求,浏览器地址栏信息改变,避免表单重复提交</strong></p>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p><strong>解决了表单重复提交的问题，以及当前servlet无法处理的请求的问题。</strong></p>
<ul>
<li><strong>使用:resp.sendRedirect(String uri);</strong></li>
<li><strong>示例:resp.sendRedirect(“/login/main”);</strong></li>
<li>特点：<ul>
<li><strong>两次请求，两个request对象。</strong></li>
<li><strong>浏览器地址栏信息改变</strong></li>
</ul>
</li>
<li>时机：<ul>
<li><strong>如果请求中有表单数据，而数据又比较重要，不能重复提交，建议使用重定向。</strong></li>
<li><strong>如果请求被Servlet接收后，无法进行处理，建议使用重定向定位到可以处理的资源。</strong>    </li>
</ul>
</li>
<li><strong>注意：两次请求，第一个请求里面的数据则不能被第二次请求获取，则需要使用到session，学习session，则又要先学cookie</strong></li>
</ul>
]]></content>
      <tags>
        <tag>servlet</tag>
        <tag>请求转发</tag>
        <tag>重定向</tag>
        <tag>request对象作用域</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet基础-4</title>
    <url>/49587.html</url>
    <content><![CDATA[<p>通过前面的学习我们能够创建并运行一个简单的Servlet 程序，完成浏览器和服务器的简单交互，但是我们编写的 <strong>Servlet代码是没有对浏览器的请求进行处理的。</strong>现在我们开始学习 如何使用Servlet进行浏览器请求的处理。 </p>
<a id="more"></a>

<h2 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h2><p>问题： 浏览器发起请求到服务器，会遵循HTTP协议将请求数据发送给服务器。 那么服务器接受到请求的数据改怎么存储呢?不但要存，而且要保证完成性。 </p>
<p><strong>解决： 使用对象进行存储，服务器每接受一个请求，就创建一个对象专门的存 储此次请求的请求数据。</strong></p>
<p>实现： request对象 </p>
<p><strong>解释： 服务器接收到浏览器的请求后，会创建一个Request对象，对象中 存储了此次请求相关的请求数据。服务器在调用Servlet时会将创建的 Request对象作为实参传递给Servlet的方法，比如：service方法。</strong></p>
<ul>
<li>使用<ul>
<li>获取请求头数据 <ul>
<li>获取请求方式：String method = req.getMethod();</li>
<li>获取请求URL：StringBuffer url = req.getRequestURL();</li>
<li>获取请求URI：String uri = req.getRequestURI();</li>
<li>获取协议：String h = req.getScheme();</li>
</ul>
</li>
<li>获取请求行数据 <ul>
<li>获取指定的请求信息：String value =req.getHeader(“aaa”);</li>
<li>获取所有请求行的键的枚举<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enumeration e = req.getHeaderNames();</span><br><span class="line"><span class="keyword">while</span> (e.hasMoreElements()) &#123;</span><br><span class="line">	String name = (String) e.nextElement();</span><br><span class="line">	String value2 = req.getHeader(name);</span><br><span class="line">	System.out.println(name+<span class="string">":"</span>+value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><strong>获取用户数据(get和post请求都可以，不能获取同键不同值多项数据的全部值)</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = req.getParameter(<span class="string">"uname"</span>);</span><br><span class="line">String pwd = req.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line">String [] favs = req.getParameterValues(<span class="string">"fav"</span>);</span><br><span class="line">System.out.println(name+<span class="string">":"</span>+pwd);</span><br><span class="line"><span class="comment">//避免当fav不存在的时候，请求fav的值造成空指针异常</span></span><br><span class="line"><span class="keyword">if</span> (favs!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (String fav : favs) &#123;</span><br><span class="line">		System.out.print(fav);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><p><strong>问题： 在使用Request对象获取了请求数据并进行处理后，处理的结果如何显 示到浏览器中呢？</strong> </p>
<p>解决： 使用Response对象 </p>
<p><strong>解释： 服务器在调用指定的Servlet进行请求处理的时候，会给Servlet的方 法传递两个实参request和response。其中request中封存了请求相关的请求数据，而response则是用来进行响应的一个对象.</strong></p>
<ul>
<li>使用：<ul>
<li>设置响应头<ul>
<li><strong>setHeader(String name,String value);—–在响应头中添加响应信息，但是同键会覆盖</strong></li>
<li><strong>addHeader(String name,String value);—–在响应头中添加响应信息，但是不会覆盖。</strong></li>
</ul>
</li>
<li>设置响应状态<ul>
<li>sendError(int num,String msg);—–自定义响应状态码。<ul>
<li>设置响应实体</li>
</ul>
</li>
<li><strong>resp.getWrite().write(String str);响应具体的数据给浏览器</strong><ul>
<li>设置响应编码格式：</li>
</ul>
</li>
<li><strong>resp.setContentType(“text/html;charset=utf-8”);</strong>—-告诉浏览器用html格式来解析服务器响应的数据，并且字符集为utf-8.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="请求乱码问题解决"><a href="#请求乱码问题解决" class="headerlink" title="请求乱码问题解决"></a>请求乱码问题解决</h2><ul>
<li><p><strong>使用String进行重新编码:uname=new String(uname.getBytes(“iso8859-1”),”utf-8”);</strong></p>
</li>
<li><p><strong>Get方式请求： 在service方法中使用: req.setCharacterEncoding(“utf-8”);在tomcat服务器目录下的conf文件下找到server.xml文件，打开进 行如下配置:</strong><br><img src="/img/loading.gif" class="lazyload" data-src="1.png"  alt=""></p>
</li>
<li><p><strong>Post方式请求： 在service方法中使用: req.setCharacterEncoding(“utf-8”);</strong></p>
</li>
</ul>
<h2 id="Servlet的使用流程"><a href="#Servlet的使用流程" class="headerlink" title="Servlet的使用流程"></a>Servlet的使用流程</h2><ul>
<li>设置请求编码格式 </li>
<li>设置响应编码格式 </li>
<li>获取请求信息 </li>
<li>处理请求信息 </li>
<li>响应处理结果 </li>
</ul>
<h2 id="数据流转流程"><a href="#数据流转流程" class="headerlink" title="数据流转流程"></a>数据流转流程</h2><p>浏览器——&gt;服务器——-&gt;数据库 </p>
<p>浏览器&lt;——服务器&lt;——-数据库</p>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>servlet</tag>
        <tag>Request对象</tag>
        <tag>Reponse对象</tag>
        <tag>servlet的使用流程</tag>
        <tag>请求乱码问题解决</tag>
        <tag>数据流转流程</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet基础-3</title>
    <url>/1010.html</url>
    <content><![CDATA[<p>通过学习Servlet的生命周期，了解了Servlet从启动调 用到销毁的过程。那么这节课我们学习当浏览器的请求来了之后， 应该调用什么方法执行，难道只有service方法吗? </p>
<a id="more"></a>
<h2 id="Service和doGet和doPost方法的区别"><a href="#Service和doGet和doPost方法的区别" class="headerlink" title="Service和doGet和doPost方法的区别"></a>Service和doGet和doPost方法的区别</h2><p><strong>Service方法: 不管是get方式还是post方式的请求，如果Servlet类中有 service方法，则优先调用Service方法。</strong></p>
<p><strong>doGet方法: 在没有service方法的情况下如果是get方式的请求所调用的处理请求的方法</strong></p>
<p><strong>doPost方法: 在没有service方法的情况下如果是post方式的请求所调用的处理请求的方法</strong></p>
<p><strong>注意：如果在覆写的service方法中调用了父类的service方法(super.service(req, resp)),则service方法处理完后，会再次根据请求方式响应的doGet和doPost方法执行。所以，一般情况下我们是不在覆写的service中调用父类的service方法的，避免出现405错误。</strong></p>
<h2 id="Servlet的常见错误"><a href="#Servlet的常见错误" class="headerlink" title="Servlet的常见错误"></a>Servlet的常见错误</h2><ul>
<li><strong>404错误:资源未找到</strong><ul>
<li><strong>原因一：在请求地址中的servlet的别名书写错误。</strong></li>
<li><strong>原因二：虚拟项目名称拼写错误</strong></li>
</ul>
</li>
<li><strong>500错误：内部服务器错误</strong><ul>
<li>错误一:java.lang.ClassNotFoundException:com.bjsxt.servlet.ServletMothod<ul>
<li><strong>解决：在web.xml中校验servlet类的全限定路径是否拼写错误。</strong></li>
</ul>
</li>
<li>错误二：<ul>
<li><strong>因为service方法体的代码执行错误导致</strong></li>
</ul>
</li>
<li>解决：根据错误提示对service方法体中的代码进行错误更改。</li>
</ul>
</li>
<li><strong>405错误:请求方式不支持</strong><ul>
<li>原因：请求方式和servlet中的方法不匹配所造成的。</li>
<li><strong>解决：尽量使用service方法进行请求处理，并且不要再service方法中调用父类的service。</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletMethod</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i=<span class="number">5</span>/<span class="number">0</span>;</span><br><span class="line">		System.out.println(<span class="string">"我是service"</span>);</span><br><span class="line">		<span class="keyword">super</span>.service(req, resp);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我是doGet方法"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我是doPost方法"</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>servlet</tag>
        <tag>service方法</tag>
        <tag>doGet方法</tag>
        <tag>doPost方法</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet基础-2</title>
    <url>/49971.html</url>
    <content><![CDATA[<h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><p><strong>从第一次调用，到服务器关闭。期间如果删除加载好的servlet，依然能正常使用。因为，servlet已经加载到了tomcat服务器中。此时如果关闭掉服务器重启服务器，则不能使用删除掉的servelt，tomcat无法找到此servlet并将其加载到服务器中。</strong></p>
<p><strong>如果在web.xml 中配置了load-on-startup则是从服务器开启到服务器关闭(只是调用servlet的init()方法)。。</strong></p>
<a id="more"></a>

<h2 id="Servlet的方法"><a href="#Servlet的方法" class="headerlink" title="Servlet的方法"></a>Servlet的方法</h2><ul>
<li><strong>service()是真正处理请求的方法</strong></li>
<li><strong>init()是对Servlet进行初始化的一个方法，会在Servlet第一次加载进行存储时执行</strong></li>
<li><strong>destory()是在servlet被销毁时执行，也就服务器关闭时。</strong></li>
</ul>
<h2 id="web-xml中servlet配置load-on-startup的作用"><a href="#web-xml中servlet配置load-on-startup的作用" class="headerlink" title="web.xml中servlet配置load-on-startup的作用"></a>web.xml中servlet配置load-on-startup的作用</h2><p><strong>在servlet的配置当中，1的含义是：标记容器是否在启动的时候就加载这个servlet。</strong></p>
<p><strong>当值为0或者大于0时，表示容器在应用启动时就加载这个servlet；</strong></p>
<p><strong>当是一个负数时或者没有指定时，则指示容器在该servlet被选择时才加载。（相当于没写，没使用load-on-startup，此时servlet的生命周期没有发生改变）</strong></p>
<p><strong>正数的值越小，启动该servlet的优先级越高。</strong></p>
<p>如果我们在web.xml中设置了<strong>多个servlet</strong>的时候，<strong>可以使用load-on-startup来指定servlet的加载顺序，服务器会根据load-on-startup的大小依次对servlet进行初始化。不过即使我们将load-on-startup设置重复也不会出现异常，服务器会自己决定初始化顺序。</strong></p>
<p><strong>配置load-on-startup后，servlet在startup后立即加载，但只是调用servlet的init()方法，用以初始化该servlet相关的资源。初始化成功后，该servlet可响应web请求；</strong></p>
<p><strong>如未配置load-on-startup，容器一般在第一次响应web请求时，会先检测该servlet是否初始化，如未初始化，则调用servlet的init()先初始化，初始化成功后，再响应请求。</strong></p>
<p>PS：一般我们在开发web应用时，都会配置这个参数，有两个好处：</p>
<ul>
<li>1、如果初始化过程失败，则容器会提示启动失败，此时我们能够提前知道相关错误；</li>
<li>2、配置该参数相当于将初始化servlet的工作转移到容器启动过程，使得容器只要启动成功后，就可立即响应web请求。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kylin.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * * Servlet的生命周期：</span></span><br><span class="line"><span class="comment"> * 1、从第一次调用到服务器关闭。</span></span><br><span class="line"><span class="comment"> * 2、如果Servlet在web.xml中配置了load-on-startup，生命周期为 从服务器启动到服务器关闭 </span></span><br><span class="line"><span class="comment"> * 注意： </span></span><br><span class="line"><span class="comment"> * 		init方法是对Servlet进行初始化的一个方法，会在Servlet第一次 加载进行存储时执行 </span></span><br><span class="line"><span class="comment"> * 		destory方法是在servlet被销毁时执行，也就服务器关闭时。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kylin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletLife</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//初始化方法，在servlet第一次加载内容的时候被调用</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"servlet初始化完成"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//service方法，真正处理请求的方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		resp.getWriter().write(<span class="string">"servlet life"</span>);</span><br><span class="line">		System.out.println(<span class="string">"servlet life"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"我被销毁了！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405120833.png"  alt=""></li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>servlet</tag>
        <tag>Servlet的生命周期</tag>
        <tag>load-on-startup的作用</tag>
        <tag>Servlet的方法</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet基础-1</title>
    <url>/49779.html</url>
    <content><![CDATA[<h2 id="Servlet有什么用？"><a href="#Servlet有什么用？" class="headerlink" title="Servlet有什么用？"></a>Servlet有什么用？</h2><ul>
<li><strong>问题：服务器在接收到浏览器的请求后，会自动调用对应的逻辑代码进行请求 处理。但是逻辑代码是由程序员编写并放到服务器中，那么服务器怎么知道该怎么调用并调用哪个类和哪个方法来进行请求处理。</strong></li>
<li><strong>解决：程序员在编写代码的时候如果能够按照服务器能够识别的规则进行编写,浏览器按照指定的规则进行发送请求，那么服务器就可以调用并执行响应的逻辑 代码进行请求处理了。举个例子：图书馆借书</strong> </li>
<li><strong>实现： Servlet技术</strong><a id="more"></a>
<h2 id="Servlet概念"><a href="#Servlet概念" class="headerlink" title="Servlet概念"></a>Servlet概念</h2></li>
<li>概念： 狭义的 Servlet 是指 Java 语言实现的一个接口，广义的 Servlet 是指 任何实现了这个 Servlet 接口的类，一般情况下，人们将 Servlet 理解为后者。 Servlet 运行于支持 Java 的应用服务器中。从原理上讲，Servlet 可以响应任何 类型的请求，但绝大多数情况下 Servlet 只用来扩展基于 HTTP 协议的Web服务器 </li>
<li>特点： 运行在支持java的应用服务器上 Servlet的实现遵循了服务器能够识别的规则，也就是服务器会自动的根据请求调用对应的servlet进行请求处理。简单方便，可移植性强 </li>
<li>使用： <ul>
<li>1、 <strong>创建普通的java 类并继承HttpServlet</strong></li>
<li>2、 <strong>覆写service方法</strong></li>
<li>3、 <strong>在service方法中书写逻辑代码即可</strong></li>
<li>4、 <strong>在webRoot下的WEB-INF文件夹下的web.xml 文件中配置servlet(web3.0可以使用注解)</strong></li>
</ul>
</li>
<li>运行流程: <ul>
<li>url：<a href="http://localhost:8080/project/my2" target="_blank" rel="noopener">http://localhost:8080/project/my2</a> </li>
<li><strong>组成: 服务器地址:端口号/虚拟项目名 /servlet的别名</strong></li>
<li><strong>URI：虚拟项目名 /servlet的别名</strong></li>
<li><strong>浏览器发送请求到服务器，服务器根据请求URL地址中的URI信息在webapps目录下找到对应的项目文件夹，然后在web.xml中检索对应的servlet，找到后调用并执行 Servlet。</strong></li>
</ul>
</li>
</ul>
<h2 id="web-xml配置servlet"><a href="#web-xml配置servlet" class="headerlink" title="web.xml配置servlet"></a>web.xml配置servlet</h2><ul>
<li>配置一个servlet首先创建一对&lt;-servlet&gt;标签，在标签中创建&lt;-servlet-name&gt;标签，属性值为的要给servlet别名,在创建一对&lt;-servlet-class&gt;标签，属性值为此servlet的全限定路径（包名+类名），创建好后最好点击一下，看能否进入到我们所想要的servelt类中。</li>
<li>接着创建一个于&lt;-servlet&gt;标签同级的&lt;-servlet-mapping&gt;标签，在标签中创建一个&lt;-serlet-name&gt;标签，**注意给标签属性值必须要与上个&lt;-servlet&gt;标签中的&lt;-servlet-name&gt;中的属性一致。然后创建一个&lt;-url-pattern&gt;标签，标签属性值为你要给此servlet取的别名。<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405120910.png"  alt=""></li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>servlet</tag>
        <tag>servlet配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat服务器介绍和使用</title>
    <url>/55054.html</url>
    <content><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405121023.jpeg"  alt=""></p>
<h2 id="服务器的概念和作用"><a href="#服务器的概念和作用" class="headerlink" title="服务器的概念和作用"></a>服务器的概念和作用</h2><ul>
<li>问题： <strong>学习了java编程之后，java代码的一个很重要的作用就是进行数据的 处理，但是目前来说我们运行编写的代码，只有一次性，也就是运行完毕后，如果需要再次运行则需要再次手动启动代码的执行。但是我们无法提前用户会何时 发送请求，也就无法决定我们编写的java代码应该什么时候启动运行。而且手动运行也变得不现实。</strong></li>
<li>解决： 那么根据java的网络编内容，我们是不是可以使用代码编写一个容器 (对象) 呢？，<strong>该容器可以根据用户的请求来启动并运行我们编写的数据逻辑代码</strong>。答案是可以的。</li>
<li>实现：服务器</li>
<li>解释：<strong>所谓服务器其实就是代码编写的一个可以根据用户请求实时的调用执行对应的逻辑代码的一个容器。在普通用户看来就是一个安装程序。我们只需要将服务器在操作系统上进行安装，并将我们事先编写好的逻辑处理代码根据规则放到服务器的指定位置，启动服务器，那么服务器就自动的会根据接收到请求调用并执行对象的逻辑代码进行处理</strong><a id="more"></a>
<h2 id="Tomcat服务的下载和安装："><a href="#Tomcat服务的下载和安装：" class="headerlink" title="Tomcat服务的下载和安装："></a>Tomcat服务的下载和安装：</h2></li>
<li>下载地址： <a href="https://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-70.cgi</a></li>
<li>下载选项<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405121003.png"  alt=""></li>
<li>安装：下载成功后会为压缩包文件，解压即可使用</li>
<li><strong>注意：尽量不要解压在中文目录中,以防出现不可控问题</strong></li>
<li>目录结构介绍：<ul>
<li><strong>\bin 存放启动和关闭Tomcat的可执行文件</strong></li>
<li><strong>\conf 存放Tomcat的配置文件</strong></li>
<li>\lib 存放库文件 </li>
<li>\logs 存放日志文件 </li>
<li>\temp 存放临时文件 </li>
<li><strong>\webapps 存放web应用</strong></li>
<li><strong>\work 存放JSP转换后的Servlet文件</strong></li>
</ul>
</li>
<li>校验安装： <strong>打开bin目录，然后双击执行startup.bat文件，打开浏览器在地 址栏中输入 localhost：8080/ 如果出现tomcat广告页安装成功</strong></li>
</ul>
<h2 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h2><p>tomcat的运行依赖JDK，必须配置JDK 环境。配置方式 参照： https:/jingyan.baidu.com/article/6dad5075d1dc40a123e36ea3.html </p>
<ul>
<li>闪退，启动闪退问题一般是因为JDK的环境变量配置有问题， 参照1进行重新进行配置，如果还是闪退，使用：<ul>
<li>在 bin\startup.bat 文件中的第一行前面加入：SET JAVA_HOME=JDK 目录 SET CATALINA_HOME=解压后 Tomcat 的目录。这样，运行 startup.bat 就可以正常启动 tomcat 服务器，如果想点击 shutdown.bat 关闭服务器，同样在 shutdown.bat 文件 中加入上面的两行即可</li>
</ul>
</li>
<li>端口号被占用<ul>
<li><strong>表现形式一般为输入localhost:8080显示用登录账户和密码</strong></li>
<li><strong>在tomcat/conf/server.xml文件里找到指定的8080端口号，更改为你能记住的端口号</strong></li>
</ul>
</li>
<li>Tomcat的startup.bat启动号控制台显示乱码<ul>
<li><strong>打开tomcat/conf/logg.ing.properties找到java.util.logging.ConsoleHandler.encoding= urf-8这行。将utf-8更改为GBK。</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>tomcat服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议详解</title>
    <url>/30445.html</url>
    <content><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1571744434330&di=154306d8f951fbfdac11a40b27b22c19&imgtype=jpg&src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D3965913636%2C2647143796%26fm%3D214%26gp%3D0.jpg"  alt=""></p>
<a id="more"></a>
<p>互联网的发展非常迅速，但是万变不离其宗。学习web开发，需要我们对 互联的交互机制有一定的了解。为了更好的理解并掌握Servlet，在正式学习 Servlet之前需要对web开发中客户端和服务器的交互机制以及所涉及的规范 (HTTP)进行学习。</p>
<h2 id="web交互的基本流程"><a href="#web交互的基本流程" class="headerlink" title="web交互的基本流程"></a>web交互的基本流程</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405121751.png"  alt="image-20200405121750009"></p>
<p>客户端根据用户输入的地址信息请求服务器，服务器在接收到用户 的请求后进行处理，然后将处理结果响应给客户端，客户端将响应结果 展示给用户。 </p>
<ul>
<li>专业术语: <ul>
<li><strong>请求：客户端根据用户地址信息将数据发送给服务器的过程</strong></li>
<li><strong>响应：服务器将请求的处理结果发送给浏览器的过程</strong></li>
</ul>
</li>
<li>问题：<ul>
<li>客户端也就是浏览器的版本是有很多的，服务器的版本也是有很多 的，如何实现不同版本的浏览器和不同版本的服务器之间的数据交互 呢？</li>
</ul>
</li>
<li><strong>解决：规范浏览器和服务器的数据交互的格式。</strong></li>
<li><strong>实现：HTTP协议</strong><h2 id="HTTP的概念和介绍"><a href="#HTTP的概念和介绍" class="headerlink" title="HTTP的概念和介绍"></a>HTTP的概念和介绍</h2></li>
<li>概念：<strong>超文本传输协议（Hyper Text Transfer Protocol）</strong></li>
<li>作用：<strong>规范了浏览器和服务器的数据交互</strong></li>
<li>特点：<ul>
<li><strong>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快</strong></li>
<li><strong>灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</strong></li>
<li><strong>无状态：HTTP 协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</strong></li>
<li><strong>支持B/S及C/S模式。</strong></li>
<li><strong>HTTP1.1版本后支持可持续连接，即在某一规定时间内保持连接，若超过规定时间则断开连接。若在规定时间内有数据的请求传输则重新计时，至规定时间内无任何数据传输的条件下断开连接。</strong></li>
</ul>
</li>
</ul>
<h2 id="HTTP的交互流程"><a href="#HTTP的交互流程" class="headerlink" title="HTTP的交互流程"></a>HTTP的交互流程</h2><ul>
<li>HTTP的交互流程一般分为四个步骤(一次完整的请求)： <ul>
<li>步骤一: 客户端和服务器端建立连接 </li>
<li>步骤二： <strong>客户端发送请求数据到服务器端(HTTP协议)</strong></li>
<li>步骤三： <strong>服务器端接收到请求后，进行处理，然后将 处理结果响应客户端(HTTP协议)</strong></li>
<li>步骤四： <strong>关闭客户端和服务器端的连接(HTTP1.1后不会立即关闭)</strong></li>
</ul>
</li>
</ul>
<h2 id="HTTP之URL"><a href="#HTTP之URL" class="headerlink" title="HTTP之URL"></a>HTTP之URL</h2><ul>
<li><p><strong>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息</strong></p>
</li>
<li><p><strong>URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。</strong>以下面这个URL为例，介绍下普通URL的各部分组成：</p>
</li>
</ul>
<p><a href="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name" target="_blank" rel="noopener">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></p>
<ul>
<li><p>从上面的URL可以看出，一个完整的URL包括以下几部分：</p>
<ul>
<li><p>1.协议部分：<strong>该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。</strong>在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。<strong>在”HTTP”后面的“//”为分隔符</strong></p>
</li>
<li><p>2.域名部分：<strong>该URL的域名部分为“<a href="http://www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用" target="_blank" rel="noopener">www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用</a></strong></p>
</li>
<li><p>3.端口部分：<strong>跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</strong></p>
</li>
<li><p>4.虚拟目录部分：<strong>从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”</strong></p>
</li>
<li><p>5.文件名部分：<strong>从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</strong></p>
</li>
<li><p>6.锚部分：<strong>从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</strong></p>
</li>
<li><p>7.参数部分：<strong>从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符</strong></p>
</li>
</ul>
</li>
</ul>
<h2 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h2><p><strong>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</strong><br>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的</p>
<ul>
<li><strong>URI</strong>一般由三部组成：<ul>
<li>①访问资源的命名机制</li>
<li>②存放资源的主机名</li>
<li>③资源自身的名称，由路径表示，着重强调于资源。</li>
</ul>
</li>
</ul>
<p><strong>URL是uniform resource locator，统一资源定位符（统一资源定位器）</strong>，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</p>
<p>URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上，特别是著名的Mosaic。<br>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。</p>
<ul>
<li><strong>URL</strong>一般由三部组成：<ul>
<li>①协议(或称为服务方式)</li>
<li>②存有该资源的主机IP地址(有时也包括端口号)</li>
<li>③主机资源的具体地址。如目录和文件名等</li>
</ul>
</li>
</ul>
<p>URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:<a href="mailto:java-net@java.sun.com">java-net@java.sun.com</a>。</p>
<p><strong>URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。笼统地说，每个 URL 都是 URI，但不一定每个 URI 都是 URL。这是因为 URI 还包括一个子类，即统一资源名称 (URN)，它命名资源但不指定如何定位资源。上面的 mailto、news 和 isbn URI 都是 URN 的示例。</strong></p>
<p>在Java的URI中，一个<strong>URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。</strong><br><strong>在Java类库中，URI类不包含任何访问资源的方法，它唯一的作用就是解析。相反的是，URL类可以打开一个到达资源的流。</strong></p>
<h2 id="HTTP之请求消息Request"><a href="#HTTP之请求消息Request" class="headerlink" title="HTTP之请求消息Request"></a>HTTP之请求消息Request</h2><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：</p>
<p><strong>请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405121821.png"  alt="image-20200405121819208"></p>
<p>请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本。<br>Get请求例子，使用Charles抓取的request：</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405121854.png"  alt="image-20200405121853545"></p>
<ul>
<li>第一部分：<strong>请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.</strong></li>
</ul>
<p><strong>GET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。</strong></p>
<ul>
<li><p>第二部分：<strong>请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等</strong></p>
</li>
<li><p>第三部分：<strong>空行，请求头部后面的空行是必须的即使第四部分的请求数据为空，也必须有空行。</strong></p>
</li>
</ul>
<p>第四部分：<strong>请求数据也叫主体，可以添加任意的其他数据。这个例子的请求数据为空.</strong></p>
<p>POST请求例子，使用Charles抓取的request：</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405121919.png"  alt="image-20200405121918725"></p>
<ul>
<li>第一部分：请求行，第一行明了是post请求，以及http1.1版本。</li>
<li>第二部分：请求头部，第二行至第六行。</li>
<li>第三部分：空行，第七行的空行。</li>
<li>第四部分：请求数据，第八行。</li>
</ul>
<h2 id="HTTP之响应消息Response"><a href="#HTTP之响应消息Response" class="headerlink" title="HTTP之响应消息Response"></a>HTTP之响应消息Response</h2><p>一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。</p>
<p>HTTP响应也由四个部分组成，分别是：<strong>状态行、消息报头、空行和响应正文</strong>。</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405121944.png"  alt="image-20200405121943481"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Date: Fri, 22 May 2009 06:07:21 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;UTF-8</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">      &lt;head&gt;&lt;&#x2F;head&gt;</span><br><span class="line">      &lt;body&gt;</span><br><span class="line">            &lt;!--body goes here--&gt;</span><br><span class="line">      &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第一部分：<strong>状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。</strong></p>
<ul>
<li>第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）</li>
</ul>
</li>
<li><p>第二部分：<strong>消息报头，用来说明客户端要使用的一些附加信息</strong></p>
<ul>
<li>第二行和第三行为消息报头，Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8</li>
</ul>
</li>
<li><p>第三部分：<strong>空行，消息报头后面的空行是必须的</strong></p>
</li>
<li><p>第四部分：<strong>响应正文，服务器返回给客户端的文本信息。空行后面的html部分为响应正文。</strong></p>
</li>
</ul>
<h2 id="HTTP常见响应状态码"><a href="#HTTP常见响应状态码" class="headerlink" title="HTTP常见响应状态码"></a>HTTP常见响应状态码</h2><p>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码 的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405121643.png"  alt=""><br>常见状态码：</p>
<ul>
<li><strong>200 OK ：客户端请求成功</strong></li>
<li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解 </li>
<li>401 Unauthorized：请求未经授权，这个状态代码必须和 WWW-Authenticate 报头域一起使用 </li>
<li>403 Forbidden：服务器收到请求，但是拒绝提供服务 </li>
<li><strong>404 Not Found：请求资源不存在输入了错误的URL</strong></li>
<li><strong>500 Internal Server Error：服务器发生不可预期的错误（一般表现为服务器繁忙~）</strong></li>
<li>503 Server Unavailable：服务器当前不能处理客户端的请求，一段时 间后可能恢复正常</li>
</ul>
<h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><p>根据HTTP标准，HTTP请求可以使用多种请求方法。</p>
<p>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</p>
<p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>
<ul>
<li><p><strong>GET     请求指定的页面信息，并返回实体主体。</strong></p>
</li>
<li><p>HEAD     类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</p>
</li>
<li><p><strong>POST     向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</strong></p>
</li>
<li><p>PUT     从客户端向服务器传送的数据取代指定的文档的内容。</p>
</li>
<li><p>DELETE      请求服务器删除指定的页面。</p>
</li>
<li><p>CONNECT     HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p>
</li>
<li><p>OPTIONS     允许客户端查看服务器的性能。</p>
</li>
<li><p>TRACE     回显服务器收到的请求，主要用于测试或诊断。</p>
</li>
</ul>
<h2 id="GET和POST请求的区别"><a href="#GET和POST请求的区别" class="headerlink" title="GET和POST请求的区别"></a>GET和POST请求的区别</h2><p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息.</p>
<p>GET请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;books&#x2F;?sex&#x3D;man&amp;name&#x3D;Professional HTTP&#x2F;1.1</span><br><span class="line">Host: www.wrox.com</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko&#x2F;20050225 Firefox&#x2F;1.0.1</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">（空行）</span><br></pre></td></tr></table></figure>
<p>POST请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: www.wrox.com</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko&#x2F;20050225 Firefox&#x2F;1.0.1</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 40</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">(空行)</span><br><span class="line">name&#x3D;Professional%20Ajax&amp;publisher&#x3D;Wiley</span><br></pre></td></tr></table></figure>

<p>1、GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&amp;连接；例 如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p>
<p>POST提交：把提交的数据放置在是HTTP包的包体中。上文示例中红色字体标明的就是实际的传输数据</p>
<p>因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变<br>2、传输数据的大小：首先声明：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。</p>
<p>而在实际开发中存在的限制主要有：</p>
<p><strong>GET:特定浏览器和服务器对URL长度有限制，例如 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系 统的支持。因此对于GET提交时，传输数据就会受到URL长度的 限制。</strong></p>
<p><strong>POST:由于不是通过URL传值，理论上数据不受 限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。</strong></p>
<p>3、安全性<br>POST的安全性要比GET的安全性高。比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存；(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击</p>
<p>4、Http get,post,soap协议都是在http上运行的</p>
<p>（1）get：请求参数是作为一个key/value对的序列（查询字符串）附加到URL上的<br>查询字符串的长度受到web浏览器和web服务器的限制（如IE最多支持2048个字符），不适合传输大型数据集同时，它很不安全</p>
<p>（2）post：请求参数是在http标题的一个不同部分（名为entity body）传输的，这一部分用来传输表单信息，因此必须将Content-type设置为:application/x-www-form- urlencoded。post设计用来支持web窗体上的用户字段，其参数也是作为key/value对传输。<br>但是：它不支持复杂数据类型，因为post没有定义传输数据结构的语义和规则。</p>
<p>（3）soap：是http post的一个专用版本，遵循一种特殊的xml消息格式<br>Content-type设置为: text/xml 任何数据都可以xml化。</p>
<ul>
<li><p>我们看看GET和POST的区别</p>
<ul>
<li><p><strong>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456. POST方法是把提交的数据放在HTTP包的Body中.</strong></p>
</li>
<li><p><strong>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</strong></p>
</li>
<li><p>GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。</p>
</li>
<li><p><strong>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</strong></p>
</li>
</ul>
</li>
<li><p>总结：</p>
<ul>
<li>get请求方式： <strong>请求数据会以？的形式隔开拼接在请求头中，不安全，没有请求实 体部分。 HTTP协议虽然没有规定请求数据的大小，但是浏览器对URL的长 度是有限制的，所以get请求不能携带大量的数据。</strong></li>
<li>post请求方式： <strong>请求数据在请求实体中进行发送，在URL中看不到具体的请求数据， 安全。适合数据量大的数据发送。</strong></li>
</ul>
</li>
</ul>
<h2 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h2><p>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p>
<p>以下是 HTTP 请求/响应的步骤：</p>
<p>1、<strong>客户端连接到Web服务器</strong><br>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，<a href="http://www.oakcms.cn。" target="_blank" rel="noopener">http://www.oakcms.cn。</a></p>
<p>2、<strong>发送HTTP请求</strong><br>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</p>
<p>3、<strong>服务器接受请求并返回HTTP响应</strong><br>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。</p>
<p>4、<strong>释放连接TCP连接</strong><br>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</p>
<p>5、<strong>客户端浏览器解析HTML内容</strong><br>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</p>
<p>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</p>
<ul>
<li><p><strong>1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</strong></p>
</li>
<li><p><strong>2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;</strong></p>
</li>
<li><p><strong>3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</strong></p>
</li>
<li><p><strong>4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</strong></p>
</li>
<li><p><strong>5、释放 TCP连接;</strong></p>
</li>
<li><p><strong>6、浏览器将该 html 文本并显示内容;</strong> 　　</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>http协议</tag>
        <tag>get请求</tag>
        <tag>post请求</tag>
        <tag>url</tag>
        <tag>uri</tag>
        <tag>repose</tag>
        <tag>request</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyUI的使用</title>
    <url>/47587.html</url>
    <content><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405122132.png"  alt=""><br>jQuery EasyUI是一组基于jQuery的UI插件集合体，而jQuery EasyUI的目标就是帮助web开发者更轻松的打造出功能丰富并且美观的UI界面。开发者不需要编写复杂的javascript，也不需要对css样式有深入的了解，开发者需要了解的只有一些简单的html标签。简而言之，EasyUI的使用通过查看api文档，想要的样式只需id名和class名一样就可以使用，通过 data-options选择你需要的属性即可。</p>
<h2 id="EasyUI使用"><a href="#EasyUI使用" class="headerlink" title="EasyUI使用"></a>EasyUI使用</h2><ul>
<li><strong>1 将EasyUI提供的js文件和主题（themes）样式存放到项目的指定位置</strong></li>
<li><strong>2 在Html文档中引入EasyUI的插件,引用路径为相对路径</strong></li>
<li><strong>3在HTML文档标签上遵循EasyUI的文档规则使用EasyUI完成页面的开发</strong>    <a id="more"></a></li>
<li>面板使用(panel)：<ul>
<li>创建面板：<ul>
<li>在创建一个div标签，并class属性值为：”easyui-panel”</li>
</ul>
</li>
<li>面板属性:</li>
<li>data-options：给面板添加常用的操作。具体参照API    </li>
<li>添加按钮</li>
<li>信息提示</li>
</ul>
</li>
<li>注意：<ul>
<li>EasyUI的使用<ul>
<li><strong>通过标签的class属性添加基本EasyUI功能，包括样式和jQuery操作</strong></li>
<li><strong>data-options属性对标签的基本功能进行修改操作</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入主题样式--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"themes/default/easyui.css"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入图标样式--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"themes/icon.css"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入jQuery文件--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入EasyUi的js文件--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.easyui.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明css代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">			table&#123;</span><br><span class="line">				margin: auto;</span><br><span class="line">				margin-top: 20px;</span><br><span class="line">			&#125;</span><br><span class="line">			tr&#123;</span><br><span class="line">				height: 40px;</span><br><span class="line">				text-align: center;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">/*校验登录信息*/</span></span></span><br><span class="line"><span class="javascript">				$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">					</span><br><span class="line"><span class="actionscript">					<span class="comment">//登录校验</span></span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#btnCon"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//校验用户信息</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">if</span>($(<span class="string">":text"</span>).val()==<span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//使用EasyUI的信息框进行提示</span></span></span><br><span class="line"><span class="javascript">							$.messager.alert(<span class="string">'登录提示'</span>,<span class="string">"用户名不能为空！"</span>,<span class="string">"warning"</span>);</span></span><br><span class="line"><span class="javascript">						&#125;<span class="keyword">else</span> <span class="keyword">if</span>($(<span class="string">":password"</span>).val()==<span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//使用EasyUI的信息框进行提示</span></span></span><br><span class="line"><span class="javascript">							$.messager.alert(<span class="string">'登录提示'</span>,<span class="string">"密码不能为空！"</span>,<span class="string">"warning"</span>);</span></span><br><span class="line"><span class="actionscript">						&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">							$(<span class="string">"form"</span>).submit();</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;)</span><br><span class="line"><span class="actionscript">					<span class="comment">//重置</span></span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#btnCan"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						$(<span class="string">"form"</span>).get(<span class="number">0</span>).reset();</span></span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"panel_login"</span> <span class="attr">style</span>=<span class="string">"margin: auto;width: 500px;margin-top: 100px;"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--创建登录面板--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"easyui-panel"</span> <span class="attr">title</span>=<span class="string">"登录"</span> <span class="attr">data-options</span>=<span class="string">"iconCls:'icon-mlogin',minimizable:true,maximizable:true</span></span></span><br><span class="line"><span class="tag"><span class="string">				,collapsible:true,closable:true"</span> <span class="attr">style</span>=<span class="string">"width: 500px;height: 200px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"02_main.html"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span>/&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">td</span>&gt;</span>密&amp;nbsp;&amp;nbsp;&amp;nbsp;码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> /&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"btnCon"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span> <span class="attr">data-options</span>=<span class="string">"iconCls:'icon-save'"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp; &amp;nbsp;&amp;nbsp;</span><br><span class="line">								<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"btnCan"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span> <span class="attr">data-options</span>=<span class="string">"iconCls:'icon-cancel'"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405122147.png"  alt=""><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>主页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入主题样式--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"themes/default/easyui.css"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入图标样式--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"themes/icon.css"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入jQuery文件--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入EasyUi的js文件--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.easyui.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			主页面:</span></span><br><span class="line"><span class="comment">				1 引入EasyUI插件</span></span><br><span class="line"><span class="comment">				2 使用body布局方式</span></span><br><span class="line"><span class="comment">				3 将布局后的每块区域完成内容填充</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-id">#sdiv</span> &#123;</span></span><br><span class="line">				text-align: center;</span><br><span class="line">				font-size: 14px;</span><br><span class="line">				font-weight: bold;</span><br><span class="line">				line-height: 30px;</span><br><span class="line">				background-color: gray;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="comment">/*修改头部标题样式*/</span></span></span><br><span class="line">			</span><br><span class="line"><span class="css">			<span class="selector-id">#n_title</span> &#123;</span></span><br><span class="line">				color: white;</span><br><span class="line">				font-size: 14px;</span><br><span class="line">				line-height: 40px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="comment">/*修改标题超链接样式*/</span></span></span><br><span class="line">			</span><br><span class="line"><span class="css">			<span class="selector-id">#n_title</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">				text-decoration: none;</span><br><span class="line">				color: white;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="css">			<span class="selector-id">#n_title</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">				color: orange;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="comment">/*修改密码样式*/</span></span></span><br><span class="line">			</span><br><span class="line"><span class="css">			<span class="selector-id">#div_pwd</span> <span class="selector-tag">table</span> &#123;</span></span><br><span class="line">				margin: auto;</span><br><span class="line">				margin-top: 10px;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="css">			<span class="selector-id">#div_pwd</span> <span class="selector-tag">table</span> <span class="selector-tag">tr</span> &#123;</span></span><br><span class="line">				height: 40px;</span><br><span class="line">				text-align: center;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">/*网页js功能*/</span></span></span><br><span class="line"><span class="javascript">			$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//退出功能</span></span></span><br><span class="line"><span class="javascript">				$(<span class="string">"#n_title_out"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//提示用户是否确定退出</span></span></span><br><span class="line"><span class="javascript">						$.messager.confirm(<span class="string">"确认对话框"</span>, <span class="string">"你真的要退出吗？"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">r</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//退出</span></span></span><br><span class="line"><span class="actionscript">							<span class="keyword">if</span> (r) &#123;</span></span><br><span class="line"><span class="javascript">								<span class="built_in">window</span>.location.href = <span class="string">"01_login.html"</span>;</span></span><br><span class="line">							&#125;</span><br><span class="line">						&#125;)</span><br><span class="line">					&#125;)</span><br><span class="line"><span class="actionscript">					<span class="comment">//修改密码</span></span></span><br><span class="line"><span class="javascript">				$(<span class="string">"#n_title_pwd"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//打开修改密码窗口</span></span></span><br><span class="line"><span class="javascript">						$(<span class="string">"#div_pwd"</span>).window(<span class="string">"open"</span>);</span></span><br><span class="line">				&#125;)</span><br><span class="line"><span class="actionscript">			<span class="comment">//确认修改密码</span></span></span><br><span class="line"><span class="javascript">				$(<span class="string">"#btnCon"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//校验原有密码</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">if</span> ($(<span class="string">":password:eq(0)"</span>).val() == <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="javascript">						$.messager.alert(<span class="string">"原有密码"</span>, <span class="string">"原有密码不能为空！"</span>, <span class="string">"warning"</span>);</span></span><br><span class="line"><span class="javascript">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($(<span class="string">":password:eq(1)"</span>).val() == <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//校验新密码</span></span></span><br><span class="line"><span class="javascript">						$.messager.alert(<span class="string">"新密码"</span>, <span class="string">"新密码不能为空！"</span>, <span class="string">"warning"</span>);</span></span><br><span class="line"><span class="javascript">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($(<span class="string">":password:eq(2)"</span>).val() == <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//校验确认密码</span></span></span><br><span class="line"><span class="javascript">						$.messager.alert(<span class="string">"确认密码"</span>, <span class="string">"确认密码不能为空！"</span>, <span class="string">"warning"</span>);</span></span><br><span class="line"><span class="javascript">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($(<span class="string">":password:eq(1)"</span>).val() != $(<span class="string">":password:eq(2)"</span>).val()) &#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//校验两次密码</span></span></span><br><span class="line"><span class="javascript">						$.messager.alert(<span class="string">"密码校验"</span>, <span class="string">"两次密码不一致！"</span>, <span class="string">"error"</span>);</span></span><br><span class="line"><span class="actionscript">					&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//关闭密码窗口</span></span></span><br><span class="line"><span class="javascript">						$(<span class="string">"#div_pwd"</span>).window(<span class="string">"close"</span>);</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//$.messager.alert("密码修改","密码修改成功！","info");</span></span></span><br><span class="line"><span class="javascript">						$.messager.show(&#123;</span></span><br><span class="line"><span class="actionscript">							title: <span class="string">'密码修改'</span>,</span></span><br><span class="line"><span class="javascript">							msg: <span class="string">'密码修改成功，新密码为:'</span>+$(<span class="string">":password:eq(2)"</span>).val(),</span></span><br><span class="line">							timeout: 3000,</span><br><span class="line"><span class="actionscript">							showType: <span class="string">'slide'</span></span></span><br><span class="line">						&#125;);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line"><span class="actionscript">			<span class="comment">//取消密码修改</span></span></span><br><span class="line"><span class="javascript">				$(<span class="string">"#btnCan"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#div_pwd"</span>).window(<span class="string">"close"</span>);</span></span><br><span class="line">				&#125;)</span><br><span class="line"><span class="actionscript">			<span class="comment">//树状菜单和选项卡的联动</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//给菜单添加单击事件</span></span></span><br><span class="line"><span class="javascript">				$(<span class="string">"#treeMenu"</span>).tree(&#123;</span></span><br><span class="line"><span class="actionscript">					onClick:<span class="function"><span class="keyword">function</span><span class="params">(node)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//控制台打印node内容</span></span></span><br><span class="line"><span class="actionscript">							<span class="comment">//console.log(node);</span></span></span><br><span class="line"><span class="actionscript">						<span class="comment">//获取attributes属性,判断是菜单还是菜单描述</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">var</span> attrs=node.attributes;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">if</span>(attrs==<span class="literal">null</span> || attrs.url==<span class="string">''</span>)&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">return</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line"><span class="actionscript">						<span class="comment">//判断选项卡是否存在</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> has=$(<span class="string">"#div_tabs"</span>).tabs(<span class="string">"exists"</span>,node.text);</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">if</span>(has)&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//选中存在的选项卡</span></span></span><br><span class="line"><span class="javascript">							$(<span class="string">"#div_tabs"</span>).tabs(<span class="string">"select"</span>,node.text);</span></span><br><span class="line"><span class="actionscript">						&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//创建新的选项卡面板</span></span></span><br><span class="line"><span class="javascript">							$(<span class="string">"#div_tabs"</span>).tabs(<span class="string">"add"</span>,&#123;</span></span><br><span class="line">								title:node.text,</span><br><span class="line"><span class="actionscript">								closable:<span class="literal">true</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">								content:"<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"+attrs.url+"</span> <span class="attr">style</span>=<span class="string">'width:100%;height:98%'</span> <span class="attr">frameborder</span>=<span class="string">'0'</span>/&gt;</span>"</span></span></span><br><span class="line">							&#125;)</span><br><span class="line">						&#125;</span><br><span class="line">						</span><br><span class="line">						</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">			&#125;)</span><br><span class="line">			/*</span><br><span class="line">			 	Json数据格式</span><br><span class="line"><span class="actionscript">			 		&#123;<span class="string">"键名"</span>:<span class="string">"值"</span>,<span class="string">"键名"</span>:<span class="string">"值"</span>,...........&#125;</span></span><br><span class="line">			 		</span><br><span class="line">			 		&#123;</span><br><span class="line"><span class="actionscript">			 			<span class="string">"键名"</span>:<span class="string">"值"</span>,</span></span><br><span class="line"><span class="actionscript">			 			<span class="string">"键名"</span>:<span class="string">"值"</span>,</span></span><br><span class="line">			 			...........</span><br><span class="line">			 		&#125;</span><br><span class="line">			 * </span><br><span class="line">			 * </span><br><span class="line">			 * */</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"easyui-layout"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--布局：北--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"region:'north'"</span> <span class="attr">style</span>=<span class="string">"height: 50%;background-image: url(img/layout-browser-hd-bg.gif);"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--添加网站Logo--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"n_logo"</span> <span class="attr">style</span>=<span class="string">"margin-left: 20px;"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/blocks.gif"</span> <span class="attr">width</span>=<span class="string">"35px"</span> <span class="attr">style</span>=<span class="string">"margin-top: 5px;"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"white"</span> <span class="attr">size</span>=<span class="string">"4px"</span>&gt;</span>506班级管理系统<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"n_title"</span> <span class="attr">style</span>=<span class="string">"float: right;"</span>&gt;</span></span><br><span class="line">				欢迎 admin登录&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"n_title_pwd"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|</span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"n_title_out"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--布局：南--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sdiv"</span> <span class="attr">data-options</span>=<span class="string">"region:'south',border:false"</span> <span class="attr">style</span>=<span class="string">"height:35%;"</span>&gt;</span></span><br><span class="line">			&amp;copy;2008-2018 506班级网站,仿冒必纠</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--布局：西--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"region:'west',title:'系统菜单',split:true"</span> <span class="attr">style</span>=<span class="string">"width: 200px;"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--分类效果实现--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"easyui-accordion"</span> <span class="attr">data-options</span>=<span class="string">"fit:true,border:false"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">title</span>=<span class="string">"常用网站"</span> &gt;</span></span><br><span class="line">					<span class="comment">&lt;!--创建菜单--&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"treeMenu"</span> <span class="attr">class</span>=<span class="string">"easyui-tree"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">span</span>&gt;</span>购物网站<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">							<span class="comment">&lt;!--二级--&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-options</span>=<span class="string">"attributes:&#123;url:'http://www.taobao.com'&#125;"</span>&gt;</span>淘宝网<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-options</span>=<span class="string">"attributes:&#123;url:'http://www.jd.com'&#125;"</span>&gt;</span>京东网<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-options</span>=<span class="string">"attributes:&#123;url:'http://www.suning.com'&#125;"</span>&gt;</span>苏宁易购<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">span</span>&gt;</span>学习网站<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-options</span>=<span class="string">"attributes:&#123;url:'http://www.bjsxt.com'&#125;"</span>&gt;</span>北京尚学堂<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-options</span>=<span class="string">"attributes:&#123;url:'http://www.baidu.com'&#125;"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span> <span class="attr">data-options</span>=<span class="string">"attributes:&#123;url:'http://www.so.com'&#125;"</span>&gt;</span>360搜索<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">span</span>&gt;</span>娱乐网站<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span>&gt;</span>斗鱼<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span>&gt;</span>虎牙<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">li</span>&gt;</span>熊猫<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">title</span>=<span class="string">"个人收藏"</span>&gt;</span></span><br><span class="line">					菜单二</span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">title</span>=<span class="string">"系统信息"</span>&gt;</span></span><br><span class="line">					菜单三</span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--布局：中间--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"region:'center'"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--选项卡使用--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div_tabs"</span> <span class="attr">class</span>=<span class="string">"easyui-tabs"</span> <span class="attr">data-options</span>=<span class="string">"fit:true,border:false"</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!--首页--&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">title</span>=<span class="string">"首页"</span> <span class="attr">style</span>=<span class="string">"background-image:url(img/body.jpg) ;background-size: cover;"</span>&gt;</span></span><br><span class="line">					</span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--创建修改密码窗口--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div_pwd"</span> <span class="attr">class</span>=<span class="string">"easyui-window"</span> <span class="attr">title</span>=<span class="string">"修改密码"</span> <span class="attr">style</span>=<span class="string">"width: 400px;height: 250px;"</span> <span class="attr">data-options</span>=<span class="string">"collapsible:false,minimizable:false,maximizable:false,closed:true,modal:true"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>原有密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>新密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span> <span class="attr">data-options</span>=<span class="string">"iconCls:'icon-save'"</span>&gt;</span>确认修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"btnCan"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span> <span class="attr">data-options</span>=<span class="string">"iconCls:'icon-cancel'"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405122211.gif"  alt=""></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>EasyUI</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery基础-6</title>
    <url>/14007.html</url>
    <content><![CDATA[<h2 id="jQuery学习的内容"><a href="#jQuery学习的内容" class="headerlink" title="jQuery学习的内容"></a>jQuery学习的内容</h2><ul>
<li>1、jQuery的封装原理（闭包，匿名自调用）</li>
<li>2、jQuery的选择器</li>
<li>3、jQuery操作元素的属性、内容、样式、文档结构</li>
<li>4、jQuery中的事件</li>
<li>5、jQuery中的动画</li>
<li><strong>注意：一定不要二合一操作（原生js操作和JQuery混合使用）</strong></li>
<li>前端<ul>
<li>js、jQuery是动态的脚本语言，用来操作HTML的，让网页和用户之间互动</li>
<li>HTML用来格式化展示信息</li>
<li>CSS用来增加网页样式</li>
<li>都是由浏览器解析执行的</li>
</ul>
</li>
<li>注意：<ul>
<li><strong>所有的网页都是存储在服务器端，运行在浏览器端。</strong></li>
<li><strong>所有的网页都是服务器实时的根据请求发送给浏览器执行的。</strong></li>
<li><strong>所有的网页数据可以实现动态的拼接。</strong><a id="more"></a>

</li>
</ul>
</li>
</ul>
<h2 id="JQuery操作checkbox"><a href="#JQuery操作checkbox" class="headerlink" title="JQuery操作checkbox"></a>JQuery操作checkbox</h2><ul>
<li>操作checkbox的选择状态使用prop()方法<ul>
<li><strong>prop(“checked”)—–返回选择的状态，选择返回true,未选返回false</strong></li>
<li><strong>prop(“checked”,true)—–置为选择状态</strong></li>
<li><strong>prop(“checked”,false)—–置为未选状态</strong></li>
</ul>
</li>
<li>使用each进行遍历<ul>
<li>对象名.each(fn)—–在遍历的时候会给每个对象默认执行fn函数。this表示js对象</li>
<li><strong>$(this)表示jQuery对象</strong></li>
<li><strong>parents(“标签名”)—–获取指定的上级元素对象</strong><ul>
<li><strong>parents() 方法返回被选元素的所有祖先元素。通过参数获取指定上级元素</strong></li>
</ul>
</li>
<li>parent()<ul>
<li><strong>parent() - 返回被选元素的直接父元素</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery操作表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			1、jquery操作checkbox</span></span><br><span class="line"><span class="comment">				操作checkbox的选择状态使用prop()方法</span></span><br><span class="line"><span class="comment">					prop("checked")//返回选择的状态，选择返回true,未选返回false</span></span><br><span class="line"><span class="comment">					prop("checked",true)//置为选择状态</span></span><br><span class="line"><span class="comment">					prop("checked",false)//置为未选状态</span></span><br><span class="line"><span class="comment">				使用each进行遍历</span></span><br><span class="line"><span class="comment">					对象名.each(fn)//在遍历的时候会给每个对象默认执行fn函数</span></span><br><span class="line"><span class="comment">					this表示js对象</span></span><br><span class="line"><span class="comment">					$(this)表示jQuery对象</span></span><br><span class="line"><span class="comment">				parents("标签名")//获取指定的上级元素对象</span></span><br><span class="line"><span class="comment">				parent()</span></span><br><span class="line"><span class="comment">			2、jQuery操作表格</span></span><br><span class="line"><span class="comment">		--&gt;</span>		</span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.9.1.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//实现全选</span></span></span><br><span class="line"><span class="javascript">				$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//给按钮绑定单击事件</span></span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//实现全选</span></span></span><br><span class="line"><span class="javascript">						$(<span class="string">"input[type='checkbox']"</span>).prop(<span class="string">"checked"</span>,<span class="literal">true</span>);</span></span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;)</span><br><span class="line"><span class="actionscript">			<span class="comment">//实现取消选择</span></span></span><br><span class="line"><span class="javascript">				$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//给按钮绑定事件</span></span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//实现全不选</span></span></span><br><span class="line"><span class="javascript">						$(<span class="string">"input[type='checkbox']"</span>).prop(<span class="string">"checked"</span>,<span class="literal">false</span>);</span></span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;)</span><br><span class="line"><span class="actionscript">			<span class="comment">//反选</span></span></span><br><span class="line"><span class="javascript">				$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//给按钮绑定事件</span></span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						$(<span class="string">"input[type='checkbox']"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//alert(this.checked);</span></span></span><br><span class="line"><span class="javascript">							$(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>,!$(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>));</span></span><br><span class="line">						&#125;)</span><br><span class="line">					&#125;)					</span><br><span class="line">				&#125;)</span><br><span class="line"><span class="actionscript">			<span class="comment">//选择奇数行</span></span></span><br><span class="line"><span class="javascript">				$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#btn4"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						$(<span class="string">"input[type=checkbox]:odd"</span>).prop(<span class="string">"checked"</span>,<span class="literal">true</span>)</span></span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;)</span><br><span class="line"><span class="actionscript">			<span class="comment">//隔行变色</span></span></span><br><span class="line"><span class="javascript">				$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#btn5"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						$(<span class="string">"tr:odd"</span>).css(<span class="string">"background-color"</span>,<span class="string">"orange"</span>);</span></span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;)</span><br><span class="line"><span class="actionscript">			<span class="comment">//删除选中的行</span></span></span><br><span class="line"><span class="javascript">				$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#btn6"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						$(<span class="string">":checkbox:checked"</span>).parents(<span class="string">"tr"</span>).remove();</span></span><br><span class="line">					&#125;)</span><br><span class="line">					</span><br><span class="line">				&#125;)</span><br><span class="line"><span class="actionscript">			<span class="comment">//添加行---操作文档结构</span></span></span><br><span class="line"><span class="javascript">				$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#btn7"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">						$("tr:last").after("<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'checkbox'</span> <span class="attr">name</span>=<span class="string">'chk'</span> <span class="attr">id</span>=<span class="string">'chk'</span> <span class="attr">value</span>=<span class="string">''</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>"+name+"<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>");</span></span></span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">			tr&#123;</span><br><span class="line">				height: 35px;</span><br><span class="line">			&#125;</span><br><span class="line">			td&#123;</span><br><span class="line">				width: 100px;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>操作表格<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"全选"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"全不选"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"btn3"</span> <span class="attr">value</span>=<span class="string">"反选"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"btn4"</span> <span class="attr">value</span>=<span class="string">"选择奇数行"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"btn5"</span> <span class="attr">value</span>=<span class="string">"隔行变色"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"btn6"</span> <span class="attr">value</span>=<span class="string">"删除行"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"btn7"</span> <span class="attr">id</span>=<span class="string">"btn7"</span> <span class="attr">value</span>=<span class="string">"添加行"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span>  <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"chk"</span> <span class="attr">id</span>=<span class="string">"chk"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>12344<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"chk"</span> <span class="attr">id</span>=<span class="string">"chk"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>12355<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"chk"</span> <span class="attr">id</span>=<span class="string">"chk"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>12366<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"chk"</span> <span class="attr">id</span>=<span class="string">"chk"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>12377<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
主要通过获取每行开头前的单选框对象，从而对表格进行相关操作。</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JQuery</tag>
        <tag>JQuery操作多选框</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery基础-5</title>
    <url>/14327.html</url>
    <content><![CDATA[<p>强大的JQuery已经帮我们封装好了方法，通过方法的调用就能实现不错的动画效果。详细方法介绍可以看JQuery的相关文档</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>动画效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入jQuery文件--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.9.1.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明css代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-id">#showdiv</span>&#123;</span></span><br><span class="line">				height: 300px;</span><br><span class="line">				background-color: orange;</span><br><span class="line">				display: none;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-id">#div01</span>&#123;</span></span><br><span class="line">				height: 300px;</span><br><span class="line"><span class="css">				<span class="selector-tag">background-color</span>:<span class="selector-id">#8A2BE2</span>;</span></span><br><span class="line">			&#125;	</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">				$(<span class="string">"#showdiv"</span>).show(<span class="number">3000</span>);</span></span><br><span class="line"><span class="javascript">				$(<span class="string">"#div01"</span>).hide(<span class="number">3000</span>);</span></span><br><span class="line"><span class="vbscript">				/*$(<span class="string">"#showdiv"</span>).hide(<span class="number">3000</span>);</span></span><br><span class="line"><span class="javascript">				$(<span class="string">"#div01"</span>).show(<span class="number">3000</span>);*<span class="regexp">/</span></span></span><br><span class="line"><span class="javascript">				$(<span class="string">"div"</span>).toggle(<span class="number">3000</span>);</span></span><br><span class="line"><span class="javascript">				$(<span class="string">"#showdiv"</span>).slideDown(<span class="number">3000</span>);</span></span><br><span class="line"><span class="javascript">				$(<span class="string">"#div01"</span>).slideUp(<span class="number">2000</span>);</span></span><br><span class="line"><span class="javascript">				$(<span class="string">"#showdiv"</span>).fadeOut(<span class="number">3000</span>);</span></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"test()"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div01"</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405122343.gif"  alt=""></p>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JQuery</tag>
        <tag>JQuery动画效果</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery基础-4</title>
    <url>/63286.html</url>
    <content><![CDATA[<h2 id="JQuery动态操作事件"><a href="#JQuery动态操作事件" class="headerlink" title="JQuery动态操作事件"></a>JQuery动态操作事件</h2><ul>
<li><strong>元素对象.bind(“事件名”,fn)—-动态的给指定的元素对象追加指定的事件及其监听的函数。</strong><ul>
<li><strong>注意：js中的是一次添加，多次添加时覆盖的效果。jQuery是追加的效果，可以实现给一个事件添加不同的监听函数。</strong></li>
</ul>
</li>
<li><strong>元素对象.unBind(“事件名”)—-移除指定的元素对象的指定事件</strong><ul>
<li><strong>注意：js方式添加的事件不能移除。</strong></li>
</ul>
</li>
<li><strong>元素对象.one(“事件名”,fn)—-给指定的元素对象添加一次性事件，事件被触发执行一次即失效。</strong><ul>
<li><strong>注意：可以给事件添加多个一次函数，unBind可以用来解绑</strong></li>
</ul>
</li>
<li>页面载入事件<ul>
<li><strong>$(document).ready(function(){});</strong></li>
<li><strong>$(function(){});—-常用</strong></li>
<li>window.onload = function () { }</li>
<li><strong>页面载入成功后会调用传入的函数对象</strong></li>
<li><strong>注意：此方式可以给页面载入动态的增加多个函数对象，不会被覆盖。原生js载入事件多个函数对象会被覆盖</strong><a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>操作事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入jQuery文件--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.9.1.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//js动态添加事件</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testThing</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">"btn2"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//添加事件</span></span></span><br><span class="line"><span class="actionscript">					btn.onclick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我是js方式"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//jquery</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//测试bind绑定</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testBind</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#btn2"</span>).bind(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">"我是bind绑定单击事件"</span>)&#125;);</span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#btn2"</span>).bind(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">"我是bind绑定单击事件2w2222"</span>)&#125;);</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//测试unBind解绑</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testUnfBind</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#btn3"</span>).unbind(<span class="string">"click"</span>);</span></span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//测试one</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testOne</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#btn3"</span>).one(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">"我是one"</span>)&#125;);</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//页面载入事件</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//js方式</span></span></span><br><span class="line"><span class="javascript">					<span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我是js方式页面加载"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="javascript">					<span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我是js方式页面加载2222"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//jquery方式</span></span></span><br><span class="line"><span class="javascript">					$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我是jQuery"</span>);</span></span><br><span class="line">					&#125;)</span><br><span class="line"><span class="javascript">					$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我是jQuery22222"</span>);</span></span><br><span class="line">					&#125;)</span><br><span class="line">					</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>操作事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试js动态添加事件"</span> <span class="attr">onclick</span>=<span class="string">"testThing()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试jquery动态添加事件--bind"</span> <span class="attr">onclick</span>=<span class="string">"testBind()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试jquery动态解绑事件--unbind"</span> <span class="attr">onclick</span>=<span class="string">"testUnfBind()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试jquery动态解绑事件--one"</span> <span class="attr">onclick</span>=<span class="string">"testOne()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"测试js"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"btn2"</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"测试jQuery-bind"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"btn2"</span> <span class="attr">id</span>=<span class="string">"btn3"</span> <span class="attr">value</span>=<span class="string">"测试jQuery-one"</span> /&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JQuery</tag>
        <tag>jQuery动态操作事件</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery基础-3</title>
    <url>/13687.html</url>
    <content><![CDATA[<h2 id="JQuery操作元素的样式"><a href="#JQuery操作元素的样式" class="headerlink" title="JQuery操作元素的样式"></a>JQuery操作元素的样式</h2><ul>
<li>使用css()<ul>
<li><strong>对象名.css(“属性名”)—-返回当前属性的样式值</strong></li>
<li><strong>对象名.css(“属性名”,”属性值”)—-增加、修改元素的样式</strong></li>
<li><strong>对象名.css({“样式名”:”样式值”,”样式名”:”样式值”……})—-使用json传参，提升代码书写效率。</strong></li>
<li><strong>相当于原生js中的对象名.style.属性名</strong></li>
</ul>
</li>
<li>使用addClass()<ul>
<li><strong>对象名.addClass(“类选则器名”)—-追加一个类样式</strong></li>
<li><strong>对象名.removeClass(“类选择器 名”)—-删除一个指定的类样式</strong></li>
<li><strong>相当于原生js中的对象名.className</strong><a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>操作元素样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明css--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-id">#showdiv</span>&#123;</span></span><br><span class="line">				width: 300px;</span><br><span class="line">				height: 300px;</span><br><span class="line">				border: solid 1px;	</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.common</span>&#123;</span></span><br><span class="line">				width: 300px;</span><br><span class="line">				height: 300px;</span><br><span class="line">				border: solid 1px;	</span><br><span class="line">				background-color: blueviolet;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.dd</span>&#123;</span></span><br><span class="line">				font-size: 30px;</span><br><span class="line">				font-weight: bold;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入jQuery文件--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.9.1.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//jQuery操作样式---css()</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testCss</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> showdiv=$(<span class="string">"#showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//操作样式--增加</span></span></span><br><span class="line"><span class="actionscript">						showdiv.css(<span class="string">"background-color"</span>,<span class="string">"orange"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//操作样式--获取</span></span></span><br><span class="line"><span class="actionscript">						alert(showdiv.css(<span class="string">"width"</span>));		</span></span><br><span class="line">				&#125;</span><br><span class="line">			</span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testCss2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> div=$(<span class="string">"#div01"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//操作样式</span></span></span><br><span class="line"><span class="actionscript">						div.css(&#123;<span class="string">"border"</span>:<span class="string">"solid 1px"</span>,<span class="string">"width"</span>:<span class="string">"300px"</span>,<span class="string">"height"</span>:<span class="string">"300px"</span>&#125;);	</span></span><br><span class="line">				&#125;</span><br><span class="line">			</span><br><span class="line"><span class="actionscript">			<span class="comment">//jquery操作样式--addClass()</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testAddClass</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> div=$(<span class="string">"#div01"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//操作元素样式</span></span></span><br><span class="line"><span class="actionscript">						div.addClass(<span class="string">"common"</span>);	</span></span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testAddClass2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> div=$(<span class="string">"#div01"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//操作元素样式</span></span></span><br><span class="line"><span class="actionscript">						div.addClass(<span class="string">"dd"</span>);	</span></span><br><span class="line">				&#125;</span><br><span class="line">			</span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testRemoveClass</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> div=$(<span class="string">"#div01"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//删除元素样式</span></span></span><br><span class="line"><span class="actionscript">						div.removeClass(<span class="string">"dd"</span>);	</span></span><br><span class="line">				&#125;	</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>操作元素样式<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"操作样式---css()"</span> <span class="attr">onclick</span>=<span class="string">"testCss()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"操作样式---css()--json"</span> <span class="attr">onclick</span>=<span class="string">"testCss2()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"操作样式---addClass()"</span> <span class="attr">onclick</span>=<span class="string">"testAddClass()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"操作样式---addClass()--2"</span> <span class="attr">onclick</span>=<span class="string">"testAddClass2()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"操作样式---removeClass"</span> <span class="attr">onclick</span>=<span class="string">"testRemoveClass()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div01"</span> <span class="attr">class</span>=<span class="string">"common dd"</span>&gt;</span><span class="comment">&lt;!--类名可以是多个小类名--&gt;</span></span><br><span class="line">			我是div01</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="JQuery操作文档结构"><a href="#JQuery操作文档结构" class="headerlink" title="JQuery操作文档结构"></a>JQuery操作文档结构</h2></li>
</ul>
</li>
<li>首先获取元素对象</li>
<li>内部插入<ul>
<li><strong>append(“内容”)—–将指定的内容追加到对象的内部</strong></li>
<li><strong>appendTo(元素对象或者选择器)—–将制定的元素对象追加到指定的对象内容</strong></li>
<li><strong>prepend()—–将指定的内容追加到对象的内部的前面</strong></li>
<li><strong>prependTo()—–将制定的元素对象追加到指定的对象内容前面</strong></li>
</ul>
</li>
<li>外部插入<ul>
<li><strong>after—–将指定的内容追加到指定的元素后面</strong></li>
<li><strong>before—–将指定的内容追加到指定的元素前面</strong></li>
<li><strong>insertAfter—–把所有匹配的元素插入到另一个、指定的元素元素集合的后面</strong></li>
<li><strong>insertBefore—–把所有匹配的元素插入到另一个、指定的元素元素集合的前面。</strong></li>
</ul>
</li>
<li>包裹</li>
<li>替换</li>
<li><strong>删除：empty()</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>操作文档结构<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入jQuery文件--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.9.1.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//内部插入</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testAppend</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> div=$(<span class="string">"#showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//使用内部插入</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						div.append("<span class="tag">&lt;<span class="name">i</span>&gt;</span>，饭<span class="tag">&lt;/<span class="name">i</span>&gt;</span>");</span></span></span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testAppendTo</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> div=$(<span class="string">"#showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//使用appendTo()</span></span></span><br><span class="line"><span class="javascript">						$(<span class="string">"#u1"</span>).appendTo(div);	</span></span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testPrepend</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> div=$(<span class="string">"#showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//使用prepend()</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">					div.prepend("<span class="tag">&lt;<span class="name">i</span>&gt;</span>你好，<span class="tag">&lt;/<span class="name">i</span>&gt;</span>");</span></span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//外部插入</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testAfter</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> div=$(<span class="string">"#showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//使用after外部插入</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						div.after("<span class="tag">&lt;<span class="name">b</span>&gt;</span>今天天气不错，适合学习<span class="tag">&lt;/<span class="name">b</span>&gt;</span>");</span></span></span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testBefore</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> div=$(<span class="string">"#showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//使用before外部插入</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						div.before("<span class="tag">&lt;<span class="name">b</span>&gt;</span>今天天气不错，适合学习<span class="tag">&lt;/<span class="name">b</span>&gt;</span>")</span></span></span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testEmpty</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					$(<span class="string">"#showdiv"</span>).empty()</span></span><br><span class="line">				&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-id">#showdiv</span>&#123;</span></span><br><span class="line">				width: 300px;</span><br><span class="line">				height: 300px;</span><br><span class="line">				border: solid 3px orange;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>操作文档结构<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试append"</span> <span class="attr">onclick</span>=<span class="string">"testAppend()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试appenTo"</span> <span class="attr">onclick</span>=<span class="string">"testAppendTo()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试prepend"</span> <span class="attr">onclick</span>=<span class="string">"testPrepend()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试after"</span> <span class="attr">onclick</span>=<span class="string">"testAfter()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试before"</span> <span class="attr">onclick</span>=<span class="string">"testBefore()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试删除--empty()"</span> <span class="attr">onclick</span>=<span class="string">"testEmpty()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">u</span> <span class="attr">id</span>=<span class="string">"u1"</span>&gt;</span>每天下午都是充斥着面包浓浓的香味<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">b</span>&gt;</span>今天中午吃什么<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JQuery</tag>
        <tag>JQuery操作文档结构</tag>
        <tag>JQuery操作元素的样式</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery基础-2</title>
    <url>/62902.html</url>
    <content><![CDATA[<h2 id="jQuery操作元素的属性"><a href="#jQuery操作元素的属性" class="headerlink" title="jQuery操作元素的属性"></a>jQuery操作元素的属性</h2><ul>
<li>首先通过选择器获取到元素对象</li>
<li>获取<ul>
<li><strong>对象名.attr(“属性名”) —-返回当前属性值</strong></li>
<li><strong>注意此种方式不能获取value属性的实时数据，使用对象名.val()进行获取。</strong></li>
<li><strong>对象名.attr相当于原生的-元素对象名.getAttribute(“属性名”);获取的不是value属性的实时数据</strong></li>
<li><strong>val()方法返回获取匹配的元素集合中第一个元素的当前值。</strong></li>
</ul>
</li>
<li>修改<ul>
<li><strong>对象名.attr(“属性名”,”属性值”);</strong><a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery操作元素的属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.9.1.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testField</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> uname=$(<span class="string">"#uname"</span>);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取</span></span></span><br><span class="line"><span class="actionscript">				alert(uname.attr(<span class="string">"type"</span>)+<span class="string">":"</span>+uname.attr(<span class="string">"value"</span>)+<span class="string">":"</span>+uname.val());</span></span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testField2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> uname=$(<span class="string">"#uname"</span>);</span></span><br><span class="line"><span class="actionscript">				uname.attr(<span class="string">"type"</span>,<span class="string">"button"</span>);</span></span><br><span class="line">			&#125;	</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>jquery操作元素属性<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试获取元素属性"</span> <span class="attr">onclick</span>=<span class="string">"testField()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试修改元素属性"</span> <span class="attr">onclick</span>=<span class="string">"testField2()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span> <span class="attr">id</span>=<span class="string">"uname"</span> <span class="attr">value</span>=<span class="string">"哈哈"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="jQuery-操作元素内容"><a href="#jQuery-操作元素内容" class="headerlink" title="jQuery 操作元素内容"></a>jQuery 操作元素内容</h2></li>
</ul>
</li>
<li>获取元素对象<ul>
<li><strong>对象名.html()—-返回当前对象的所有内容，包括HTML标签。</strong></li>
<li><strong>对象名.text()—-返回当前对象的文本内容，不包括HTML标签</strong></li>
<li><strong>对象名.html()相当于原生js中的对象名.innerHTML</strong></li>
<li><strong>对象名.text()相当于原生js中的对象名.innerText</strong></li>
</ul>
</li>
<li>修改<ul>
<li><strong>对象名.html(“新的内容”)—-新的内容会将原有内容覆盖，HTML标签会被解析执行</strong></li>
<li><strong>对象名.text(“新的内容”)—-新的内容会将原有内容覆盖，HTML标签不会被解析</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>操作元素HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入jQuery文件--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.9.1.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//声明函数</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testHtml</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> showdiv=$(<span class="string">"#showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取元素的内容</span></span></span><br><span class="line">					alert(showdiv.html());</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testHtml2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> showdiv=$(<span class="string">"#showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//修改元素内容</span></span></span><br><span class="line"><span class="actionscript">				showdiv.html(showdiv.html()+<span class="string">"&lt;i&gt;今天天气真好，适合抓鬼子&lt;/i&gt;"</span>);<span class="comment">//内容追加</span></span></span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testText</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> showdiv=$(<span class="string">"#showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取元素内容</span></span></span><br><span class="line">				alert(showdiv.text());</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testText2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> showdiv=$(<span class="string">"#showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//修改元素内容</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">				showdiv.text("<span class="tag">&lt;<span class="name">i</span>&gt;</span>今天天气真好，适合抓鬼子<span class="tag">&lt;/<span class="name">i</span>&gt;</span>");</span></span></span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>操作元素HTML<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试获取元素内容--html()"</span> <span class="attr">onclick</span>=<span class="string">"testHtml()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试修改元素内容--html()"</span> <span class="attr">onclick</span>=<span class="string">"testHtml2()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试获取元素内容--text()"</span> <span class="attr">onclick</span>=<span class="string">"testText()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试修改元素内容--text()"</span> <span class="attr">onclick</span>=<span class="string">"testText2()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">b</span>&gt;</span>皇军，前面有八路的干活<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JQuery</tag>
        <tag>jQuery操作元素的属性</tag>
        <tag>jQuery 操作元素内容</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery基础-1</title>
    <url>/62710.html</url>
    <content><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405122544.jpg"  alt=""></p>
<a id="more"></a>

<h2 id="JQuery的概念"><a href="#JQuery的概念" class="headerlink" title="JQuery的概念"></a>JQuery的概念</h2><ul>
<li>问题：使用js完成对网页的操作，代码的书写量比较大。 js中对网页操作提供的方式过 于简单，造成获取和操作HTML元素对象过于麻烦。 </li>
<li>解决: 使用jQuery </li>
<li><strong>结论： 其实jQuery就是讲常用的js操作封装了起来。jQuery是js的一个框架。</strong></li>
<li><strong>内容：jQuery本质上还是js，基本语法和js一致。将js的DOM操作重新封装 整合了。</strong></li>
<li>学习： <ul>
<li>1、如何使用JQuery完成网页操作。 </li>
<li>2、jquery的特点 jQuery是js的一个框架 jQuery提供了多种多样的选择器 jQuery支持主流的各种版本的浏览器 jQuery使用起来特别简单 </li>
<li>3、jQuery的使用 jQuery的选择器 jQuery的DOM操作 jQuery的事件和动画</li>
</ul>
</li>
<li>使用：<ul>
<li><strong>使用script标签的外部引用，将JQuery文件引用进来。方可正常使用JQuery</strong></li>
<li><strong>&lt;-script src=”JQuery路径” type=”text/javascript” charset=”utf-8”&gt;&lt;-/script&gt;</strong></li>
</ul>
</li>
</ul>
<h2 id="JQuery选择器"><a href="#JQuery选择器" class="headerlink" title="JQuery选择器"></a>JQuery选择器</h2><ul>
<li><p>基本选择器</p>
<ul>
<li>全部选择器 *</li>
<li><strong>ID选择器:$(“#id名”) 返回的是存储了指定的HTML元素对象的数组</strong></li>
<li><strong>标签选择器:$(“标签名”) 返回的是存储了指定标签的数组</strong></li>
<li><strong>类选择器:$(“.类选择器”) 返回的是使用了相同类选择器的HTML元素对象</strong></li>
<li><strong>组合选择器:$(“选择器，选择器，选择器，…..”) 返回的是所有选择器所指定HTML元素对象</strong></li>
</ul>
</li>
<li><p>层级选择器</p>
<ul>
<li><strong>祖先获取所有后代：$(“选择器 标签名”) 返回的是选择器下的所有指明的后代元素。</strong></li>
<li><strong>选择所有子元素：$(“选择器&gt;选择器”)返回的是所有的子元素</strong></li>
<li>选择紧跟的元素：<strong>$(“选择器+选择器”)</strong>返回的是紧跟的元素</li>
<li>选择后面所有的元素：<strong>$(“选择器 ~选择器”)</strong>返回所有后面的元素（了解）</li>
</ul>
</li>
<li><p><strong>简单选择器：在其他选择器的基础上选择某个或某些指定的HTML元素(筛选)</strong></p>
<ul>
<li>选择第一个元素<ul>
<li><strong>$(“选择器:first”) 返回第一个HTML元素</strong></li>
</ul>
</li>
<li>选择最后一个<ul>
<li><strong>$(“选择器:last”) 返回第一个HTML元素去除某个元素：</strong></li>
</ul>
</li>
<li>去除选择的HTML元素中的某些元素<ul>
<li><strong>$(“选择器:not(选择器)”)</strong></li>
</ul>
</li>
<li>奇数偶数<ul>
<li>$(“选择器:even”) 返回角标为偶数的HTML元素</li>
<li>$(“选择器:odd”) 返回角标为奇数的HTML元素</li>
</ul>
</li>
<li>指定角标<ul>
<li>$(“选择器:eq(角标)”)返回指定角标的HTML元素对象</li>
</ul>
</li>
<li>大于角标<ul>
<li>$(“选择器:gt(角标)”)返回大于指定角标的HTML元素</li>
</ul>
</li>
<li>小于角标<ul>
<li>$(“选择器:lt(角标)”)返回小于指定角标的HTML元素</li>
</ul>
</li>
</ul>
</li>
<li><p>内容选择器</p>
<ul>
<li>包含:<ul>
<li>选择器:contains(“内容”)返回包含指定内容的元素</li>
</ul>
</li>
<li>内容为空:<ul>
<li>选择器:empty 返回内容为空的元素对象</li>
</ul>
</li>
<li>含有指定元素对象<ul>
<li>选择器:has(选择器) 返回含有指定的元素的元素对象</li>
</ul>
</li>
<li>不为空的元素<ul>
<li>选择器:parent 返回内容不为空的元素</li>
</ul>
</li>
</ul>
</li>
<li><p>可见性选择器</p>
<ul>
<li>匹配隐藏<ul>
<li>$(“选择器:hidden”) 返回隐藏的HTML元素</li>
</ul>
</li>
<li>匹配可见<ul>
<li>$(“选择器:visible”) 返回可见的HTML元素</li>
</ul>
</li>
</ul>
</li>
<li><p>属性选择器</p>
<ul>
<li>属性：<ul>
<li><strong>$(“选择器[属性名]”) 返回具备某些属性的HTML元素</strong></li>
</ul>
</li>
<li>属性值：<ul>
<li><strong>$(“选择器[属性名=值]”) 返回具备属性且属性值为特定</strong></li>
</ul>
</li>
</ul>
</li>
<li><p>子元素选择器</p>
</li>
<li><p>表单选择器</p>
</li>
<li><p>具体详细操作查看JQuery api</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>jquery的选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入jQuery文件--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.9.1.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//id选择器</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testId</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//jquery--id</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> inp=$(<span class="string">"#uname"</span>);</span></span><br><span class="line">				alert(inp.val());</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//标签选择器</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testEle</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> inps=$(<span class="string">"input"</span>);</span></span><br><span class="line">				alert(inps[1].value);	</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//类选择器</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testClass</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> inps=$(<span class="string">".common"</span>);</span></span><br><span class="line">				alert(inps.length);</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//组合选择器：</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testAll</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> eles=$(<span class="string">"h3,input"</span>);</span></span><br><span class="line">				alert(eles.length);</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//测试子选择器</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testChild</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> inps=$(<span class="string">"#showdiv&gt;input"</span>);</span></span><br><span class="line">				alert(inps.length);</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//测试层级选择器</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testCj</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> inp=$(<span class="string">"input:first"</span>);</span></span><br><span class="line">				alert(inp.val());</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testCj2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> tds=$(<span class="string">"td:not(td[width])"</span>);</span></span><br><span class="line">				alert(tds.html());</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.common</span>&#123;&#125;</span></span><br><span class="line">			div&#123;</span><br><span class="line">				width: 300px;</span><br><span class="line">				height: 100px;</span><br><span class="line">				border: solid 2px orange;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>jquery的选择器<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试id"</span>  <span class="attr">onclick</span>=<span class="string">"testId()"</span> <span class="attr">class</span>=<span class="string">"common"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试标签选择器"</span>  <span class="attr">onclick</span>=<span class="string">"testEle()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试类选择器"</span>  <span class="attr">onclick</span>=<span class="string">"testClass()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试组合选择器"</span>  <span class="attr">onclick</span>=<span class="string">"testAll()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span> <span class="attr">id</span>=<span class="string">"uname"</span> <span class="attr">value</span>=<span class="string">"张三"</span> <span class="attr">class</span>=<span class="string">"common"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试子选择器"</span> <span class="attr">onclick</span>=<span class="string">"testChild()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试层级选择器--first"</span> <span class="attr">onclick</span>=<span class="string">"testCj()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试层级选择器--not"</span> <span class="attr">onclick</span>=<span class="string">"testCj2()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">height</span>=<span class="string">"200px"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"100px"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"100px"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"100px"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JQuery</tag>
        <tag>选择器</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-16</title>
    <url>/35697.html</url>
    <content><![CDATA[<h2 id="js操作表格学习"><a href="#js操作表格学习" class="headerlink" title="js操作表格学习"></a>js操作表格学习</h2><ul>
<li>删除行：<ul>
<li><strong>行对象.rowIndex—-返回行对象的角标</strong></li>
<li><strong>表格对象.deleteRow(要删除的行对象的角标);</strong></li>
</ul>
</li>
<li>修改单元内容<ul>
<li><strong>单元格对象.innerHTML=”新的内容”;</strong></li>
<li><strong>行对象.cells—-返回当前行所有的单元格对象的数组</strong></li>
</ul>
</li>
<li>注意：<ul>
<li><strong>角标从零开始</strong></li>
<li>具体方法看代码（以上不完全）<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>操作表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明css--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">			body&#123;</span><br><span class="line">				text-align: center;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="comment">/*设置表格居中*/</span></span></span><br><span class="line"><span class="css">			<span class="selector-id">#ta</span>&#123;</span></span><br><span class="line">				margin: auto;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="comment">/*设置表格的行样式*/</span></span></span><br><span class="line"><span class="css">			<span class="selector-id">#ta</span> <span class="selector-tag">tr</span>&#123;</span></span><br><span class="line">				height: 35px;</span><br><span class="line">			&#125;	</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//声明删除行</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">delRow</span><span class="params">(btn)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取table对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> ta=<span class="built_in">document</span>.getElementById(<span class="string">"ta"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取要删除的行对象</span></span></span><br><span class="line"><span class="actionscript">					<span class="keyword">var</span> tr=btn.parentNode.parentNode;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//删除行</span></span></span><br><span class="line">					ta.deleteRow(tr.rowIndex);</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//修改功能</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">updateRow</span><span class="params">(btn)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取单元格对象</span></span></span><br><span class="line"><span class="actionscript">						<span class="comment">//获取行对象</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">var</span> tr=btn.parentNode.parentNode;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//获取行对象</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">var</span> cell=tr.cells[<span class="number">3</span>];</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//判断cell.innerHTML的值是否是数字</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">if</span>(!<span class="built_in">isNaN</span>(<span class="built_in">Number</span>(cell.innerHTML)))&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//修改单元格内容</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						cell.innerHTML="<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">value</span>=<span class="string">'"+cell.innerHTML+"'</span> <span class="attr">onblur</span>=<span class="string">'updateRow2(this)'</span>/&gt;</span>";	</span></span></span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">updateRow2</span><span class="params">(inp)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取单元格对象</span></span></span><br><span class="line"><span class="actionscript">					<span class="keyword">var</span> cell=inp.parentNode;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//实现保存</span></span></span><br><span class="line">					cell.innerHTML=inp.value;</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">/*---------------------------------------------------------------------------------*/</span></span></span><br><span class="line"><span class="actionscript">		<span class="comment">//选择删除</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">chooseDel</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取表格对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> ta=<span class="built_in">document</span>.getElementById(<span class="string">"ta"</span>);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取要删除的行号</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> chks=<span class="built_in">document</span>.getElementsByName(<span class="string">"chk"</span>);	</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;chks.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">if</span>(chks[i].checked)&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//删除行</span></span></span><br><span class="line">							ta.deleteRow(i);</span><br><span class="line"><span class="actionscript">							i--;<span class="comment">//多个删除</span></span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//添加行</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">addRow</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取table表格对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> ta=<span class="built_in">document</span>.getElementById(<span class="string">"ta"</span>);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//添加行</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> tr=ta.insertRow(<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//添加单元格</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> cell0=tr.insertCell(<span class="number">0</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">				cell0.innerHTML="<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'checkbox'</span> <span class="attr">name</span>=<span class="string">'chk'</span>/&gt;</span>";</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> cell1=tr.insertCell(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">				cell1.innerHTML=<span class="built_in">document</span>.getElementById(<span class="string">"uname"</span>).value;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> cell2=tr.insertCell(<span class="number">2</span>);</span></span><br><span class="line"><span class="actionscript">				cell2.innerHTML=<span class="string">"李思"</span>;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> cell3=tr.insertCell(<span class="number">3</span>);</span></span><br><span class="line"><span class="actionscript">				cell3.innerHTML=<span class="string">"49.88"</span>;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> cell4=tr.insertCell(<span class="number">4</span>);</span></span><br><span class="line"><span class="actionscript">				cell4.innerHTML=<span class="string">"5"</span>;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> cell5=tr.insertCell(<span class="number">5</span>);</span></span><br><span class="line"><span class="actionscript">				cell5.style.textAlign=<span class="string">"center"</span>;</span></span><br><span class="line"><span class="handlebars"><span class="xml">				cell5.innerHTML="<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span>  <span class="attr">value</span>=<span class="string">'修改数量'</span>  <span class="attr">onclick</span>=<span class="string">'updateRow(this)'</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">'删除'</span> <span class="attr">onclick</span>=<span class="string">'delRow(this)'</span>/&gt;</span>";</span></span></span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//复制行</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">copyRow</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取表格对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> ta=<span class="built_in">document</span>.getElementById(<span class="string">"ta"</span>);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取选择行对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> chks=<span class="built_in">document</span>.getElementsByName(<span class="string">"chk"</span>)</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;chks.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">if</span>(chks[i].checked)&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">var</span> tr=ta.insertRow(ta.rows.length);</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//复制行</span></span></span><br><span class="line">						tr.innerHTML=ta.rows[i].innerHTML;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;	</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//全选</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">chooseAll</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> ck=<span class="built_in">document</span>.getElementById(<span class="string">"ck"</span>);</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> chks=<span class="built_in">document</span>.getElementsByName(<span class="string">"chk"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">if</span>(ck.checked)&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;chks.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">							chks[i].checked=<span class="literal">true</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line"><span class="actionscript">					&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;chks.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">							chks[i].checked=<span class="literal">false</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//隔行变色</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">operCss</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取所有的行对象数组</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> trs=<span class="built_in">document</span>.getElementById(<span class="string">"ta"</span>).rows;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//遍历</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;trs.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">						trs[i].style.backgroundColor=<span class="string">"red"</span>;</span></span><br><span class="line"><span class="actionscript">					&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">						trs[i].style.backgroundColor=<span class="string">"green"</span>;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>操作表格学习<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"删除"</span>  <span class="attr">onclick</span>=<span class="string">"chooseDel()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"添加行"</span> <span class="attr">onclick</span>=<span class="string">"addRow()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"复制行"</span> <span class="attr">onclick</span>=<span class="string">"copyRow()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"隔行变色"</span> <span class="attr">onclick</span>=<span class="string">"operCss()"</span>/&gt;</span></span><br><span class="line">		书名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span> <span class="attr">id</span>=<span class="string">"uname"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">id</span>=<span class="string">"ta"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"text-align: center;font-weight: bold;"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"50px"</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"chk"</span> <span class="attr">value</span>=<span class="string">"0"</span>  <span class="attr">id</span>=<span class="string">"ck"</span> <span class="attr">onclick</span>=<span class="string">"chooseAll()"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span>书名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"100px"</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"100px"</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span>购买数量<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"200px"</span> &gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span> <span class="attr">id</span>=<span class="string">"t1"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"chk"</span> <span class="attr">id</span>=<span class="string">"chk"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>java从入门到放弃<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>wollo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>43.50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"修改数量"</span>  <span class="attr">onclick</span>=<span class="string">"updateRow(this)"</span>/&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"删除"</span> <span class="attr">onclick</span>=<span class="string">"delRow(this)"</span>/&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"chk"</span> <span class="attr">id</span>=<span class="string">"chk"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>javaScript入门<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>高淇<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>77.60<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"修改数量"</span> <span class="attr">onclick</span>=<span class="string">"updateRow(this)"</span>/&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"删除"</span> <span class="attr">onclick</span>=<span class="string">"delRow(this)"</span>/&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"chk"</span> <span class="attr">id</span>=<span class="string">"chk"</span> <span class="attr">value</span>=<span class="string">"2"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>Spring入门<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>卢俊杰<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>78.88<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"修改数量"</span> <span class="attr">onclick</span>=<span class="string">"updateRow(this)"</span>/&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"删除"</span> <span class="attr">onclick</span>=<span class="string">"delRow(this)"</span>/&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JavaScript</tag>
        <tag>操作表格</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-15</title>
    <url>/35377.html</url>
    <content><![CDATA[<h2 id="event对象学习"><a href="#event对象学习" class="headerlink" title="event对象学习"></a>event对象学习</h2><ul>
<li>event对象获取鼠标坐标</li>
<li>event对象获取键盘值</li>
<li>详细属性看W3c<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>event对象学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-id">#showdiv</span>&#123;</span></span><br><span class="line">				width: 300px;</span><br><span class="line">				height: 300px;</span><br><span class="line">				border: solid 1px;</span><br><span class="line">				</span><br><span class="line">			&#125;			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">getMouse</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取event对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> eve=event || <span class="built_in">window</span>.event;<span class="comment">//因为浏览器差异问题，使用此种方式获取event对象</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> x=eve.clientX;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> y=eve.clientY;</span></span><br><span class="line"><span class="actionscript">				alert(x+<span class="string">":"</span>+y);				</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">getKey</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取event对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> eve=event || <span class="built_in">window</span>.event;<span class="comment">//因为浏览器差异问题，使用此种方式获取event对象</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> code=eve.keyCode;</span></span><br><span class="line">				alert(code);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>event对象学习<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span> <span class="attr">onmousemove</span>=<span class="string">"getMouse(event)"</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onkeydown</span>=<span class="string">"getKey(event)"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
案例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>event案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">			</span><br><span class="line"><span class="css">			<span class="selector-id">#showdiv</span>&#123;</span></span><br><span class="line">				width: 50%;</span><br><span class="line">				height: 50%;	</span><br><span class="line">				border: solid 1px;</span><br><span class="line">				position: absolute;</span><br><span class="line">				left: 400px;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			img&#123;</span><br><span class="line">				position: absolute;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> img=<span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span></span><br><span class="line"><span class="actionscript">		img.src=<span class="string">"img/wdfj.gif"</span>;</span></span><br><span class="line"><span class="vbscript">		img.style.<span class="built_in">left</span>=<span class="string">"100px"</span>;</span></span><br><span class="line"><span class="actionscript">		img.style.top=<span class="string">"100px"</span></span></span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.getElementById(<span class="string">"showdiv"</span>).appendChild(img);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">		<span class="comment">//创建函数</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">planemove</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//创建event对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> eve =event ||<span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取坐标</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> x=eve.clientX<span class="number">-400</span>;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> y=eve.clientY;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//动态修改飞机的位置</span></span></span><br><span class="line"><span class="vbscript">				img.style.<span class="built_in">left</span>=x<span class="number">-33</span>+<span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">				img.style.top=y<span class="number">-40</span>+<span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">document</span>.removeEventListener(<span class="string">"mousemove"</span>,planemove,<span class="literal">true</span>);</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.addEventListener(<span class="string">"mousemove"</span>,planemove,<span class="literal">true</span>);</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
wdfj.gif<br><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405122821.gif"  alt=""></li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JavaScript</tag>
        <tag>event对象</tag>
      </tags>
  </entry>
  <entry>
    <title>js表单校验案例</title>
    <url>/57795.html</url>
    <content><![CDATA[<p>校验思路，通过事件绑定获取校验标签中的属性值，进行判断是否符合我们书写的正则表达式的规则的正确值，校验标签的后面标签则进行对判断结果的表达。</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>js校验form表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明css代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="comment">/*设置背景图片*/</span></span></span><br><span class="line">			body&#123;</span><br><span class="line">				background-image: url(img/b.jpg);</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="comment">/*设置tr样式*/</span></span></span><br><span class="line">			tr&#123;</span><br><span class="line">				height: 40px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="comment">/*设置div样式*/</span></span></span><br><span class="line"><span class="css">			<span class="selector-id">#showdiv</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">border</span>: <span class="selector-tag">solid</span> 1<span class="selector-tag">px</span> <span class="selector-id">#FF0000</span>;</span></span><br><span class="line">				border-radius: 10px;</span><br><span class="line">				width: 500px;</span><br><span class="line">				margin: auto;</span><br><span class="line">				margin-top: 40px;	</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="comment">/*设置table*/</span></span></span><br><span class="line">			table&#123;</span><br><span class="line">				margin: auto;</span><br><span class="line">				color: white;	</span><br><span class="line">			&#125;</span><br><span class="line">			span&#123;</span><br><span class="line"><span class="css">				<span class="selector-tag">font-size</span><span class="selector-pseudo">:13px</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-id">#codeSpan</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">font-size</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//常见验证码</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">createCode</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//创建随机四位数字</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> code=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">9000</span>+<span class="number">1000</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> span=<span class="built_in">document</span>.getElementById(<span class="string">"codeSpan"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//将数字存放到span中</span></span></span><br><span class="line">					span.innerHTML=code;					</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//验证用户名</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">checkUname</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取用户的用户名信息</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> uname=<span class="built_in">document</span>.getElementById(<span class="string">"uname"</span>).value;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//创建校验规则</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> reg=<span class="regexp">/^[\u4e00-\u9fa5]&#123;2,4&#125;$/</span></span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取span对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> span=<span class="built_in">document</span>.getElementById(<span class="string">"unameSpan"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//开始校验</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">if</span>(uname==<span class="string">""</span> || uname==<span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//输出校验结果</span></span></span><br><span class="line"><span class="actionscript">							span.innerHTML=<span class="string">"用户名不能为空"</span>;</span></span><br><span class="line"><span class="actionscript">							span.style.color=<span class="string">"red"</span>;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">						&#125;<span class="keyword">else</span> <span class="keyword">if</span>(reg.test(uname))&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//输出校验结果</span></span></span><br><span class="line"><span class="actionscript">							span.innerHTML=<span class="string">"用户名ok"</span>;</span></span><br><span class="line"><span class="actionscript">							span.style.color=<span class="string">"green"</span>;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">						&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//输出校验结果</span></span></span><br><span class="line"><span class="actionscript">							span.innerHTML=<span class="string">"用户名不符合规则"</span>;</span></span><br><span class="line"><span class="actionscript">							span.style.color=<span class="string">"red"</span>;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//验证密码</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">checkPwd</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取用户的密码信息</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> pwd=<span class="built_in">document</span>.getElementById(<span class="string">"pwd"</span>).value;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//创建校验规则</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> reg=<span class="regexp">/^[a-z]\w&#123;5,7&#125;$/</span>;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取span对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> span=<span class="built_in">document</span>.getElementById(<span class="string">"pwdSpan"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//开始校验</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">if</span>(pwd==<span class="string">""</span> ||pwd==<span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//输出校验结果</span></span></span><br><span class="line"><span class="actionscript">							span.innerHTML=<span class="string">"*密码不能为空"</span>;</span></span><br><span class="line"><span class="actionscript">							span.style.color=<span class="string">"red"</span>;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">						&#125;<span class="keyword">else</span> <span class="keyword">if</span>(reg.test(pwd))&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//输出校验结果</span></span></span><br><span class="line"><span class="actionscript">							span.innerHTML=<span class="string">"*密码ok"</span>;</span></span><br><span class="line"><span class="actionscript">							span.style.color=<span class="string">"green"</span>;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">						&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//输出校验结果</span></span></span><br><span class="line"><span class="actionscript">							span.innerHTML=<span class="string">"*密码格式不正确"</span>;</span></span><br><span class="line"><span class="actionscript">							span.style.color=<span class="string">"red"</span>;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line">					checkPwd2();</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//校验确认密码</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">checkPwd2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取第一次密码</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> pwd=<span class="built_in">document</span>.getElementById(<span class="string">"pwd"</span>).value;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取确认密码</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> pwd2=<span class="built_in">document</span>.getElementById(<span class="string">"pwd2"</span>).value;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取span对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> span=<span class="built_in">document</span>.getElementById(<span class="string">"pwd2Span"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//比较两次密码是否相同</span></span></span><br><span class="line"><span class="actionscript">					<span class="keyword">if</span>(pwd2==<span class="string">""</span>||pwd2==<span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="actionscript">						span.innerHTML=<span class="string">"确认密码不能为空"</span>;</span></span><br><span class="line"><span class="actionscript">						span.style.color=<span class="string">"red"</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(pwd==pwd2)&#123;</span></span><br><span class="line"><span class="actionscript">						span.innerHTML=<span class="string">"确认密码ok"</span>;</span></span><br><span class="line"><span class="actionscript">						span.style.color=<span class="string">"green"</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">					&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">						span.innerHTML=<span class="string">"两次密码不一致"</span>;</span></span><br><span class="line"><span class="actionscript">						span.style.color=<span class="string">"red"</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//校验手机号</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">checkPhone</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">return</span> checkField(<span class="string">"phone"</span>,/^<span class="number">1</span>[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>]\d&#123;<span class="number">9</span>&#125;$/);</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//校验邮箱</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">checkMail</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">return</span> checkField(<span class="string">"mail"</span>,/^([a-zA-Z0<span class="number">-9</span>_-])+@([a-zA-Z0<span class="number">-9</span>_-])+(.[a-zA-Z0<span class="number">-9</span>_-])+$/ )</span></span><br><span class="line">					</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//校验籍贯</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">checkAddress</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取用户选择的数据</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> sel=<span class="built_in">document</span>.getElementById(<span class="string">"address"</span>).value;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取span</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> span=<span class="built_in">document</span>.getElementById(<span class="string">"addressSpan"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//校验</span></span></span><br><span class="line"><span class="actionscript">					<span class="keyword">if</span>(sel!=<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">						span.innerHTML=<span class="string">"籍贯选择成功"</span>;</span></span><br><span class="line"><span class="actionscript">						span.style.color=<span class="string">"green"</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">					&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">						span.innerHTML=<span class="string">"籍贯不能为请选择"</span>;</span></span><br><span class="line"><span class="actionscript">						span.style.color=<span class="string">"red"</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//校验爱好</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">checkFav</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取所有的爱好</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> favs=<span class="built_in">document</span>.getElementsByName(<span class="string">"fav"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取span</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> span=<span class="built_in">document</span>.getElementById(<span class="string">"favSpan"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//遍历</span></span></span><br><span class="line"><span class="actionscript">					<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;favs.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">if</span>(favs[i].checked)&#123;</span></span><br><span class="line"><span class="actionscript">							span.innerHTML=<span class="string">"爱好选择成功"</span>;</span></span><br><span class="line"><span class="actionscript">							span.style.color=<span class="string">"green"</span>;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line"><span class="actionscript">					span.innerHTML=<span class="string">"爱好至少选则一项"</span>;</span></span><br><span class="line"><span class="actionscript">					span.style.color=<span class="string">"red"</span>;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//检验验证码</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">checkCode</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">"code"</span>);</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> span = <span class="built_in">document</span>.getElementById(<span class="string">"codeSpan"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">if</span> (input.value==span.innerText)&#123;</span></span><br><span class="line"><span class="actionscript">						span.style.backgroundImage=<span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">						span.innerHTML=<span class="string">"验证成功"</span>;</span></span><br><span class="line"><span class="actionscript">						span.style.color=<span class="string">"green"</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">					&#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">						span.innerHTML=<span class="string">"验证失败"</span>;</span></span><br><span class="line"><span class="actionscript">						span.style.color=<span class="string">"red"</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> span = <span class="built_in">document</span>.getElementById(<span class="string">"codeSpan"</span>);</span></span><br><span class="line">				alert(span.innerText);</span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//校验是否同意公司协议</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">checkAgree</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">document</span>.getElementById(<span class="string">"sub"</span>).disabled=!<span class="built_in">document</span>.getElementById(<span class="string">"agree"</span>).checked;</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//提交判断</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">checkSub</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">					checkUname();</span><br><span class="line">					checkPwd();</span><br><span class="line">					checkPwd2();</span><br><span class="line">					checkPhone();</span><br><span class="line">					checkMail();</span><br><span class="line">					checkAddress();</span><br><span class="line">					checkFav();</span><br><span class="line"><span class="actionscript">					<span class="keyword">return</span> checkUname()&amp;&amp;checkPwd()&amp;&amp;checkPwd2()&amp;&amp;checkPhone()&amp;&amp;checkMail()&amp;&amp;checkAddress()&amp;&amp;checkFav();</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">/*-------------------------------------------------------------------------------------------------*/</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">//封装校验:相同的保留，不同的传参。</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">checkField</span><span class="params">(id,reg)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取用户数据</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> inp=<span class="built_in">document</span>.getElementById(id);</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">var</span> va=inp.value;</span></span><br><span class="line"><span class="actionscript">				 	<span class="keyword">var</span> alt=inp.alt;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//创建校验规则</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取span对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> span=<span class="built_in">document</span>.getElementById(id+<span class="string">"Span"</span>)</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//开始校验</span></span></span><br><span class="line"><span class="actionscript">					<span class="keyword">if</span>(va==<span class="string">""</span> ||va==<span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//输出校验结果</span></span></span><br><span class="line"><span class="actionscript">						span.innerHTML=alt+<span class="string">"不能为空"</span>;</span></span><br><span class="line"><span class="actionscript">						span.style.color=<span class="string">"red"</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">					&#125;<span class="keyword">else</span> <span class="keyword">if</span>(reg.test(va))&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//输出校验结果</span></span></span><br><span class="line"><span class="actionscript">							span.innerHTML=alt+<span class="string">"ok"</span>;</span></span><br><span class="line"><span class="actionscript">							span.style.color=<span class="string">"green"</span>;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">					&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//输出校验结果</span></span></span><br><span class="line"><span class="actionscript">							span.innerHTML=alt+<span class="string">"不符合规则"</span>;</span></span><br><span class="line"><span class="actionscript">							span.style.color=<span class="string">"red"</span>;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">					&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"createCode()"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">onsubmit</span>=<span class="string">"return checkSub()"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"80px"</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span> <span class="attr">id</span>=<span class="string">"uname"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onblur</span>=<span class="string">"checkUname()"</span> <span class="attr">alt</span>=<span class="string">"用户名"</span>/&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"unameSpan"</span>&gt;</span>*2-4位汉字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">id</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onblur</span>=<span class="string">"checkPwd()"</span>/&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"pwdSpan"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd2"</span> <span class="attr">id</span>=<span class="string">"pwd2"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onblur</span>=<span class="string">"checkPwd2()"</span>/&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"pwd2Span"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>手机号:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phone"</span> <span class="attr">id</span>=<span class="string">"phone"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">"手机号"</span> <span class="attr">onblur</span>=<span class="string">"checkPhone()"</span>/&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"phoneSpan"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>邮箱：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"mail"</span> <span class="attr">id</span>=<span class="string">"mail"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">"邮箱"</span> <span class="attr">onblur</span>=<span class="string">"checkMail()"</span>/&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"mailSpan"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">						</span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">						男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span></span><br><span class="line">						女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>籍贯:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">onchange</span>=<span class="string">"checkAddress()"</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"addressSpan"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>爱好:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">onclick</span>=<span class="string">"checkFav()"</span>/&gt;</span>LOL</span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">onclick</span>=<span class="string">"checkFav()"</span>/&gt;</span>睡觉</span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"3"</span> <span class="attr">onclick</span>=<span class="string">"checkFav()"</span>/&gt;</span>吃饭<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"4"</span> <span class="attr">onclick</span>=<span class="string">"checkFav()"</span>/&gt;</span>打豆豆</span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"5"</span> <span class="attr">onclick</span>=<span class="string">"checkFav()"</span>/&gt;</span>看电影</span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"6"</span> <span class="attr">onclick</span>=<span class="string">"checkFav()"</span> /&gt;</span>听歌</span><br><span class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"favSpan"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>个人介绍:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"intro"</span> <span class="attr">rows</span>=<span class="string">"4"</span> <span class="attr">cols</span>=<span class="string">"40"</span> <span class="attr">id</span>=<span class="string">"intro"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">						</span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>验证码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"code"</span> <span class="attr">id</span>=<span class="string">"code"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"width: 100px;"</span> <span class="attr">onblur</span>=<span class="string">"checkCode()"</span>/&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"codeSpan"</span> <span class="attr">onclick</span>=<span class="string">"createCode()"</span> <span class="attr">style</span>=<span class="string">"background-image: url(img/code.jpg.gif);color: black;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"agree"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">"checkAgree()"</span>/&gt;</span>是否同意本公司协议<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"sub"</span> <span class="attr">value</span>=<span class="string">"立即注册"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>b.jpg<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405123004.jpg"  alt=""><br>code.jpg.gif<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405123007.gif"  alt=""></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>表单校验</tag>
        <tag>案例</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-14</title>
    <url>/19184.html</url>
    <content><![CDATA[<h2 id="js操作form表单"><a href="#js操作form表单" class="headerlink" title="js操作form表单"></a>js操作form表单</h2><ul>
<li>获取form表单对象<ul>
<li>使用id:var fm=document.getElementById(“fm”);</li>
<li><strong>使用name属性:var frm=document.frm;—-少见</strong></li>
<li><strong>获取form下的所有表单元素对象集合：fm.elements</strong></li>
</ul>
</li>
<li>form表单的常用方法<ul>
<li><strong>表单对象.submit();—-提交表单数据。</strong></li>
</ul>
</li>
<li>form的属性操作：<ul>
<li><strong>表单对象名.action=”新的值”—-动态的改变数据的提交路径</strong></li>
<li><strong>表单对象名.method=”新的值”—-动态的改变提交方式（get/post)</strong></li>
</ul>
</li>
<li>js表单元素的通用属性<ul>
<li>只读模式:<ul>
<li><strong>readonly=”readonly”—-不可以更改，但是数据可以提交</strong></li>
</ul>
</li>
<li>关闭模式：<ul>
<li><strong>disabled=”disabled”—-不可以进行任何的操作，数据不会提交。</strong><a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>js操作form表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//</span></span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testForm</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取form表对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> fm=<span class="built_in">document</span>.getElementById(<span class="string">"fm"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//alert(fm);</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//使用form表单的name属性值来获取</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> frm=<span class="built_in">document</span>.frm;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//alert(frm===fm);</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取form表单元素对象集合</span></span></span><br><span class="line"><span class="actionscript">					<span class="comment">//alert(fm.elements.length);</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//form表单的常用方法</span></span></span><br><span class="line"><span class="actionscript">					<span class="comment">//fm.submit();很重要</span></span></span><br><span class="line">					fm.reset();</span><br><span class="line"><span class="actionscript">				<span class="comment">//form的属性操作</span></span></span><br><span class="line"><span class="actionscript">					fm.action=<span class="string">"http://www.baidu.com/s"</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>js操作form表单<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试操作form"</span> <span class="attr">onclick</span>=<span class="string">"testForm()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">id</span>=<span class="string">"fm"</span> <span class="attr">name</span>=<span class="string">"frm"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">b</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span> <span class="attr">id</span>=<span class="string">"uname"</span> <span class="attr">value</span>=<span class="string">"只读"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">id</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">""</span>  <span class="attr">disabled</span>=<span class="string">"disabled"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"登录"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="js操作多选框单选框"><a href="#js操作多选框单选框" class="headerlink" title="js操作多选框单选框"></a>js操作多选框单选框</h2></li>
</ul>
</li>
</ul>
</li>
<li><strong>单选框：被选中状态下在js中checked属性值为true,未选中状态为false;</strong></li>
<li><strong>下拉框：被选择的option对象在js中selected属性值为true，未选中为false</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>操作表单元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//多选框操作</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testCheckBox</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取所有的多选元素对象数组</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> favs=<span class="built_in">document</span>.getElementsByName(<span class="string">"fav"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//遍历数组</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;favs.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">if</span>(favs[i].checked)&#123;</span></span><br><span class="line"><span class="actionscript">								alert(favs[i].value+<span class="string">":"</span>+favs[i].checked);</span></span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//全选</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testCheckBox2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> favs=<span class="built_in">document</span>.getElementsByName(<span class="string">"fav"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;favs.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">						favs[i].checked=<span class="literal">true</span>;</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//反选</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testCheckBox3</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> favs=<span class="built_in">document</span>.getElementsByName(<span class="string">"fav"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;favs.length;i++)&#123;</span></span><br><span class="line">						favs[i].checked=!favs[i].checked;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//操作下拉框</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testSel</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取下拉框对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> sel=<span class="built_in">document</span>.getElementById(<span class="string">"address"</span>);</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//alert(sel.value);</span></span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取option对象集合</span></span></span><br><span class="line"><span class="actionscript">					<span class="keyword">var</span> os=sel.options;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;os.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">if</span>(os[i].selected)&#123;</span></span><br><span class="line">							</span><br><span class="line"><span class="actionscript">						alert(os[i].value+<span class="string">":"</span>+os[i].text);</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>操作表单元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">b</span>&gt;</span>操作多选框<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span>远走高飞<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"2"</span> /&gt;</span>当<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span>李白<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"4"</span> /&gt;</span>杜甫<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span>see you again<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"6"</span> /&gt;</span>fade<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"播放"</span> <span class="attr">onclick</span>=<span class="string">"testCheckBox()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"全选"</span> <span class="attr">onclick</span>=<span class="string">"testCheckBox2()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"反选"</span> <span class="attr">onclick</span>=<span class="string">"testCheckBox3()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">onchange</span>=<span class="string">"testSel()"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> &gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JavaScript</tag>
        <tag>document</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-13</title>
    <url>/34993.html</url>
    <content><![CDATA[<p>操作HTLML的文档结构，就是通过js动态的添加，删除标签，标签属性，标签绑定事件···</p>
<h2 id="js操作HTML文档结构-innerHTML"><a href="#js操作HTML文档结构-innerHTML" class="headerlink" title="js操作HTML文档结构-innerHTML"></a>js操作HTML文档结构-innerHTML</h2><ul>
<li><strong>元素对象.innerHTML=div.innerHTML+”内容”—-增加节点</strong></li>
<li><strong>元素对象.innerHTML=””—-删除所有子节点</strong></li>
<li><strong>父节点.removeChild(子节点对象)—-删除指定的子节点。</strong><a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>js操作元素的文档结构<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> showdiv=<span class="built_in">document</span>.getElementById(<span class="string">"showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//给div追加上传按钮</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">				showdiv.innerHTML=showdiv.innerHTML+"<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'file'</span> <span class="attr">value</span>=<span class="string">''</span> /&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">'删除'</span> <span class="attr">onclick</span>=<span class="string">'delInp(this)'</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>";					</span></span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">delInp</span><span class="params">(btn)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取父级div</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> showdiv=<span class="built_in">document</span>.getElementById(<span class="string">"showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取要删除的子div</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> cdiv=btn.parentNode;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//父div删除子div</span></span></span><br><span class="line">				showdiv.removeChild(cdiv);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>js操作元素的文档结构<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"继续上传"</span> <span class="attr">onclick</span>=<span class="string">"testAdd()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="js操作HTML文档结构-document-createElement-“标签名”"><a href="#js操作HTML文档结构-document-createElement-“标签名”" class="headerlink" title="js操作HTML文档结构-document.createElement(“标签名”)"></a>js操作HTML文档结构-document.createElement(“标签名”)</h2></li>
<li><strong>var obj=document.createElement(“标签名”);—-创建标签</strong></li>
<li><strong>元素对象名.appendChild(obj);—-添加标签</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>js操作文档结构2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			js操作文档结构2：</span></span><br><span class="line"><span class="comment">				获取元素对象</span></span><br><span class="line"><span class="comment">					var obj=document.createElement("标签名");</span></span><br><span class="line"><span class="comment">					元素对象名.appendChild(obj);</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">testOper2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span>  showdiv=<span class="built_in">document</span>.getElementById(<span class="string">"showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//创建input元素对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> inp=<span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span></span><br><span class="line"><span class="actionscript">				inp.type=<span class="string">"file"</span>;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//创建按钮元素对象</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> btn=<span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span></span><br><span class="line"><span class="actionscript">				btn.type=<span class="string">"button"</span>;</span></span><br><span class="line"><span class="actionscript">				btn.value=<span class="string">"删除"</span>;</span></span><br><span class="line"><span class="actionscript">				btn.onclick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">					showdiv.removeChild(inp);</span><br><span class="line">					showdiv.removeChild(btn);</span><br><span class="line">					showdiv.removeChild(br);</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//创建换行符</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> br=<span class="built_in">document</span>.createElement(<span class="string">"br"</span>);</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//将创建的元素对象存放到div中</span></span></span><br><span class="line">				showdiv.appendChild(inp);</span><br><span class="line">				showdiv.appendChild(btn);</span><br><span class="line">				showdiv.appendChild(br);	</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>js操作文档结构2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"继续上传"</span> <span class="attr">onclick</span>=<span class="string">"testOper2()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JavaScript</tag>
        <tag>document</tag>
        <tag>操作HTLML的文档结构</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-12</title>
    <url>/18544.html</url>
    <content><![CDATA[<h2 id="js操作HTML元素属性"><a href="#js操作HTML元素属性" class="headerlink" title="js操作HTML元素属性"></a>js操作HTML元素属性</h2><ul>
<li>首先获取元素对象</li>
<li>操作元素属性<ul>
<li>获取：<ul>
<li><strong>元素对象名.属性名。返回当前属性的属性值。—-固有</strong></li>
<li><strong>元素对象名.getAttribute(“属性名”);返回自定义属性的值—–自定义</strong></li>
</ul>
</li>
<li>修改<ul>
<li><strong>元素对象名.属性名=属性值</strong></li>
<li><strong>元素对象名.setAttribute(“属性名”,”属性值”);//修改自定义属性的值—-自定义</strong><a id="more"></a></li>
</ul>
</li>
</ul>
</li>
<li>注意：<ul>
<li>尽量的不要去修改元素的id值和name属性值。</li>
<li><strong>使用自定义方式获取固有属性内容，value的值获取的是默认值，不能够获取到实时的用户数据。</strong></li>
<li><strong>自定义的属性的获取和修改使用的方法和格式同servlet中的相似</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>js操作HTML的元素属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//声明函数---固有属性</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取属性值</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testField</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> inp=<span class="built_in">document</span>.getElementById(<span class="string">"uname"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素属性值</span></span></span><br><span class="line"><span class="actionscript">					alert(inp.type+<span class="string">":"</span>+inp.name+<span class="string">":"</span>+inp.id+<span class="string">":"</span>+inp.value);	</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//修改元素属性值</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testField2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> inp=<span class="built_in">document</span>.getElementById(<span class="string">"uname"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//修改元素属性</span></span></span><br><span class="line"><span class="actionscript">						inp.value=<span class="string">"哈哈"</span>;</span></span><br><span class="line"><span class="actionscript">						inp.type=<span class="string">"button"</span>;</span></span><br><span class="line">				&#125;</span><br><span class="line">			</span><br><span class="line"><span class="actionscript">			<span class="comment">//声明函数---自定义属性</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//获取</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testOwnField</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> inp=<span class="built_in">document</span>.getElementById(<span class="string">"uname"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取自定义属性的值</span></span></span><br><span class="line"><span class="actionscript">						alert(inp.getAttribute(<span class="string">"abc"</span>));</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//修改</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testOwnField2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> inp=<span class="built_in">document</span>.getElementById(<span class="string">"uname"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//修改自定义属性的值</span></span></span><br><span class="line"><span class="actionscript">					inp.setAttribute(<span class="string">"abc"</span>,<span class="string">"呵呵"</span>);</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//使用自定义方式操作固有属性</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testOper</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> inp=<span class="built_in">document</span>.getElementById(<span class="string">"uname"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//操作对象属性</span></span></span><br><span class="line"><span class="actionscript">						alert(inp.getAttribute(<span class="string">"type"</span>));</span></span><br><span class="line"><span class="actionscript">						alert(inp.getAttribute(<span class="string">"value"</span>));</span></span><br><span class="line">				&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>js操作HTML的元素属性<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试获取元素属性--固有"</span> <span class="attr">onclick</span>=<span class="string">"testField()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试修改元素属性--固有"</span> <span class="attr">onclick</span>=<span class="string">"testField2()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试获取元素属性--自定义"</span> <span class="attr">onclick</span>=<span class="string">"testOwnField()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试修改元素属性--自定义"</span> <span class="attr">onclick</span>=<span class="string">"testOwnField2()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试操作元素自定义操作固有属性"</span> <span class="attr">onclick</span>=<span class="string">"testOper()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		用户名 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span> <span class="attr">id</span>=<span class="string">"uname"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">abc</span>=<span class="string">"嘿嘿"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="js操作元素内容"><a href="#js操作元素内容" class="headerlink" title="js操作元素内容"></a>js操作元素内容</h2><ul>
<li>首先获取元素对象</li>
<li>获取元素内容<ul>
<li><strong>元素对象名.innerHTML—-返回当前元素对象的所有内容，包括HTML标签</strong></li>
<li><strong>元素对象名.innerText—-返回当前元素对象的文本内容，不包括HTML标签</strong></li>
</ul>
</li>
<li>修改元素内容<ul>
<li><strong>元素对象名.innerHTML=”新的值”。—-会将原有内容覆盖，并HTML标签会被解析</strong></li>
<li><strong>元素对象名.innerHTML=元素对象名.innerHTML+”新的值”—-追加效果</strong></li>
<li><strong>元素对象名.innerText=”新的值”—-会将原有内容覆盖，但HTML标签不会被解析，会作为普通文本显示。</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>js操作元素内容学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明css--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-id">#div01</span>&#123;</span></span><br><span class="line">				width: 200px;</span><br><span class="line">				height: 200px;</span><br><span class="line">				border: solid 1px orange;</span><br><span class="line">			&#125;			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//获取元素内容</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">getContext</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> div=<span class="built_in">document</span>.getElementById(<span class="string">"div01"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素内容</span></span></span><br><span class="line">						alert(div.innerHTML);</span><br><span class="line">						alert(div.innerText);</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//修改元素内容</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">updateContext</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> div=<span class="built_in">document</span>.getElementById(<span class="string">"div01"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//修改元素对象内容</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						div.innerHTML="<span class="tag">&lt;<span class="name">b</span>&gt;</span>你先上，皇军给你殿后，八嘎<span class="tag">&lt;/<span class="name">b</span>&gt;</span>";</span></span></span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">updateContext2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> div=<span class="built_in">document</span>.getElementById(<span class="string">"div01"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//修改元素对象内容</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">						div.innerText="<span class="tag">&lt;<span class="name">b</span>&gt;</span>你先上，皇军给你殿后，八嘎<span class="tag">&lt;/<span class="name">b</span>&gt;</span>";</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>js操作元素内容学习<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试获取元素内容---innerHTML&amp;innerText"</span>  <span class="attr">onclick</span>=<span class="string">"getContext()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试修改元素内容--innerHTML"</span>  <span class="attr">onclick</span>=<span class="string">"updateContext()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试修改元素内容--innerText"</span>  <span class="attr">onclick</span>=<span class="string">"updateContext2()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div01"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">b</span>&gt;</span>皇军，前面有八路的干活。<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">b</span>&gt;</span>皇军，前面有八路的干活。<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="js操作元素样式"><a href="#js操作元素样式" class="headerlink" title="js操作元素样式"></a>js操作元素样式</h2></li>
</ul>
</li>
<li>获取元素对象</li>
<li>通过style属性<ul>
<li><strong>元素对象名.style.样式名=”样式值”—-添加或者修改</strong></li>
<li><strong>元素对象名.style.样式名=””—-删除样式,设置属性值为空</strong></li>
<li>注意:<ul>
<li><strong>以上操作，操作的是HTML的style属性声明中的样式。而不是其他css代码域中的样式。</strong></li>
</ul>
</li>
</ul>
</li>
<li>通过className<ul>
<li><strong>元素对象名.className=”新的值”—-添加类选择器样式或者修改类选择器样式</strong></li>
<li><strong>元素对象名.className=””—-为空，删除类样式。</strong></li>
<li>注意：<ul>
<li><strong>。js中使用用元素对象名.className=”新的值”就可以为改属性添加类名。在css代码域中，使用类选择器进行添加样式，从而css代码域中对其样式进行修改</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>js操作元素的样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明css--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-id">#showdiv</span>&#123;</span></span><br><span class="line">				width: 200px;</span><br><span class="line">				height: 200px;</span><br><span class="line">				border: solid 1px;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="css">			<span class="selector-class">.common</span>&#123;</span></span><br><span class="line">				width: 200px;</span><br><span class="line">				height: 200px;</span><br><span class="line">				border: solid 1px;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"><span class="css">			<span class="selector-class">.common2</span>&#123;</span></span><br><span class="line">				width: 200px;</span><br><span class="line">				height: 200px;</span><br><span class="line">				border: solid 1px;</span><br><span class="line">				background-color: aqua;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//js操作元素样式</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//js给元素操作样式---style</span></span></span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testOperCss</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">							<span class="keyword">var</span> showdiv=<span class="built_in">document</span>.getElementById(<span class="string">"showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//添加元素样式</span></span></span><br><span class="line"><span class="actionscript">							showdiv.style.backgroundColor=<span class="string">"#FFA500"</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//js修改元素样式</span></span></span><br><span class="line"><span class="actionscript">							showdiv.style.border=<span class="string">"solid 2px red"</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//js删除样式</span></span></span><br><span class="line"><span class="actionscript">							showdiv.style.border=<span class="string">""</span>;</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//js操作样式--className				</span></span></span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testOperCss2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//获取元素对象</span></span></span><br><span class="line"><span class="javascript">							<span class="keyword">var</span> div01=<span class="built_in">document</span>.getElementById(<span class="string">"div01"</span>);</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//获取</span></span></span><br><span class="line">							alert(div01.className);</span><br><span class="line"><span class="actionscript">						<span class="comment">//添加或者修改</span></span></span><br><span class="line"><span class="actionscript">							div01.className=<span class="string">"common2"</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//删除</span></span></span><br><span class="line"><span class="actionscript">							div01.className=<span class="string">""</span>;</span></span><br><span class="line">												</span><br><span class="line">					&#125;	</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>js操作元素的样式<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试操作元素样式--style"</span> <span class="attr">onclick</span>=<span class="string">"testOperCss()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试操作元素样式--className"</span> <span class="attr">onclick</span>=<span class="string">"testOperCss2()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span> <span class="attr">style</span>=<span class="string">"border: solid 2px blue;"</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div01"</span> <span class="attr">class</span>=<span class="string">"common"</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JavaScript</tag>
        <tag>document</tag>
        <tag>操作元素属性</tag>
        <tag>操作元素内容学习</tag>
        <tag>操作元素样式</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-11</title>
    <url>/18736.html</url>
    <content><![CDATA[<h2 id="document对象的概念"><a href="#document对象的概念" class="headerlink" title="document对象的概念"></a>document对象的概念</h2><p><strong>浏览器对外提供的支持js的用来操作HTML文档的一个对象，此对象封存的HTML文档的所有信息。所有的dom操作都是操控dom对象里的信息对html文档进行改变</strong></p>
<a id="more"></a>
<h2 id="document的使用-获取HTML元素对象"><a href="#document的使用-获取HTML元素对象" class="headerlink" title="document的使用-获取HTML元素对象"></a>document的使用-获取HTML元素对象</h2><ul>
<li>获取HTML元素对象-<strong>window可以省略</strong><ul>
<li>直接获取方式：<ul>
<li><strong>通过id-window.document.getElementById(id名);</strong></li>
<li>通过name属性值-document.getElementsByName(name名);</li>
<li>通过标签名-document.getElementsByTagName(标签名);</li>
<li><strong>通过class属性值-document.getElementsByClassName(class名);</strong></li>
</ul>
</li>
<li>间接获取方式：<ul>
<li>父子关系<ul>
<li>先获取父级元素对象，再通过父级对象获取子元素对象</li>
<li>var showdiv=document.getElementById(“showdiv”);</li>
<li>var childs=showdiv.<strong>childNodes;</strong></li>
</ul>
</li>
<li>子父关系<ul>
<li>先获取子元素对象，再通过子元素对象获取父级元素对象</li>
<li>var inp=document.getElementById(“inp”);</li>
<li>var div=inp.<strong>parentNode;</strong></li>
</ul>
</li>
<li>兄弟关系<ul>
<li>var inp=document.getElementById(“inp”);</li>
<li>var preEle= inp.<strong>previousSibling;</strong>//弟获取兄</li>
<li>var nextEle=inp.<strong>nextSibling</strong>;//兄获取弟<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>document对象学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//document获取元素对象</span></span></span><br><span class="line"><span class="actionscript">					<span class="comment">//直接方式</span></span></span><br><span class="line"><span class="actionscript">						<span class="comment">//id方式</span></span></span><br><span class="line"><span class="actionscript">						<span class="function"><span class="keyword">function</span> <span class="title">testGetEleById</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">							<span class="keyword">var</span> inp=<span class="built_in">window</span>.document.getElementById(<span class="string">"uname"</span>);</span></span><br><span class="line">							alert(inp);</span><br><span class="line">						&#125;	</span><br><span class="line"><span class="actionscript">						<span class="comment">//name方式</span></span></span><br><span class="line"><span class="actionscript">						<span class="function"><span class="keyword">function</span> <span class="title">testGetEleByName</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">							<span class="keyword">var</span> favs=<span class="built_in">document</span>.getElementsByName(<span class="string">"fav"</span>);</span></span><br><span class="line">							alert(favs);</span><br><span class="line">						&#125;	</span><br><span class="line"><span class="actionscript">						<span class="comment">//标签名</span></span></span><br><span class="line"><span class="actionscript">						<span class="function"><span class="keyword">function</span> <span class="title">testGetEleByTagName</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">							<span class="keyword">var</span> inps=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>);</span></span><br><span class="line">							alert(inps);</span><br><span class="line">						&#125;</span><br><span class="line"><span class="actionscript">						<span class="comment">//class属性</span></span></span><br><span class="line"><span class="actionscript">						<span class="function"><span class="keyword">function</span> <span class="title">testGetEleByClassName</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">							<span class="keyword">var</span> inps=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"common"</span>);</span></span><br><span class="line">							alert(inps.length);</span><br><span class="line">						&#125;</span><br><span class="line"><span class="actionscript">					<span class="comment">//间接获取方式</span></span></span><br><span class="line"><span class="actionscript">						<span class="comment">//父子关系</span></span></span><br><span class="line"><span class="actionscript">							<span class="function"><span class="keyword">function</span> <span class="title">testParent</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">								<span class="comment">//获取父级元素对象</span></span></span><br><span class="line"><span class="javascript">								<span class="keyword">var</span> showdiv=<span class="built_in">document</span>.getElementById(<span class="string">"showdiv"</span>);</span></span><br><span class="line"><span class="actionscript">								<span class="comment">//获取所有的子元素对象数组</span></span></span><br><span class="line"><span class="actionscript">								<span class="keyword">var</span> childs=showdiv.childNodes;</span></span><br><span class="line">								alert(childs.length);</span><br><span class="line">							&#125;</span><br><span class="line"><span class="actionscript">						<span class="comment">//子父关系</span></span></span><br><span class="line"><span class="actionscript">							<span class="function"><span class="keyword">function</span> <span class="title">testChild</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">								<span class="comment">//获取子元素对象</span></span></span><br><span class="line"><span class="javascript">									<span class="keyword">var</span> inp=<span class="built_in">document</span>.getElementById(<span class="string">"inp"</span>);</span></span><br><span class="line"><span class="actionscript">									<span class="keyword">var</span> div=inp.parentNode;</span></span><br><span class="line">									alert(div);</span><br><span class="line">							&#125;</span><br><span class="line"><span class="actionscript">						<span class="comment">//兄弟关系</span></span></span><br><span class="line"><span class="actionscript">							<span class="function"><span class="keyword">function</span> <span class="title">testBrother</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">								</span><br><span class="line"><span class="javascript">									<span class="keyword">var</span> inp=<span class="built_in">document</span>.getElementById(<span class="string">"inp"</span>);</span></span><br><span class="line"><span class="actionscript">									<span class="keyword">var</span> preEle= inp.previousSibling;<span class="comment">//弟获取兄</span></span></span><br><span class="line"><span class="actionscript">									<span class="keyword">var</span> nextEle=inp.nextSibling;<span class="comment">//兄获取弟</span></span></span><br><span class="line"><span class="actionscript">									alert(preEle+<span class="string">":::"</span>+nextEle);</span></span><br><span class="line">								</span><br><span class="line">							&#125;</span><br><span class="line">						</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.common</span>&#123;&#125;</span></span><br><span class="line"><span class="css">			<span class="selector-id">#showdiv</span>&#123;</span></span><br><span class="line">				border: solid 2px orange;</span><br><span class="line">				width: 300px;</span><br><span class="line">				height: 300px;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>document对象的概念和获取元素对象学习<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		直接获取方式学习：<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试获取HTML元素对象--id"</span> <span class="attr">onclick</span>=<span class="string">"testGetEleById()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试获取HTML元素对象---name"</span> <span class="attr">onclick</span>=<span class="string">"testGetEleByName()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试获取HTML元素对象---TagName"</span> <span class="attr">onclick</span>=<span class="string">"testGetEleByTagName()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试获取HTML元素对象---className"</span> <span class="attr">onclick</span>=<span class="string">"testGetEleByClassName()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">			用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span> <span class="attr">id</span>=<span class="string">"uname"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"common"</span>/&gt;</span>唱歌</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"common"</span>/&gt;</span>跳舞</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>睡觉</span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">id</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span>打游戏</span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		间接获取方式学习：<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试父子关系"</span>  <span class="attr">onclick</span>=<span class="string">"testParent()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试子父关系"</span>  <span class="attr">onclick</span>=<span class="string">"testChild()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试兄弟关系"</span>  <span class="attr">onclick</span>=<span class="string">"testBrother()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"inp"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JavaScript</tag>
        <tag>document</tag>
        <tag>获取HTML元素对象</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-10</title>
    <url>/35313.html</url>
    <content><![CDATA[<h2 id="BOM浏览器对象模型"><a href="#BOM浏览器对象模型" class="headerlink" title="BOM浏览器对象模型"></a>BOM浏览器对象模型</h2><p><strong>BOM浏览器对象模型是规范浏览器对js语言的支持(js调用浏览器本身的功能)。BOM的具体实现是window对象</strong></p>
<h2 id="window对象学习-1"><a href="#window对象学习-1" class="headerlink" title="window对象学习-1"></a>window对象学习-1</h2><ul>
<li><strong>window对象不用new，直接进行使用即可，类似Math的使用方式，window关键字可以省略不写。</strong><a id="more"></a></li>
<li>框体方法<ul>
<li><strong>alert:警告框    提示一个警告信息，没有返回</strong></li>
<li><strong>confirm:确认框  提示用户选择一项操作（确定/取消）</strong><ul>
<li><strong>点击确定 返回true</strong></li>
<li><strong>点击取消  返回false</strong></li>
</ul>
</li>
<li>prompt:提示框， 提示用某个信息的录入或者说收集<ul>
<li>点击确定，返回当前用书录入的数据，默认返回空字符串</li>
<li>点击取消,返回null</li>
</ul>
</li>
</ul>
</li>
<li>定时和间隔执行方法<ul>
<li>setTimeout:指定的时间后执行指定的函数<ul>
<li>参数1：函数对象</li>
<li>参数2：时间，单位毫秒。</li>
<li>返回值：返回当前定时器的id</li>
</ul>
</li>
<li>setInterval:每间隔指定的时间执行指定的函数<ul>
<li>参数1：函数对象</li>
<li>参数2：时间，单位毫秒。</li>
<li>返回值：返回当前间隔器的id</li>
</ul>
</li>
<li>clearTimeout:用来停止指定的定时器<ul>
<li>参数：定时器的id                                </li>
</ul>
</li>
<li>clearInterval:用来停止指定的间隔器<ul>
<li>参数：间隔器的id</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>window对象学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//框体方法学习：</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//警告框</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testAlert</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> a=<span class="built_in">window</span>.alert(<span class="string">"我是警告框"</span>);</span></span><br><span class="line">					alert(a);</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//确认框</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testConfirm</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> flag=<span class="built_in">window</span>.confirm(<span class="string">"你确定要删除吗?"</span>);</span></span><br><span class="line">					alert(flag);</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//提示框</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testPrompt</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> str=<span class="built_in">window</span>.prompt(<span class="string">"请输入昵称："</span>);</span></span><br><span class="line">					alert(str);</span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript"><span class="comment">/*----------------------------------------------------------------------------------------------*/</span></span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> idi;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> ids</span></span><br><span class="line"><span class="actionscript">				<span class="comment">//定时执行</span></span></span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testSetTimeout</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">						idi=<span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">							alert(<span class="string">"我是定时执行"</span>);</span></span><br><span class="line">						&#125;,3000);</span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//间隔执行</span></span></span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testSetInterval</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">						ids=<span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">							alert(<span class="string">"我是间隔执行"</span>);</span></span><br><span class="line">						&#125;,2000);</span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//停止当前的定时方法</span></span></span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testClearTimeout</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">window</span>.clearTimeout(idi);</span></span><br><span class="line">					&#125;				</span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testClearInterval</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">window</span>.clearInterval(ids);	</span></span><br><span class="line">					&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>window对象学习<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试警告框"</span> <span class="attr">onclick</span>=<span class="string">"testAlert();"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试确认框"</span> <span class="attr">onclick</span>=<span class="string">"testConfirm()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试提示框"</span>  <span class="attr">onclick</span>=<span class="string">"testPrompt()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试setTimeout--定时执行"</span>  <span class="attr">onclick</span>=<span class="string">"testSetTimeout()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试setInterval--间隔执行"</span>  <span class="attr">onclick</span>=<span class="string">"testSetInterval()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试clearTimeout--停止指定的定时器"</span> <span class="attr">onclick</span>=<span class="string">"testClearTimeout()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试clearInterval--停止指定的间隔器"</span> <span class="attr">onclick</span>=<span class="string">"testClearInterval()"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="window对象学习-2"><a href="#window对象学习-2" class="headerlink" title="window对象学习-2"></a>window对象学习-2</h2><ul>
<li>子窗口方法<ul>
<li><strong>window.open(‘子页面的资源(相对路径)’,’打卡方式’,’配置’);</strong></li>
<li><strong>示例：window.open(‘son.html’,’newwindow’,’height=400, width=600, top=100px,left=320px, toolbar=yes, menubar=yes, scrollbars=yes, resizable=yes,location=no, status=yes’);</strong></li>
<li><strong>注意:关闭子页面的方法window.close(),但是此方法只能关闭open方法打开的子页面。</strong></li>
<li><strong>子页面调用父页面的函数：window.opener.父页面的函数</strong></li>
</ul>
</li>
<li>window对象的常用属性<ul>
<li>地址栏属性:location<ul>
<li><strong>window.location.href=”新的资源路径（相对路径/URL）”</strong></li>
<li><strong>window.location.reload()重新加载页面资源</strong></li>
</ul>
</li>
<li>历史记录属性<ul>
<li><strong>window.history.forward() 页面资源前进，历史记录的前进。</strong></li>
<li><strong>window.history.back()    页面资源后退，历史记录后退</strong></li>
<li><strong>window.history.go(index) 跳转到指定的历史记录资源</strong></li>
<li><strong>注意window.history.go(0)相当于刷新。</strong></li>
</ul>
</li>
<li>屏幕属性<ul>
<li>window.srceen.width;//获取屏幕的宽度分辨率</li>
<li>window.screen.height;//获取屏幕的高度分辨率</li>
</ul>
</li>
<li>浏览器配置属性<ul>
<li><strong>window.navigator.userAgent</strong></li>
</ul>
</li>
<li>主体面板属性(document)<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>js的window对象学习2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">//1、子页面方法</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testOpen</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">window</span>.open(<span class="string">'son.html'</span>,<span class="string">'newwindow'</span>,<span class="string">'height=400, width=600, top=100px,left=320px, toolbar=yes, menubar=yes, scrollbars=yes, resizable=yes,location=no, status=yes'</span>);</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//2、子页面调用父页面的函数</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testFather</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					alert(<span class="string">"父页面"</span>);</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">/*----------------------------------------------------------------------------*/</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">//1、地址栏属性学习--location</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testLocation</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">window</span>.location.href=<span class="string">"http://www.baidu.com"</span>;</span></span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testLocation2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">window</span>.location.reload();</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//2、历史记录属性</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testHistory</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">window</span>.history.forward();</span></span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testHistory2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">window</span>.history.go(<span class="number">0</span>);</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//3、屏幕属性学习</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testScreen</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> x=<span class="built_in">window</span>.screen.width;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> y=<span class="built_in">window</span>.screen.height;</span></span><br><span class="line"><span class="actionscript">					alert(x+<span class="string">":"</span>+y)</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//4、浏览器配置属性</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testNa</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					alert(<span class="built_in">window</span>.navigator.userAgent);</span></span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>js的window对象学习2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试open"</span> <span class="attr">onclick</span>=<span class="string">"testOpen()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试地址栏属性--location--跳转资源"</span> <span class="attr">onclick</span>=<span class="string">"testLocation()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试地址栏属性--location--重新加载资源"</span> <span class="attr">onclick</span>=<span class="string">"testLocation2()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试历史记录属性--history-前进"</span>  <span class="attr">onclick</span>=<span class="string">"testHistory();"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试历史记录属性--history-go"</span>  <span class="attr">onclick</span>=<span class="string">"testHistory2();"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试屏幕属性--screen"</span> <span class="attr">onclick</span>=<span class="string">"testScreen()"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试浏览器配置属性--navigator"</span> <span class="attr">onclick</span>=<span class="string">"testNa()"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JavaScript</tag>
        <tag>BOM</tag>
        <tag>window对象</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-9</title>
    <url>/30419.html</url>
    <content><![CDATA[<h2 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h2><p><strong>解释：当我们的行为动作满足了一定的条件后，会触发某类事务的执行。作用：主要是结合js的函数来使用。</strong></p>
<a id="more"></a>

<h2 id="单双击事件"><a href="#单双击事件" class="headerlink" title="单双击事件"></a>单双击事件</h2><ul>
<li><strong>单击：onclick            当鼠标单击的时候会触发</strong></li>
<li><strong>双击：ondblclick        当鼠标双击的时候会被触发</strong></li>
</ul>
<h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><ul>
<li><strong>onmouseover            当鼠标悬停在某个HTML元素上的时候触发</strong></li>
<li><strong>onmousemove            当鼠标在某个HTML元素上移动的时候触发</strong></li>
<li><strong>onmouseout            当鼠标在某个HTML元素上移出的时候触发</strong></li>
</ul>
<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><ul>
<li><strong>onkeyup                当键盘在某个HTML元素上弹起的时候触发</strong></li>
<li><strong>onkeydown            当键盘在某个HTML元素上下压的时候触发</strong></li>
</ul>
<h2 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h2><ul>
<li><strong>onfocus                当某个HTML元素获取焦点的时候触发</strong></li>
<li><strong>onblur                当某个HTML元素失去焦点的时候触发</strong></li>
</ul>
<h2 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h2><ul>
<li><strong>onload                当页面加载成功后触发。</strong></li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>js中添加事件的第一种方式：<ul>
<li><strong>在HTML上直接使用事件属性进行添加，属性值为所监听执行的函数。</strong></li>
</ul>
</li>
<li><strong>js中的事件只有在当前HTML元素上有效。</strong></li>
<li><strong>一个HTML元素可以添加多个不同的事件。</strong></li>
<li><strong>一个事件可以监听触发多个函数的执行,但是不同的函数要使用分号间隔</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>js的事件机制学习1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="comment">/*声明js函数*/</span></span></span><br><span class="line"><span class="actionscript">				<span class="comment">//单击事件</span></span></span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testOnclick</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我是单击"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//测试双击</span></span></span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testOndblclick</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我是双击"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//鼠标事件</span></span></span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testOnmouseover</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我是鼠标悬停事件"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testOnmousemove</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我被移动了"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testOnmouseout</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我被移出了"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//键盘事件</span></span></span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testOnkeyup</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我是键盘弹起事件"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testOnkeydown</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我是键盘按下事件"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//焦点事件</span></span></span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testOnfocus</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">document</span>.getElementById(<span class="string">"showdiv"</span>).innerHTML=<span class="string">"哈哈"</span>;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我是获取焦点事件"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testOnblur</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我是失去焦点事件"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//页面加载</span></span></span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">testOnload</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"我是页面加载事件"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">				<span class="comment">//测试</span></span></span><br><span class="line"><span class="actionscript">					<span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">						alert(<span class="string">"测试一个事件的多个函数执行"</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">			<span class="selector-id">#showdiv</span>&#123;</span></span><br><span class="line">				width: 300px;</span><br><span class="line">				height: 300px;</span><br><span class="line">				border: solid 1px;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"testOnload()"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>js的事件机制学习1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试单击"</span> <span class="attr">onclick</span>=<span class="string">"testOnclick();test();"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"测试双击"</span> <span class="attr">ondblclick</span>=<span class="string">"testOndblclick();"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showdiv"</span> <span class="attr">onmouseover</span>=<span class="string">"testOnmouseover();"</span> <span class="attr">onmousemove</span>=<span class="string">"testOnmousemove()"</span> <span class="attr">onmouseout</span>=<span class="string">"testOnmouseout()"</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		键盘事件学习：	<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			键盘弹起事件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onkeyup</span>=<span class="string">"testOnkeyup();"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			键盘下压事件： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onkeydown</span>=<span class="string">"testOnkeydown()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">			焦点事件学习：<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				获取焦点： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onfocus</span>=<span class="string">"testOnfocus();"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				失去焦点： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>  <span class="attr">onblur</span>=<span class="string">"testOnblur();"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件机制学习"><a href="#事件机制学习" class="headerlink" title="事件机制学习"></a>事件机制学习</h2><ul>
<li><strong>给合适的HTML标签添加合适的事件</strong><ul>
<li><strong>onchange—-select下拉框</strong><ul>
<li><strong>onchange是标签内容改变时发生</strong></li>
</ul>
</li>
<li><strong>onload——body标签</strong></li>
<li><strong>单双击——-用户会进行点击动作的HTML元素</strong></li>
<li><strong>鼠标事件——用户会进行鼠标移动操作的。</strong></li>
<li><strong>键盘事件——用户会进行键盘操作的HTML元素。</strong></li>
</ul>
</li>
<li>给HTML元素添加多个事件时，注意<strong>事件之间的冲突</strong><ul>
<li>举个栗子：单击和双击</li>
<li><strong>当事件的触发条件包含相同部分的时候，会产生事件之间的冲突。</strong></li>
</ul>
</li>
<li><strong>事件的阻断</strong><ul>
<li>当事件所监听的函数的将返回值返回给事件时：<ul>
<li><strong>false：则会阻断当前事件所在的HTML标签的功能</strong></li>
<li><strong>true:则继续执行当前事件所在的HTML标签的功能</strong></li>
</ul>
</li>
</ul>
</li>
<li>超链接调用js函数<ul>
<li><strong>&lt;-a href=”javascript:函数名()”&gt;调用js函数&lt;-/a&gt;</strong></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>js的事件机制二<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">			</span><br><span class="line"><span class="actionscript">			<span class="comment">//值改变事件</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testOnchange</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					alert(<span class="string">"我被改变了"</span>);</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//单击事件</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testOnclick</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					alert(<span class="string">"今天天气真好，不冷不热，贼适合学习"</span>);</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//双击事件</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testOndblclick</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					alert(<span class="string">"老师说的对"</span>);</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//事件的阻断</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testA</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					alert(<span class="string">"事件的阻断"</span>);</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">				&#125;</span><br><span class="line"><span class="actionscript">			<span class="comment">//超链接调用js函数</span></span></span><br><span class="line"><span class="actionscript">				<span class="function"><span class="keyword">function</span> <span class="title">testHref</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">					alert(<span class="string">"我是超链接调用"</span>);</span></span><br><span class="line">				&#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>js的事件机制二<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		值改变事件: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onchange</span>=<span class="string">"testOnchange();"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">onchange</span>=<span class="string">"testOnchange();"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		事件的冲突：<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"事件的冲突"</span> <span class="attr">onclick</span>=<span class="string">"testOnclick()"</span> <span class="attr">ondblclick</span>=<span class="string">"testOndblclick()"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		事件的阻断：<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">onclick</span>=<span class="string">"return testA()"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		超链接调用js函数:</span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:testHref()"</span>&gt;</span>调用js函数<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JavaScript</tag>
        <tag>事件</tag>
        <tag>事件机制</tag>
        <tag>事件的阻断</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-8</title>
    <url>/46611.html</url>
    <content><![CDATA[<h1 id="常用的对象和方法"><a href="#常用的对象和方法" class="headerlink" title="常用的对象和方法"></a>常用的对象和方法</h1><h2 id="String对象学习"><a href="#String对象学习" class="headerlink" title="String对象学习"></a>String对象学习</h2><ul>
<li>声明String对象-new String(字符串)<ul>
<li><strong>var str=new String(“abcdefg”);//声明String对象存储字符串</strong></li>
<li><strong>var  str2=”MNP”;//简写形式</strong><a id="more"></a></li>
</ul>
</li>
<li><strong>字符串大小写的转换-toUpperCase(),toLowerCase()</strong><ul>
<li>str.toUpperCase;//将字符串转换为大写</li>
<li>str2.toLowerCase();//将字符串转换为小写</li>
</ul>
</li>
<li><strong>字符串的切割-s.split(指定字符)</strong><ul>
<li>var s=”哈哈,嘿嘿,呵呵”;</li>
<li>var s1=s.split(“,”);//按照指定的字符切割字符串，返回数组。</li>
<li>alert(s1.length);</li>
</ul>
</li>
<li><strong>字符串的截取-substr(开始位置，截取长度);</strong><ul>
<li>var s=”abcdef”;</li>
<li>alert(s.substr(1,3));//从指定的开始位置截取指定长度的子字符串</li>
<li>alert(s.substring(1,3));//从指定的开始位置和指定的结束位置截取子字符串，含头不含尾。</li>
</ul>
</li>
<li><strong>查找子字符串第一次出现的角标-indexOf(字符串)</strong><ul>
<li>var s=”abcdefg”;</li>
<li><strong>alert(s.indexOf(“dd”));//返回指定子字符串第一次出现的角标，没有则返回-1;</strong></li>
</ul>
</li>
</ul>
<h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><ul>
<li>创建Date对象<ul>
<li>var d=new Date();</li>
</ul>
</li>
<li>常用方法<ul>
<li>alert(d.getYear());//返回的是1900年开始距今的年分数</li>
<li>alert(d.getFullYear());//返回的是当前的年份</li>
<li>alert(d.getMonth()+1);//返回的当前月份的角标值，需要+1</li>
<li>alert(d.getDate());//返回的是当前的日期数</li>
<li>alert(d.getDay());//返回的是当前的星期数，但是周天会返回值为0;</li>
<li>alert(d.getHours());//返回当前时间的小时数</li>
<li>alert(d.getMinutes());//返回当前时间的分钟数</li>
<li>alert(d.getSeconds());//返回当前时间的秒数</li>
</ul>
</li>
</ul>
<h2 id="Math对象学习"><a href="#Math对象学习" class="headerlink" title="Math对象学习"></a>Math对象学习</h2><ul>
<li><strong>Math在使用的时候不能new，使用Math.方法名调用即可。</strong></li>
<li><strong>创建随机数字-Math.random()</strong><br>  <strong>- alert(“Math.random():”+Math.random());//返回0-1之间的随机数字，含0不含1。</strong><ul>
<li><strong>alert(1000+Math.random()*9000);</strong></li>
</ul>
</li>
<li><strong>向下取整-Math.floor()</strong><ul>
<li>alert(Math.floor(1000+Math.random()*9000));</li>
</ul>
</li>
<li><strong>向上取整-Math.ceil()</strong><ul>
<li>alert(Math.ceil(“12.34”));</li>
</ul>
</li>
<li><strong>四舍五入-Math.round()</strong><ul>
<li>alert(Math.round(12.12));</li>
<li>alert(Math.round(12.65));</li>
</ul>
</li>
<li>数值比较:求取最小值Math.min()，求取最大值Math.max()<ul>
<li>alert(Math.min(12,13,5,78));//获取最小值</li>
<li>alert(Math.max(12,3,4,56));//获取最大值</li>
</ul>
</li>
</ul>
<h2 id="Global对象学习"><a href="#Global对象学习" class="headerlink" title="Global对象学习"></a>Global对象学习</h2><ul>
<li>Global对象从不直接使用并且不能new，也是就直接写方法名调用即可。</li>
<li><strong>使用eval()将字符串转换为可执行的js代码</strong><ul>
<li>var str=”var a=123”;</li>
<li>eval(str);</li>
<li>alert(a);</li>
</ul>
</li>
<li><strong>使用isNaN()判断是否值NaN</strong><ul>
<li>alert(isNaN(“123”));</li>
</ul>
</li>
<li><strong>获取字符中的浮点数parseFloat</strong><ul>
<li>alert(parseFloat(“12.34a34a”));</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JavaScript</tag>
        <tag>常用对象和方法</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-7</title>
    <url>/45652.html</url>
    <content><![CDATA[<h2 id="类学习"><a href="#类学习" class="headerlink" title="类学习"></a>类学习</h2><ul>
<li><p><strong>类的声明</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 类名(<span class="params">形参<span class="number">1</span>，形参<span class="number">2</span>……</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.属性名<span class="number">1</span>=形参<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">this</span>.属性名<span class="number">2</span>=形参<span class="number">2</span>;</span><br><span class="line">	……</span><br><span class="line">	<span class="keyword">this</span>.属性名=fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><p>类的使用</p>
<ul>
<li><strong>var 对象名=new 类名(实参1，实参2……);</strong></li>
<li><strong>注意：js中类的内容只是对象的公共部分，每个对象还可以自定义的进行扩充。因此给一个类中没有的属性赋值也是可以的，不赋值使用则是undefeated</strong></li>
</ul>
</li>
<li><p><strong>类的”继承”：prototype关键字</strong></p>
<ul>
<li>通过prototype关键字实现了不同对象之间的数据共享。</li>
<li><strong>实现某个类的所有子对象的方法区对象的共享，节省内存</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">			<span class="comment">//1、类的声明--person</span></span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">				Person.prototype=<span class="keyword">new</span> User();</span><br><span class="line">				<span class="keyword">this</span>.name=name;</span><br><span class="line">				<span class="keyword">this</span>.age=age;</span><br><span class="line">				<span class="keyword">this</span>.fav=<span class="string">"唱歌"</span>;<span class="comment">//写死</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">uname,pwd</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">this</span>.uname=uname;</span><br><span class="line">				<span class="keyword">this</span>.pwd=pwd;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//使用prototype</span></span><br><span class="line">				<span class="comment">//Person.prototype.test=function()&#123;alert("嘿嘿")&#125;;</span></span><br><span class="line">				Person.prototype=<span class="keyword">new</span> User();</span><br><span class="line">				User.prototype.testU=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">"我是user"</span>)&#125;;</span><br><span class="line">				<span class="comment">//User.prototype.student=new Student();</span></span><br><span class="line">			<span class="comment">//2、使用类</span></span><br><span class="line">				<span class="keyword">var</span> p1=<span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">32</span>);</span><br><span class="line"><span class="comment">//					p1.address="北京市";//类中没有声明的属性赋值</span></span><br><span class="line"><span class="comment">//					alert(p1.address);</span></span><br><span class="line"><span class="comment">//					alert(p1.name);</span></span><br><span class="line">				<span class="keyword">var</span> p2=<span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">23</span>);</span><br><span class="line"><span class="comment">//					alert(p2.name);</span></span><br><span class="line">			<span class="comment">//alert(p1.test===p2.test);//false;</span></span><br><span class="line">					alert(p1.test===p2.test);</span><br><span class="line">					p1.testU();</span><br><span class="line">		&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建自定义对象"><a href="#创建自定义对象" class="headerlink" title="创建自定义对象"></a>创建自定义对象</h2></li>
</ul>
</li>
<li><p><strong>对象的作用：用来存储整体数据。</strong></p>
</li>
<li><p><strong>原因：很多时候我们没有办法预先知道一个对象应该有哪些属性，所以只能临时的创建一个对象来自定义属性存储数据。来保证数据的完成性</strong></p>
</li>
<li><p>应用：</p>
<ul>
<li>Ajax中会使用。</li>
</ul>
</li>
<li><p>使用：</p>
<ul>
<li>创建自定义对象<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">	对象名.属性名<span class="number">1</span>=属性值<span class="number">1</span>;</span><br><span class="line">	对象名.属性名<span class="number">2</span>=属性值<span class="number">2</span>;</span><br><span class="line">	对象名.属性名<span class="number">3</span>=属性值<span class="number">3</span>;</span><br><span class="line">	……</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 对象名=&#123;&#125;;</span><br><span class="line">	对象名.属性名<span class="number">1</span>=属性值<span class="number">1</span>;</span><br><span class="line">	对象名.属性名<span class="number">2</span>=属性值<span class="number">2</span>;</span><br><span class="line">	对象名.属性名<span class="number">3</span>=属性值<span class="number">3</span>;</span><br><span class="line">	……</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>一般用来存储数据，不会再自定义对象中存储函数对象。</p>
</li>
<li><p><strong>js中的对象属性和内容是可以自定义的扩充的，不是依赖于类的声明的，类只是对象公共部分的一种声明，是为了节省代码的冗余的.</strong></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JavaScript</tag>
        <tag>类的学习</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-6</title>
    <url>/29331.html</url>
    <content><![CDATA[<h2 id="函数学习"><a href="#函数学习" class="headerlink" title="函数学习"></a>函数学习</h2><ul>
<li>函数的声明<ul>
<li>function 函数名(形参名1,形参名2……){执行体}</li>
<li>var 函数名=new Function(“形参1”,”形参2”……,”函数执行体”);</li>
<li><strong>注意：此声明表明在js中函数是作为对象存在的。</strong></li>
<li>var 变量名=function(形参名1,形参名2……){函数执行体}    </li>
</ul>
</li>
<li>函数的参数<ul>
<li><strong>js中的函数在调用时，形参可以不赋值，不会报错</strong></li>
<li><strong>js中的函数在调用时，形参赋值可以不全部赋值，不会报错，但是实参会依次进行赋值。</strong></li>
</ul>
</li>
<li>函数的返回值<ul>
<li><strong>在js中如果函数有返回值则直接返回，没有返回值默认返回undefined</strong></li>
</ul>
</li>
</ul>
<p><strong>注意：js的代码声明区域和执行区域是一起的，都是在js代码的代码域中。</strong></p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">			&#x2F;&#x2F;1、声明函数</span><br><span class="line">				&#x2F;&#x2F;方式一:</span><br><span class="line">					function test1(a1,a2)</span><br><span class="line">					&#123;</span><br><span class="line">						alert(&quot;函数声明一&quot;);</span><br><span class="line">					&#125;</span><br><span class="line">				&#x2F;&#x2F;方式二:</span><br><span class="line">					var test2&#x3D;new Function(&quot;a1&quot;,&quot;a2&quot;,&quot;alert(&#39;函数声明二&#39;+a1)&quot;);</span><br><span class="line">				&#x2F;&#x2F;方式三:</span><br><span class="line">					var test3&#x3D;function(a1,a2)&#123;</span><br><span class="line">						alert(&quot;我是函数声明三&quot;);</span><br><span class="line">					&#125;</span><br><span class="line">				&#x2F;&#x2F;调用声明的函数</span><br><span class="line">					&#x2F;&#x2F;test2(1,2);</span><br><span class="line">			&#x2F;&#x2F;2、函数的参数</span><br><span class="line">				function testParam(a1,a2,a3)&#123;</span><br><span class="line">					alert(a1);</span><br><span class="line">					alert(&quot;函数的形参学习&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">				&#x2F;&#x2F;testParam(1,2);</span><br><span class="line">			&#x2F;&#x2F;3、函数的返回值</span><br><span class="line">				var testReturn&#x3D;function()&#123;</span><br><span class="line">					alert(&quot;函数的返回值学习&quot;);</span><br><span class="line">					&#x2F;&#x2F;return &quot;js&quot;;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				alert(testReturn());	</span><br><span class="line">		&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="函数的执行符"><a href="#函数的执行符" class="headerlink" title="函数的执行符"></a>函数的执行符</h2><ul>
<li><strong>在js中函数的执行符值()</strong></li>
<li><strong>没有小括号则函数名其实就是一个变量</strong></li>
<li><strong>加上小括号则会函数会被执行。</strong></li>
</ul>
<h2 id="函数作为实参传递"><a href="#函数作为实参传递" class="headerlink" title="函数作为实参传递"></a>函数作为实参传递</h2><ul>
<li><strong>在js中函数是可以作为实参进行传递的。</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testobj</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">	alert(a());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> testParam=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">"我是函数参数"</span>);</span><br><span class="line">&#125;			</span><br><span class="line">testobj(testParam());</span><br></pre></td></tr></table></figure></li>
<li>开发中经常用的传递方式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testObj2</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//testObj2函数在被调用的时候，实参必须是一个函数对象。</span></span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br><span class="line">testObj2(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"开发"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JavaScript</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-5</title>
    <url>/29651.html</url>
    <content><![CDATA[<h2 id="数组学习"><a href="#数组学习" class="headerlink" title="数组学习"></a>数组学习</h2><ul>
<li>数组的声明<ul>
<li>var arr=new Array();//声明一个空数组对象</li>
<li>var arr=new Array(length);//声明一个指定长度的数组</li>
<li><strong>var arr=[元素];//声明数组(最常用)</strong></li>
</ul>
</li>
<li><strong>注意：js中的数组声明不用指定长度，js的数组长度是不固定的，会随着元素的数量改变而改变。</strong><a id="more"></a></li>
<li>数组的赋值和取值<ul>
<li>数组可以存储任意类型的数据</li>
<li>数组名[角标]=值;//角标可以是任意的正整数或者是0</li>
</ul>
</li>
<li>数组的取出<ul>
<li>数组名[角标]//返回当前角标对应存储的值</li>
<li><strong>如果角标不存在，返回undefined;</strong></li>
</ul>
</li>
<li><strong>数组的length属性</strong><ul>
<li><strong>数组名.length//返回当前数组的长度。</strong></li>
<li><strong>数组名.length=新的值//动态的改变数组的长度</strong></li>
<li><strong>注意：length&gt;原有长度，则使用空进行填充。</strong></li>
<li><strong>length&lt;原有长度，则从后面进行截取，最后的数据会被删除。</strong></li>
</ul>
</li>
<li>数组的遍历<ul>
<li>普通for循环<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">	alert(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><strong>for-in-获取的是角标</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">	alert(i);<span class="comment">//获取的是角标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="数组的操作学习"><a href="#数组的操作学习" class="headerlink" title="数组的操作学习"></a>数组的操作学习</h2><ul>
<li><strong>数组的合并：arr.concat(b,c)</strong></li>
<li><strong>数组指定间隔符转换字符串:var b=arr.join(“-“);</strong></li>
<li><strong>数组移除最后一个元素并返回:var ele=arr.pop();</strong></li>
<li><strong>数组的追加，返回新的长度：var ln=arr.push(“lol”);//追加的元素可以是一个数组，但是为作为一个角标值存在</strong></li>
<li><strong>数组的移除第一个元素:var ele=arr.shift();</strong></li>
<li><strong>数组的在开始位置插入指定元素:var a=arr.unshift(“又是周五了”);</strong></li>
<li><strong>数组删除指定位置元素：var arr2=arr.splice(1,3,”a”);</strong></li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>数组</tag>
        <tag>数组的声明</tag>
        <tag>数组的操作</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-4</title>
    <url>/45844.html</url>
    <content><![CDATA[<h2 id="JavaScrpit中-和-的区别"><a href="#JavaScrpit中-和-的区别" class="headerlink" title="JavaScrpit中==和===的区别"></a>JavaScrpit中==和===的区别</h2><ul>
<li>等值运算符:==<ul>
<li><strong>先判断类型，类型一致则直接比较。</strong></li>
<li><strong>类型不一致，则先使用Number()进行强转后再进行比较。</strong></li>
</ul>
</li>
<li>等同运算符:===<ul>
<li><strong>先判断类型，类型一致则再比较内容，内容一致则返回true，内容不一致则返回false。</strong></li>
<li><strong>类型不一致则直接false</strong></li>
</ul>
</li>
<li><strong>注意：null和undefined在做==判断时候返回true</strong><a id="more"></a>
<h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2></li>
<li>if结构<ul>
<li>单分支结构：<ul>
<li>if(判断条件){执行体}</li>
</ul>
</li>
<li>双分支：<ul>
<li>if(判断条件){执行体}else{执行体}</li>
</ul>
</li>
<li>多分支：<ul>
<li>if(判断条件){执行体}else if(判断条件){执行体}……else{执行体}</li>
</ul>
</li>
<li>swicth选择结构：<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405123528.png"  alt="">                     </li>
<li><strong>注意：判断的变量可以是number类型也可以是string类型，但是不要混用。</strong></li>
</ul>
</li>
<li>循环结构：<ul>
<li>for(变量;条件;迭代条件){循环体}循环</li>
<li>while(循环条件){循环体}</li>
<li><strong>do{循环体}while(循环条件)—至少循环一次</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>JavaScript</tag>
        <tag>JS==和===的区别</tag>
        <tag>逻辑结构</tag>
        <tag>循环结构</tag>
        <tag>选择结构</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-3</title>
    <url>/29011.html</url>
    <content><![CDATA[<h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><ul>
<li><strong>其他类型转换为number类型-使用Number()</strong><ul>
<li><strong>string 类型的数字字符:    对应的number数字</strong></li>
<li><strong>string 非数字字符:        NaN(number类型)</strong></li>
<li>boolean true:        1</li>
<li>boolean false:        0</li>
<li><strong>object 有具体的值:        数字</strong></li>
<li><strong>object null:        0</strong><a id="more"></a></li>
</ul>
</li>
<li><strong>其他类型转换为boolean 类型-使用Boolean()</strong><ul>
<li><strong>number 正数或者负数：        true</strong></li>
<li>number 0        :        false</li>
<li><strong>string  非空字符串 :        true</strong></li>
<li>string  空字符串 “”:        false</li>
<li><strong>object  具体的对象  :       true</strong></li>
<li>object  null    :       false</li>
<li><strong>声明不赋值的变量        :       false</strong></li>
</ul>
</li>
</ul>
<h2 id="运算符学习"><a href="#运算符学习" class="headerlink" title="运算符学习"></a>运算符学习</h2><ul>
<li>算术运算符：加法：+，减法：-，乘法：*，除法：/，余数：%<ul>
<li><strong>在算术运算中如果两边的数据类型不是number的话，会使用Number()强转后在进行运算.</strong></li>
<li><strong>string类型和string类型的数字(*,/,%,-)（加法会变成字符串的链接符）</strong></li>
<li><strong>string类型数字和boolean类型(*,/,%,-)（加法会变成字符串的链接符）</strong></li>
<li><strong>字符串的加法+会作为字符链接，不会运算。</strong></li>
</ul>
</li>
<li>逻辑运算符：!  &amp; &amp;&amp; | || (与java中的一致);</li>
<li>关系运算符：!=，&gt;=，&lt;=，&gt;，&lt;<ul>
<li><strong>返回值为true 或者fasle</strong></li>
</ul>
</li>
<li>自增运算符：++:a++ ++a，–:aa– –a，+=，-=            </li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据转换</tag>
        <tag>变量强转</tag>
        <tag>运算符</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-2</title>
    <url>/45460.html</url>
    <content><![CDATA[<h2 id="变量声明学习"><a href="#变量声明学习" class="headerlink" title="变量声明学习"></a>变量声明学习</h2><ul>
<li><strong>js中的所有变量声明只有var关键字。（弱类型语言）</strong><ul>
<li>var a=123;</li>
<li>var A=1234;</li>
<li>var a1=3.1415926;</li>
<li>var a2=”js”;</li>
<li>var a3=’k’;</li>
<li>var a4=true;</li>
<li>var a5=new Date();<a id="more"></a></li>
</ul>
</li>
<li>注意：<ul>
<li><strong>js的变量名是严格区分大小的。</strong></li>
<li><strong>js中的字符串可以使用双引号也可以使用单引号。</strong></li>
<li><strong>js中可以声明同名变量，不会报错，后面的会将前面的声明覆盖。(重要)</strong></li>
<li>var a=123;</li>
<li>var a=”js学习”;</li>
<li>alert(a);-输出js学习</li>
</ul>
</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li><strong>数据类型判断关键字：typeof</strong></li>
<li><strong>number:数字类型</strong><ul>
<li>var b=456;</li>
<li>var b1=1.23;</li>
</ul>
</li>
<li><strong>string：字符串类型(小写)</strong><ul>
<li>var b=”今天天气真好，适合学习”;</li>
<li>var b1=’l’;</li>
</ul>
</li>
<li><strong>boolean:布尔类型</strong><ul>
<li>var b=true;</li>
<li>var b1=false;</li>
</ul>
</li>
<li><strong>object：对象</strong><ul>
<li>var b=new Date();</li>
</ul>
</li>
<li><strong>null:</strong><ul>
<li><strong>空对象赋值，主要是和undefined进行区分。</strong></li>
</ul>
</li>
<li><strong>Undefined:undefined</strong><ul>
<li>var c;</li>
<li>alert(typeof c);</li>
<li><strong>变量声明不赋值的情况下，默认值是undefined。</strong></li>
</ul>
</li>
<li><strong>注意：在js代码中尽可能的给声明的变量赋初始值;</strong></li>
</ul>
<h2 id="null与undefined的区别"><a href="#null与undefined的区别" class="headerlink" title="null与undefined的区别"></a>null与undefined的区别</h2><ul>
<li>相同点<ul>
<li><strong>if 判断语句中，两者都会被转换为false</strong></li>
</ul>
</li>
<li>不同点null<ul>
<li><strong>Number转换的值不同，Number(null)输出为0, Number(undefined)输出为NaN</strong></li>
<li>null表示一个值被定义了，但是这个值是空值作为函数的参数，表示函数的参数不是对象</li>
<li>作为对象原型链的终点 （Object.getPrototypeOf(Object.prototype)）</li>
<li>*<em>定义一个值为null是合理的，但定义为undefined不合理（var name = null）　*</em></li>
</ul>
</li>
<li>不同的undefin　　　　　<ul>
<li><strong>undefined表示缺少值，即此处应该有值，但是还没有定义变量被声明了还没有赋值，就为undefined</strong></li>
<li>调用函数时应该提供的参数还没有提供，该参数就等于undefined</li>
<li><strong>对象没有赋值的属性，该属性的值就等于undefined</strong></li>
<li><strong>函数没有返回值，默认返回undefined</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>js变量声明</tag>
        <tag>js数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript基础-1</title>
    <url>/45267.html</url>
    <content><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405123610.jpg"  alt=""></p>
<a id="more"></a>

<h2 id="为什么需要JavaScript？"><a href="#为什么需要JavaScript？" class="headerlink" title="为什么需要JavaScript？"></a>为什么需要JavaScript？</h2><p>JavaScript 使网页增加互动性。JavaScript 使有规律地重复的HTML文段简化，减少下载时间。JavaScript 能及时响应用户的操作，对提交表单做即时的检查，无需    浪费时间交由 CGI 验证。JavaScript 的特点是无穷无尽的，只要你有创意.</p>
<h2 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h2><p>JavaScript是一种可以与HTML标记语言混合使用的脚本语言，其编写的程序可以直接在浏览器中解释执行。<br>对于很多初学者而言，往往会将JavaScript脚本语言与JAVA编程语言混为一谈。实际上从本质上来说，这二者并没有什么必然的联系。</p>
<p><strong>Javascript的国际标准是ECMAScript。</strong></p>
<h2 id="js的声明学习："><a href="#js的声明学习：" class="headerlink" title="js的声明学习："></a>js的声明学习：</h2><ul>
<li><strong>在head标签中使用script标签进行js代码域的声明</strong><ul>
<li>作用：声明js代码域</li>
<li>特点:js的代码只会作用于当前网页</li>
</ul>
</li>
<li>在head标签中使用script标签引入外部声明好的js文件<ul>
<li>&lt;-script src=”相对路径” type=”text/javascript” charset=”utf-8”&gt;</script-></li>
<li>作用：引入外部声明好的js文件</li>
<li>特点：<strong>实现js代码的重复使用，避免代码的冗余。</strong></li>
</ul>
</li>
<li><strong>注意：因为js在HTML文档中是一门单独的语言，可以声明在文档中的任意位置。一般情况下声明在head标签中。</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>js的声明呵和引入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明js代码域--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入外部声明好的js文件--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/my.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>js的声明和引入<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">			alert(<span class="string">"这是我的第一个js"</span>)</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>js声明</tag>
      </tags>
  </entry>
  <entry>
    <title>css学习-4</title>
    <url>/51089.html</url>
    <content><![CDATA[<h2 id="css的定位学习"><a href="#css的定位学习" class="headerlink" title="css的定位学习"></a>css的定位学习</h2><ul>
<li><strong>position</strong><ul>
<li><strong>相对定位:relative</strong><ul>
<li><strong>作用：相对元素原有位置移动指定的距离(相对的自己的原有位置)</strong></li>
<li><strong>可以使用top,left,right,bottom来进行设置。</strong></li>
<li><strong>注意：其他元素的位置是不改变的。</strong></li>
</ul>
</li>
<li><strong>绝对定位:absolute</strong><ul>
<li><strong>作用：可以使用元素参照界面或者相对父元素来进行移动</strong></li>
<li><strong>注意：如果父级元素成为参照元素，父元素必须使用相对定位属性</strong></li>
<li><strong>默认情况下是以界面为基准进行移动的。</strong><a id="more"></a></li>
</ul>
</li>
<li><strong>固定定位:fixed</strong><ul>
<li><strong>作用：将元素固定现在页面的指定位置，不会随着滚动条的移动而改变位置。</strong></li>
</ul>
</li>
</ul>
</li>
<li><strong>以上定位都可以使用top,left,right,bottom来进行移动。</strong></li>
<li><strong>z-index:此属性是用来声明元素的显示级别的。</strong><ul>
<li>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</li>
<li>注意<ul>
<li><strong>元素可拥有负的 z-index 属性值。</strong></li>
<li><strong>Z-index 仅能在定位元素上奏效（例如 position:absolute;）！</strong></li>
</ul>
</li>
<li>说明<ul>
<li><strong>该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远。</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>定位</tag>
        <tag>相对定位</tag>
        <tag>绝对定位</tag>
        <tag>固定定位</tag>
      </tags>
  </entry>
  <entry>
    <title>css学习-3</title>
    <url>/1488.html</url>
    <content><![CDATA[<h2 id="css的盒子模型学习"><a href="#css的盒子模型学习" class="headerlink" title="css的盒子模型学习"></a>css的盒子模型学习</h2><ul>
<li>div标签：<ul>
<li>块级标签，主要是用来进行网页布局的，会将其中的子元素内容作为一个独立的整体存在。</li>
<li>特点：<ul>
<li><strong>默认宽度是页面的宽度，但是可以设置。</strong></li>
<li><strong>高度默认是没有的，但是可以设置。(可以顶开)</strong></li>
<li><strong>如果子元素设置了百分比的高或者宽，占据的是div的百分比，不是页面的。</strong><a id="more"></a></li>
</ul>
</li>
</ul>
</li>
<li>盒子模型：<ul>
<li><strong>外边距:margin</strong><ul>
<li><strong>作用：用来设置元素和元素之间的间隔。</strong></li>
<li><strong>居中设置:margin:0px auto;上下间隔是0px,水平居中。</strong></li>
<li>可以根据需求单独的设置上下左右的外边距。</li>
</ul>
</li>
<li>边框：border<ul>
<li>作用：用来设置元素的边框大小</li>
<li>可以单独设置上下左右</li>
</ul>
</li>
<li><strong>内边距：padding</strong><ul>
<li><strong>作用：设置内容和边框之间的距离</strong></li>
<li><strong>注意：内边距不会改变内容区域的大小</strong></li>
<li>可以单独的设置上下左右的内边距</li>
</ul>
</li>
<li>内容区域：<ul>
<li>作用：改变内容区域的大小。</li>
<li>设置宽和高即可改变内容区域的大小。</li>
</ul>
</li>
</ul>
</li>
<li><strong>注意：进行页面布局时要清除整个页面的内外边距</strong></li>
<li><strong>body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td{ margin:0;padding:0}</strong></li>
<li><strong>*{margin:0;padding:0}</strong></li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>盒子模型</tag>
        <tag>内边距</tag>
        <tag>外边距</tag>
      </tags>
  </entry>
  <entry>
    <title>css学习-2</title>
    <url>/50449.html</url>
    <content><![CDATA[<h2 id="css的选择器学习"><a href="#css的选择器学习" class="headerlink" title="css的选择器学习"></a>css的选择器学习</h2><ul>
<li>标签选择器：<ul>
<li>标签名{样式名1：样式值1;……}</li>
<li>作用：会将当前网页内的所有该标签增加相同的样式</li>
</ul>
</li>
<li><strong>id选择器:</strong><ul>
<li><strong>#标签的id属性值{样式名1：样式值1;……}</strong></li>
<li>作用：给某个指定的标签添加指定的样式<a id="more"></a></li>
</ul>
</li>
<li><strong>class类选择器：</strong><ul>
<li><strong>.类选择器名{样式名1：样式值1;……}</strong></li>
<li>作用：给不同的标签添加相同的样式</li>
</ul>
</li>
<li>全部选择选择器<ul>
<li><strong>‘*’{样式名1：样式值1;……}</strong></li>
<li>作用：选择所有的HTML标签，并添加相同的样式</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>组合选择器：<ul>
<li>选择器1,选择器2,……{样式名1：样式值1;……}</li>
<li>作用：解决不同的选择器之间重复样式的问题</li>
</ul>
</li>
<li>子标签选择器<ul>
<li>选择器1 子标签选择器{样式名1：样式值1;……}</li>
</ul>
</li>
<li>属性选择器：<ul>
<li><strong>标签名[属性名=属性值]{样式名1：样式值1;……}</strong></li>
<li>作用：选择某标签指定具备某属性并且属性值为某属性值的标签<br><img src="/img/loading.gif" class="lazyload" data-src="1.png"  alt=""></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>选择器</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css学习-1</title>
    <url>/50257.html</url>
    <content><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405123718.jpg"  alt=""></p>
<h2 id="CSS声明学习"><a href="#CSS声明学习" class="headerlink" title="CSS声明学习"></a>CSS声明学习</h2><ul>
<li><p><strong>在head标签中使用style标签声明：</strong></p>
<ul>
<li><strong>作用：此声明一般声明当前网页的公共样式或者给某个标签的单独样式</strong></li>
</ul>
</li>
<li><p><strong>在head标签中使用link标签引入外部声明好的css文件</strong></p>
<ul>
<li><strong>&lt;-link rel=”stylesheet” type=”text/css” href=”路径”/&gt;</strong><a id="more"></a></li>
<li>作用：此声明相当于调用,解决了不同网页间样式重复使用的问题.一次声明，随处使用</li>
</ul>
</li>
<li><p>在标签上使用style属性进行声明：</p>
<ul>
<li><strong>作用：此声明会将css样式直接作用于当前标签。</strong></li>
</ul>
</li>
<li><p>问题：不同的声明给同一个标签操作了同一个样式，会使用谁的？</p>
<ul>
<li><strong>如果Css的声明全部在head标签中，则遵循就近原则，谁离标签近，谁就会被显示。</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>css的声明学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入外部声明好的css文件--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/my.css"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--声明css代码域--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">			hr&#123;</span><br><span class="line">				width: 50%;</span><br><span class="line">				height: 20px;</span><br><span class="line">				color: red;</span><br><span class="line">				background-color: red;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>css的声明学习<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> <span class="attr">style</span>=<span class="string">"background-color: blue;height:50px;"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="css样式使用"><a href="#css样式使用" class="headerlink" title="css样式使用"></a>css样式使用</h2></li>
</ul>
</li>
<li><p><strong>添加背景图片</strong></p>
<ul>
<li><strong>background-image: url(img/a1.jpg)</strong></li>
</ul>
</li>
<li><p>设置背景颜色</p>
<ul>
<li>background-color: orange;        </li>
</ul>
</li>
<li><p><strong>设置图片不重复</strong></p>
<ul>
<li><strong>background-repeat: no-repeat;（当图片尺寸不足时，会自动重复而铺满整个屏幕）</strong>        </li>
</ul>
</li>
<li><p><strong>设置图片平铺</strong></p>
<ul>
<li><strong>background-size: cover;（图片平铺整个页面）</strong></li>
</ul>
</li>
<li><p>添加边框及其颜色和大小</p>
<ul>
<li>border: solid 1px red;(<strong>solid实线</strong>)</li>
</ul>
</li>
<li><p><strong>设置表框的角度</strong></p>
<ul>
<li><strong>border-radius: 10px;</strong></li>
</ul>
</li>
<li><p><strong>设置倾斜角度</strong></p>
<ul>
<li><strong>transform: rotate(-10deg);</strong></li>
</ul>
</li>
<li><p><strong>设置文本位置</strong></p>
<ul>
<li><strong>text-align: center;</strong></li>
</ul>
</li>
<li><p>设置文本颜色</p>
<ul>
<li>color: blueviolet;</li>
</ul>
</li>
<li><p><strong>设置文本加粗</strong></p>
<ul>
<li><strong>font-weight: bold;</strong></li>
</ul>
</li>
<li><p><strong>设置字体间距</strong></p>
<ul>
<li><strong>letter-spacing: 10px;</strong></li>
</ul>
</li>
<li><p><strong>设置超链接去除下划线</strong></p>
<ul>
<li><strong>text-decoration: none;</strong></li>
</ul>
</li>
<li><p><strong>伪类-鼠标划过链接</strong></p>
<ul>
<li><strong>img:hover{}</strong></li>
</ul>
</li>
<li><p><strong>浮动方式</strong></p>
<ul>
<li><strong>float: left;（左浮）</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>样式使用</tag>
        <tag>伪类</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习-6</title>
    <url>/26977.html</url>
    <content><![CDATA[<h2 id="表单标签-form"><a href="#表单标签-form" class="headerlink" title="表单标签-form"></a>表单标签-form</h2><ul>
<li><strong>作用:收集并提交用户数据给指定服务器</strong></li>
<li>属性:<ul>
<li><strong>action:收集的数据提交地址也就是URL</strong></li>
<li><strong>method:收集的数据的提交方式</strong><ul>
<li><strong>get    :适合小量数据,表单数据以?隔开拼接在URL后面,不同的键值对使用&amp;符号隔开,不安全.</strong></li>
<li><strong>post:适合大量数据,安全,隐式提交</strong><a id="more"></a>   </li>
</ul>
</li>
</ul>
</li>
<li>注意<ul>
<li><strong>表单数据的提交,要提交的表单项必须拥有name属性值,否则不会提交.</strong></li>
<li><strong>提交的表单项数据为键值对,键为name属性的值,值为用户书写value的数据</strong></li>
<li><strong>form标签会收集其标签内部的数据（name值和value值）</strong></li>
<li><strong>form表单的数据提交需要依赖于submit提交按钮.</strong></li>
</ul>
</li>
<li><strong>form表单标签的使用:在点击数据提交时,form标签会将其内部所有form表单域标签中用户书写的数据按照method指明的提交方式，提交给action属性所指明的提交地址.</strong><h2 id="表单域标签学习"><a href="#表单域标签学习" class="headerlink" title="表单域标签学习:"></a>表单域标签学习:</h2></li>
<li>作用:<strong>给用户提供可以进行数据书写或者选择的标签.</strong></li>
<li>使用:<ul>
<li><strong>文本框:input标签</strong><ul>
<li>type:<ul>
<li><strong>text  收集少量的文本数据,用户可见</strong></li>
<li><strong>password  收集用户密码数据</strong></li>
</ul>
</li>
<li><strong>name:数据提交的键,也会被js使用(必须添加)</strong></li>
<li><strong>value: 默认值</strong></li>
</ul>
</li>
<li><strong>单选框:input标签</strong><ul>
<li>type:<ul>
<li><strong>radio</strong></li>
</ul>
</li>
<li><strong>name:name属性值相同的单选框只能选择一项数据（给每个选项name赋同样的值）</strong></li>
<li>value:要提交的数据</li>
<li><strong>checked:checked 使用此属性的单选默认是选择状态</strong></li>
</ul>
</li>
<li><strong>提交按钮:input标签</strong><ul>
<li>type：<ul>
<li><strong>submit</strong></li>
</ul>
</li>
<li><strong>value：为按钮的显示名字</strong></li>
</ul>
</li>
<li><strong>多选框:input标签</strong><ul>
<li>type:<ul>
<li><strong>checkbox</strong></li>
</ul>
</li>
<li>name:一个多选组需要使用相同的name属性值</li>
<li>value:要提交的数据</li>
<li><strong>checked:checked 使用此属性的多选框默认是选择状态</strong></li>
</ul>
</li>
<li><strong>单选下拉框:select标签</strong><ul>
<li><strong>name:数据提交的键名,必须声明</strong></li>
<li><strong>子标签option:一个option标签表示一个下拉选项</strong><ul>
<li><strong>value:要提交的数据(每个option的value值)</strong></li>
</ul>
</li>
</ul>
</li>
<li><strong>文本域:textarea标签:声明一个可以书写大量文字的文本区域</strong><ul>
<li><strong>name:数据提交的键名,js和css也会使用</strong></li>
<li><strong>rows:声明文本域的行数</strong></li>
<li><strong>cols:声明文本域的列数</strong></li>
</ul>
</li>
<li><strong>普通按钮:input标签</strong><ul>
<li>type:<ul>
<li><strong>button</strong></li>
</ul>
</li>
<li><strong>value:为按钮显示的名字</strong></li>
</ul>
</li>
<li><strong>隐藏标签:input标签</strong><ul>
<li>type:<ul>
<li><strong>hidden</strong></li>
</ul>
</li>
<li>name</li>
<li>value</li>
</ul>
</li>
</ul>
</li>
<li><strong>注意:表单数据提交提交的是表单域标签的value值</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>form标签学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>form标签学习<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">				用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span> <span class="attr">value</span>=<span class="string">"王五"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"upwd"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				性别  :  男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span>  女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				爱好: <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					睡觉<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					打豆豆<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				籍贯:<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>商丘<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				文本域:<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"intro"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"30"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">				普通按钮:<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"普通按钮"</span> /&gt;</span></span><br><span class="line">				隐藏标签:</span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"哈哈"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405123812.png"  alt=""></li>
</ul>
]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>表单标签</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习-5</title>
    <url>/26657.html</url>
    <content><![CDATA[<h2 id="内嵌标签-iframe"><a href="#内嵌标签-iframe" class="headerlink" title="内嵌标签-iframe"></a>内嵌标签-iframe</h2><ul>
<li>iframe</li>
<li>属性:<ul>
<li><strong>src:要显示的网页资源路径。可以是本地(相对路径)也可以是网络资源(URL)</strong></li>
<li><strong>注意:默认当前页面打开及加载src指向的资源</strong></li>
<li>width:设置显示区域的宽度</li>
<li>height:设置显示区域的高度</li>
<li><strong>name:设置内嵌区域的名字,结合超链接标签的target属性使用。src属性为空</strong></li>
</ul>
</li>
<li>作用:<ul>
<li>在当前网页中加载其他网页的资源,达到不同网页资源之间不相互干扰,并能在同一个页面中展现给用户的目的.<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>内嵌标签学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>内嵌标签学习<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_if"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.so.com"</span> <span class="attr">target</span>=<span class="string">"_tt"</span>&gt;</span>360搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"48%"</span> <span class="attr">height</span>=<span class="string">"400px"</span> <span class="attr">name</span>=<span class="string">"_if"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"48%"</span> <span class="attr">height</span>=<span class="string">"400px"</span> <span class="attr">name</span>=<span class="string">"_tt"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>效果<br><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405123945.gif"  alt=""></li>
</ul>
<h2 id="框架标签-frameset"><a href="#框架标签-frameset" class="headerlink" title="框架标签-frameset"></a>框架标签-frameset</h2><ul>
<li><strong>注意:第一步一定要删除body标签</strong></li>
<li>属性：<ul>
<li><strong>rows:按照行进行切分页面</strong></li>
<li><strong>cols:按照列进行切分页面</strong></li>
<li><strong>可以按百分比分，可以按px分，“*”代表剩余的全部</strong></li>
</ul>
</li>
<li>子标签-frame:<ul>
<li>frame:进行切分区域的占位,一个frame可以单独加载网页资源.</li>
<li>src:资源路径(本地或者网络)</li>
<li>name:区域名,结合超链接使用</li>
</ul>
</li>
<li>frameset主框架代码<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>框架标签学习：<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"10%,*,10%"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frameset/top.html"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"10%,*"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frameset/left.html"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frameset/right.html"</span> <span class="attr">name</span>=<span class="string">"_right"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frameset/bottom.html"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>top.html代码<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		我是 top</span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../12-HTML-frameset登录页面.html"</span> <span class="attr">target</span>=<span class="string">"_top"</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>left.html代码<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_right"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.taobao.com"</span> <span class="attr">target</span>=<span class="string">"_right"</span>&gt;</span>淘宝网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.jd.com"</span> <span class="attr">target</span>=<span class="string">"_right"</span>&gt;</span>京东网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>right.html代码<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		我是 right</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>bottom.html代码<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		我是 bottom</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>frameset登录页面.html代码<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>欢迎访问506主页<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"11-HTML-框架标签学习.html"</span>&gt;</span>点我登录主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>效果<br><img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/kylincw/images/20200405123953.gif"  alt=""></li>
</ul>
]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>内嵌标签</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习-4</title>
    <url>/43232.html</url>
    <content><![CDATA[<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><ul>
<li>标签<ul>
<li><strong>table :声明一个表格</strong></li>
<li><strong>tr:声明一行,设置行高及改行所有单元格的高度.</strong></li>
<li><strong>th:声明一个单元格,表头格.默认居中加黑显示</strong></li>
<li><strong>td:声明一个单元格,默认居左显示原始数据</strong></li>
</ul>
</li>
<li>注意:<ul>
<li><strong>行高即改行所有单元格的宽度</strong></li>
<li><strong>单元格的宽度即列宽</strong><a id="more"></a></li>
</ul>
</li>
<li>属性:<ul>
<li><strong>border:给表格添加边框(默认为0不显示)</strong></li>
<li>width:设置表格的宽度</li>
<li>height:设置表格的高度</li>
<li><strong>cellpadding:设置内容距边框的距离(css中设置table的cellpadding属性值无效)</strong></li>
<li><strong>cellspacing:设置边框的大小css中同上)</strong></li>
</ul>
</li>
<li>特点:<ul>
<li>默认根据数据的多少进行表格的大小显示</li>
</ul>
</li>
</ul>
<h2 id="单元格的合并-rowspan-colspan"><a href="#单元格的合并-rowspan-colspan" class="headerlink" title="单元格的合并-rowspan colspan"></a>单元格的合并-rowspan colspan</h2><ul>
<li>第一步:<ul>
<li>首先确保表格是一个规整的表格</li>
</ul>
</li>
<li>第二步<ul>
<li>根据要合并的单元格,找到其所在的源码位置</li>
</ul>
</li>
<li>第三步<ul>
<li><strong>行合并:在要合并的单元格中的第一个单元格上使用属性rowspan=”要合并的单元格的个数”,并删除其他要合并的单元格完成合并</strong></li>
<li><strong>列合并:在要合并的单元格中的任意一个上使用属性colspan=”要合并的单元格的个数”,并删除要合并的其他单元格</strong></li>
</ul>
</li>
</ul>
<h2 id="表格标签宽高设置"><a href="#表格标签宽高设置" class="headerlink" title="表格标签宽高设置"></a>表格标签宽高设置</h2><ul>
<li><p>一个表格的宽高改变依靠的是width，height属性</p>
</li>
<li><p><strong>注意：不是在table标签里直接添加width，height属性值对进行整个表格进行改变。</strong></p>
</li>
<li><p>表格的高度设置</p>
<ul>
<li><strong>表格等比例高度的改变是在每行中设置height属性值。即在每个tr标签中设置height属性值。</strong></li>
</ul>
</li>
<li><p>表格的宽度设置</p>
<ul>
<li><strong>表格的等比例宽度设置，只需在每列任意一个单元格中设置width属性值即可剩余的单元格会跟随设置好的宽度进行相应的调整。一般设置第一行全列的单元格的宽度.</strong></li>
</ul>
</li>
<li><p><strong>高50px 宽100px 内容距边框10px 边框大小0px cellpadding=”10px” cellspacing=”0px”的表格</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405124214.png"  alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">cellpadding</span>=<span class="string">"10px"</span> <span class="attr">cellspacing</span>=<span class="string">"0px"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">"100px"</span>&gt;</span>科目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">"100px"</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">"100px"</span>&gt;</span>级别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">"150px"</span>&gt;</span>说明<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>java<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>面向对象的语言<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"50px"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>C语言<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>面向过程的语言<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>单元格合并</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405124218.png"  alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"35px"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"100px"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"100px"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"100px"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"200px"</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"35px"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"35px"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"35px"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>表格标签</tag>
        <tag>表单标签</tag>
      </tags>
  </entry>
  <entry>
    <title>相对路径与绝对路径</title>
    <url>/52949.html</url>
    <content><![CDATA[<h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p><strong>从当前文件出发查找另一个文件所经过的路径</strong></p>
<p><strong>相对路径：即相对于当前文件的路径，前端开发中比较常用的路径表示方法</strong></p>
<p><strong>相对路径更方便更改，相对比较灵活，但是如果不慎易造成链接失效，并且容易被人抄袭。</strong></p>
<h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p><strong>从根盘符出发所查找文件的路径</strong></p>
<p><strong>绝对路径：即主页文件或者目录在硬盘上真正的路径</strong></p>
<p><strong>绝对路径的话能避免这个问题，但是灵活性上相对较弱。</strong></p>
<a id="more"></a>
<h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><ul>
<li><p>符号表示</p>
<ul>
<li><strong>/ ：表示根目录</strong></li>
<li><strong>./ ：表示当前目录</strong></li>
<li><strong>../ : 表示上一级目录</strong></li>
<li><strong>../../:表示上两级目录（依次类推）</strong></li>
</ul>
</li>
<li><p>同级</p>
<ul>
<li><strong>同级就是指图片和.html文件储存在同一个文件中</strong></li>
<li><strong>格式：src=”596c68fdd8bcf.jpg”</strong></li>
<li>含义：在.html文件所在文件夹中查找名称叫做596c68fdd8bcf.jpg的图片</li>
</ul>
</li>
<li><p>下级</p>
<ul>
<li><strong>下级就是存储图片的文件夹和.html文件在同一个文件夹中</strong></li>
<li><strong>格式：src=”图片/596c68fdd8bcf.jpg”</strong></li>
<li>含义：在。html文件所在文件夹中查找名称为图片的文件夹然后在图片文件夹中找到叫做- 596c68fdd8bcf.jpg的图片</li>
</ul>
</li>
<li><p>上级</p>
<ul>
<li><strong>上级存储图片的位置和存储代码的文件夹在同一个文件夹中</strong></li>
<li><strong>格式：src=”../596c68fdd8bcf.jpg”</strong></li>
<li>含义：在。html文件所在文件夹中找到这个文件夹的上一级文件夹，然后再在上一级文件夹找到名为596c68fdd8bcf.jpg<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405124350.png"  alt="image-20200405124348412"></li>
</ul>
</li>
</ul>
<p><strong>如果about.jsp页面想引入common.css文件：</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405124415.png"  alt="image-20200405124411989"></p>
<p><strong>以about.jsp为基点寻找  直到和static文件在同一级在进入liantai文件夹，再进入到css文件夹中找到common.css文件</strong></p>
<p><strong>about.css</strong>中想引入了images中的文件<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405124438.png"  alt="image-20200405124436995"></p>
<p><strong>以about.css为基点寻找，../到上级目录与inmages同级进入images文件夹中找寻需要的文件</strong></p>
]]></content>
      <tags>
        <tag>相对路径</tag>
        <tag>绝对路径</tag>
        <tag>路径问题</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习-3</title>
    <url>/27297.html</url>
    <content><![CDATA[<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><ul>
<li>无序列表-<strong>ul li</strong><ul>
<li><strong>ul li:该标签中书写列表内容,一个li标签代表列表中的一行数据</strong></li>
<li><strong>特点:    默认数据前有一个黑圆圈符号.</strong></li>
</ul>
</li>
<li>有序列表-<strong>ol li</strong><ul>
<li>ol li:该标签中书写列表内容,一个li标签代表列表中的一行数据</li>
<li>特点:会自动的给列表进行顺序编码,格式从小到大并且是连续的.</li>
<li><strong>属性:type:可以改变顺序编码的值,可以是1 a A I,,默认使用阿拉伯数字进行顺序编码</strong>    </li>
</ul>
</li>
<li>自定义列表-dl dt dd<ul>
<li><strong>dl dt:数据的标题 dd:数据的具体内容,一个dd表示一条数据.</strong><a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>商丘<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"I"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>打游戏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>打球<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>IT课程:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>java课程<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>python课程<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>大数据课程<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>热门旅游城市:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>商丘<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>周口<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>新乡<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="图片标签-img"><a href="#图片标签-img" class="headerlink" title="图片标签-img"></a>图片标签-img</h2></li>
</ul>
</li>
<li>img标签</li>
<li>属性<ul>
<li><strong>src:图片路径</strong><ul>
<li><strong>本地资源路径:一般本地图片资源使用相对路径即可</strong></li>
<li><strong>网络资源路径:图片资源的URL地址</strong></li>
</ul>
</li>
<li>width<ul>
<li><strong>设置图片的宽度,如果是单独设置,则再图片保证不失真的情况下自动缩小或者放大</strong></li>
<li>单位可以是px也可以是百分比</li>
</ul>
</li>
<li>height<ul>
<li><strong>设置图片的高度,如果是单独设置,则再图片保证不失真的情况下自动缩小或者放大</strong></li>
<li>单位可以是px也可以是百分比</li>
</ul>
</li>
<li><strong>title:图片标题,鼠标放在图片上的时候会显示</strong></li>
<li><strong>alt:图片加载失败后的提示语</strong></li>
</ul>
</li>
<li><strong>注意:图片是不会自动换行的(行内元素)</strong></li>
<li>相对路径:从当前文件出发查找另一个文件所经过的路径</li>
<li>绝对路径:从根盘符出发所查找文件的路径</li>
</ul>
<h2 id="超链接标签-a"><a href="#超链接标签-a" class="headerlink" title="超链接标签-a"></a>超链接标签-a</h2><ul>
<li>a标签-&lt;-a&gt;访问方式&lt;-a/&gt;</li>
<li>属性<ul>
<li><strong>href:要跳转的网页资源路径</strong><ul>
<li><strong>本地资源:相对路径</strong></li>
<li><strong>网络资源:网络资源(网页)的URL</strong></li>
<li><strong>href=”#” 空超链接 可以回到页面顶部</strong></li>
</ul>
</li>
<li>target:指明要跳转的网页资源的显示位置<ul>
<li><strong>_self   在当前页中刷新显示（默认）</strong></li>
<li><strong>_blank  在新的标签页中显示</strong></li>
<li><strong>_top    在顶层页面中显示</strong></li>
<li><strong>_parent    在父级页面中显示</strong></li>
</ul>
</li>
</ul>
</li>
<li><strong>注意：超链接标签中一定要声明访问方式,访问方式可以是文字也可以是图片.在a标签中书写访问方式，可以嵌套一个img标签</strong></li>
<li><strong>锚点学习</strong><ul>
<li>作用:<strong>在一张网页中进行资源跳转</strong></li>
<li>使用：<ul>
<li><strong>先使用超链接标签在指定的网页位置增加锚点.格式为:&lt;-a name=”锚点名” &gt;&lt;/-a&gt;</strong></li>
<li><strong>使用a标签可以跳转指定的锚点,达到网页内部资源跳转的目的,格式:&lt;-a href=”#锚点名” &gt;访问方式&lt;/-a&gt;</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>列表标签</tag>
        <tag>图片标签</tag>
        <tag>超链接标签</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习-2</title>
    <url>/43616.html</url>
    <content><![CDATA[<h2 id="块级标签"><a href="#块级标签" class="headerlink" title="块级标签"></a>块级标签</h2><ul>
<li><strong>独占一行，不和其他元素待在同一行</strong></li>
<li><strong>能设置宽高</strong></li>
<li><strong>如果没有设置宽度, 那么默认和父元素一样宽如果设置了宽高, 那么就按照设置的来显示</strong><a id="more"></a></li>
<li><strong>常见的块级标签：div,p,h1-h6,ul,li,dl,dt,dd</strong><h2 id="行级标签"><a href="#行级标签" class="headerlink" title="行级标签"></a>行级标签</h2></li>
<li><strong>能和其他元素待在同一行</strong></li>
<li><strong>不能设置宽高</strong></li>
<li><strong>如果没有设置宽度, 那么默认和内容一样宽行内元素是不可以设置宽度和高度的</strong></li>
<li><strong>常见的行级标签：a，span,strong,u,em</strong><h2 id="行内块级标签"><a href="#行内块级标签" class="headerlink" title="行内块级标签"></a>行内块级标签</h2></li>
<li><strong>能和其他元素待在一行</strong></li>
<li><strong>能设置宽高</strong></li>
<li><strong>常见的行内块标签：img,input,textarea</strong></li>
</ul>
<h2 id="文本标签学习"><a href="#文本标签学习" class="headerlink" title="文本标签学习"></a>文本标签学习</h2><ul>
<li>标题标签:<ul>
<li><strong>h1到h6:会将其中的数据加粗加黑显示.并且显示依次减弱.标题标签自带换行功能.(块级标签)</strong></li>
<li><strong>属性: align: center left right</strong></li>
</ul>
</li>
<li>水平线标签:<ul>
<li>hr:会在页面中显示一条水平线,默认居中显示</li>
<li>属性:<ul>
<li>width=”宽度” 设置水平线的宽度</li>
<li>size=”高度”  设置水平线的高度</li>
<li>color=”颜色” 设置水平线的颜色</li>
</ul>
</li>
</ul>
</li>
<li>换行符:  <ul>
<li><strong>br:告诉浏览器需要在此位置换行</strong></li>
</ul>
</li>
<li>空格符:<ul>
<li><strong>&amp;nbsp:告诉浏览器在此位置增加空格</strong></li>
</ul>
</li>
<li>权重标签:<ul>
<li><strong>b:会将内容加黑显示</strong></li>
<li><strong>i:会将内容斜体显示</strong></li>
<li><strong>u:会将内容增加下划线</strong></li>
<li><strong>del:增加中划线</strong></li>
<li><strong>以上标签不会自动换行,并且可以嵌套使用.</strong></li>
</ul>
</li>
<li>注意:<ul>
<li><strong>标签的属性是对标签的功能进一步的补充,可以由开发人员自由指定标签的属性值,来达到想要的显示效果.</strong></li>
<li><strong>像素单位占据的是电脑屏幕的大小,百分比占据的是浏览器窗口的大小.</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>HTML</tag>
        <tag>body标签</tag>
        <tag>文本标签</tag>
        <tag>块级标签</tag>
        <tag>行级标签</tag>
        <tag>行内块级标签</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习-1</title>
    <url>/43808.html</url>
    <content><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405124901.png"  alt="image-20200405124741910"></p>
<h2 id="互联网的三大基石"><a href="#互联网的三大基石" class="headerlink" title="互联网的三大基石"></a>互联网的三大基石</h2><ul>
<li><strong>URL:统一资源定位符.(唯一的定位一个网络资源)</strong></li>
<li><strong>HTTP:超文本传输协议.(规范浏览器和服务器之间数据交 互的格式)</strong></li>
<li><strong>HTML:超文本标记语言(有效的组织数据在浏览器端的显示)</strong><a id="more"></a>    
<h2 id="HTML的概念"><a href="#HTML的概念" class="headerlink" title="HTML的概念"></a>HTML的概念</h2></li>
<li><strong>概念:HTML是一种超文本标记语言</strong></li>
<li><strong>作用：需要将java在后台根据用户请求处理的请求结果在 浏览器中显示给户. 在浏览器中数据需要使用友好的格式展现给用户,HTML是告诉浏览器接收到的数据使用什么样的数据 组织形式进行显示.</strong></li>
</ul>
<h2 id="HTML的文档声明"><a href="#HTML的文档声明" class="headerlink" title="HTML的文档声明"></a>HTML的文档声明</h2><ul>
<li><strong>文件名.html 或者 文件名.htm</strong></li>
<li>HTML的标准文档结构: <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    this is my first html.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>注意:HTML是由浏览器进行解析执行的</strong></li>
</ul>
<h2 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h2><ul>
<li><strong>head标签中主要配置浏览器的配置信息</strong></li>
<li><strong>注意：防止markdown转义，标签前面加了”-“.实际不需要</strong></li>
<li><strong>title标签</strong><ul>
<li>告诉浏览器使用什么标题显示网页 </li>
<li><strong>&lt;-title&gt;HTML学习&lt;/-title&gt;</strong></li>
</ul>
</li>
<li><strong>meta标签</strong><ul>
<li><strong>charset属性</strong><ul>
<li><strong>网页解析编码格式配置(HTML5):告诉浏览器使用指定的编码格式解析文档</strong></li>
<li><strong>&lt;-meta  charset=”utf-8”/&gt;-HTMl5</strong></li>
<li><strong>&lt;-meta http-equiv=”content-type” content=”text/html;charset=utf-8”/&gt;–HTML4:文档编码格式设置</strong></li>
</ul>
</li>
<li><strong>name属性</strong><ul>
<li><strong>keywords:&lt;-meta name=”keywords” content=”HTML,SXT,张老师,506”/&gt;-设置网页关键字</strong></li>
<li><strong>description:&lt;-meta name=”description” content=”本网页上是关于HTML的head标签学习的,特别棒,6666.”/&gt;-网页描述</strong></li>
<li><strong>author:    &lt;-meta name=”author” content=”张老师”/&gt;-网页作者</strong></li>
</ul>
</li>
<li>网页自动跳转<ul>
<li><strong>&lt;- meta  http-equiv=”refresh” content=”5;url=<a href="http://www.baidu.com&quot;/&gt;" target="_blank" rel="noopener">http://www.baidu.com&quot;/&gt;</a></strong></li>
</ul>
</li>
<li>作用:提升网页在浏览器中的搜索概率.</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>html</tag>
        <tag>网页开发</tag>
        <tag>head标签</tag>
        <tag>title标签</tag>
        <tag>meta标签</tag>
      </tags>
  </entry>
  <entry>
    <title>LOG4J基础使用</title>
    <url>/58900.html</url>
    <content><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405124945.png"  alt="" title="logo"></p>
<h2 id="LOG4J是什么？"><a href="#LOG4J是什么？" class="headerlink" title="LOG4J是什么？"></a>LOG4J是什么？</h2><p><strong>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</strong></p>
<a id="more"></a>
<h2 id="Log4j的作用"><a href="#Log4j的作用" class="headerlink" title="Log4j的作用"></a>Log4j的作用</h2><ul>
<li>什么是日志：<ul>
<li><strong>日志是系统运行过程中后台输出信息，方便程序员进行系统运行的管控以及Bug的查找</strong></li>
</ul>
</li>
<li>什么是log4i<ul>
<li><strong>log4i是一个日志输出的插件，专门用来进行日志的管理的</strong></li>
</ul>
</li>
<li>传统方式获取日志<ul>
<li>使用System.out.println()语句镜像后台打印</li>
<li>问题：<ul>
<li><strong>1.日志信息无法保存</strong></li>
<li><strong>2.无法显示完整日志信息</strong></li>
<li><strong>3.日志的显示没有级别所有的日志混在在一起显示（无法进行日志信息筛选）</strong></li>
<li><strong>4.日志显示格式不友好</strong></li>
</ul>
</li>
<li>解决：使用Log4j</li>
</ul>
</li>
<li>使用log4j进行日志管理<ul>
<li>特点：<ul>
<li><strong>1.日志可以单独保存在文件中</strong></li>
<li><strong>2.可以获取完整的日志信息</strong></li>
<li><strong>3.可以进行日志显示的筛选</strong></li>
<li><strong>4.格式友好</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="log4j的日志级别"><a href="#log4j的日志级别" class="headerlink" title="log4j的日志级别"></a>log4j的日志级别</h2><ul>
<li><strong>FATAL    ：致命的错误</strong></li>
<li><strong>ERROR    ：异常错误</strong>                        </li>
<li><strong>WARN    ：警告</strong></li>
<li><strong>INFO    ：信息（方法级别）</strong></li>
<li><strong>DEBUG    ：调试（代码级别）</strong></li>
</ul>
<h2 id="log4j的配置文件解释："><a href="#log4j的配置文件解释：" class="headerlink" title="log4j的配置文件解释："></a>log4j的配置文件解释：</h2><ul>
<li><p><strong>注意：配置文件一定要存放在src下，并命名为log4j.properties</strong></p>
</li>
<li><p>设置全局默认配置</p>
<ul>
<li><strong>log4j.rootCategory=INFO, CONSOLE,LOGFILE（日志级别，文件输出位置）</strong></li>
<li><strong>CONSOLE：控制台  LOGFILE：日志文件</strong></li>
</ul>
</li>
<li><p>设置某个包或者某个类或者某个方法的日志级别和输出位置</p>
<ul>
<li>log4j.logger.包名=FATAL, CONSOLE</li>
<li>log4j.logger.包名.类名=FATAL, CONSOLE</li>
<li>log4j.logger.包名.类名.方法名=DEBUG, CONSOLE（方法里面一般用DEBUG）</li>
<li><strong>log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE</strong></li>
</ul>
</li>
<li><p>设置控制台输出配置</p>
<ul>
<li><strong>log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</strong></li>
<li><strong>log4j.appender.CONSOLE.Threshold=INFO</strong></li>
<li><strong>log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</strong></li>
<li><strong>log4j.appender.CONSOLE.layout.ConversionPattern=%p-%d{yyyy/MM/dd hh:mm:ss}-%l-%m%n-控制台输出格式</strong></li>
</ul>
</li>
<li><p>设置文件输出配置</p>
<ul>
<li><strong>log4j.appender.LOGFILE=org.apache.log4j.FileAppender</strong></li>
<li><strong>log4j.appender.LOGFILE.File=C:/Data/axis.log-将日志写入到指定路径下</strong></li>
<li><strong>log4j.appender.LOGFILE.Append=true</strong></li>
<li><strong>log4j.appender.LOGFILE.Threshold=INFO</strong></li>
<li><strong>log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout</strong></li>
<li><strong>log4j.appender.LOGFILE.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n-日志文件的输出格式</strong>        </li>
</ul>
</li>
<li><p><strong>常用的输出格式：%p-%d{yyyy/MM/dd hh:mm:ss}-%l-%m%n</strong></p>
</li>
<li><p>log4j的使用流程：</p>
<ul>
<li>导入log4j的jar包</li>
<li>配置log4j的配置文件</li>
<li>再使用log4j的类中声明的Logger对象<ul>
<li>public static Logger logger = Logger.getLogger(类名.class);</li>
</ul>
</li>
<li>使用Logger对象调用日志方法进行日志输出语句声明</li>
<li>logger.debug(“我是debug信息”);//一般在方法内部使用</li>
<li>logger.info(“我是info信息”);//一般在调用方法使用</li>
<li>logger.warn(“我是warn信息”);//一般在需要警告的位置中使用</li>
<li>logger.error(“我是错误信息”);//在catch代码块中使用</li>
<li>logger.fatal(“我是致命信息”);//在catch代码块中使用</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>日志</tag>
        <tag>日志管理</tag>
        <tag>配置文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射学习-1</title>
    <url>/8601.html</url>
    <content><![CDATA[<h2 id="反射的概念和作用"><a href="#反射的概念和作用" class="headerlink" title="反射的概念和作用:"></a>反射的概念和作用:</h2><ul>
<li>JAVA反射机制是在运行状态中，对于任意一个实体类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</li>
<li><strong>反射的概念：万事万物皆对象,类也是对象.</strong></li>
<li><strong>引用:通过反射创建类对象和使用类对象.</strong><a id="more"></a></li>
<li>问题:<ul>
<li>传统方式创建对象:new 类名();,前提是必须预先知道要使用的类.但是,如果无法确定要执行的对象怎么办?</li>
<li>如果要修改使用的类,必须修改源码.</li>
</ul>
</li>
<li>解决:使用反射.</li>
</ul>
<h2 id="反射获取类对象"><a href="#反射获取类对象" class="headerlink" title="反射获取类对象"></a>反射获取类对象</h2><ul>
<li><strong>Class.forName();———根据全限定路径获取(必须会)</strong><ul>
<li><strong>Class cla01 = Class.forName(“Bean.Person”);</strong></li>
</ul>
</li>
<li>对象名.getClass();——-根据对象获取<ul>
<li>Class cla02 = Person.class;</li>
</ul>
</li>
<li>类名.class—————根据类名获取<ul>
<li>Class cla03 = new Person().getClass();</li>
</ul>
</li>
<li>获取类对象的相关方法函数<ul>
<li>获取类对象的包名：cla01.getPackage()</li>
<li>获取类对象的修饰符：cla01.getModifiers()</li>
<li>获取类的名称(全限定)：cla01.getName()</li>
<li>获取类的名称(类名)：cla01.getSimpleName()</li>
<li><strong>获取类的父级类对象：cla01.getSuperclass()</strong></li>
</ul>
</li>
<li><strong>注意：一个类只有一个类对象</strong></li>
</ul>
<h2 id="反射操作类属性"><a href="#反射操作类属性" class="headerlink" title="反射操作类属性"></a>反射操作类属性</h2><ul>
<li>1.获取类对象</li>
<li><strong>Class cla = Class.forName(“Bean.Student”);</strong></li>
<li>2.获取反射类属性</li>
<li><strong>getFields() 获取该类及其父类的公共字段        返回Field[]</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] fds = cla.getFields();<span class="comment">//获取该类及其父类的公共字段</span></span><br><span class="line">    <span class="keyword">for</span> (Field f : fds) &#123;</span><br><span class="line">	    System.out.println(<span class="string">"获取属性名---------------"</span>+f.getName());</span><br><span class="line">		System.out.println(<span class="string">"获取修饰符---------------"</span>+f.getModifiers());</span><br><span class="line">		System.out.println(<span class="string">"获取类型---------------"</span>+f.getType());<span class="comment">//返回的是类型的Class对象</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>getDeclaredFields() 获取所有声明的字段（不包括父类）    返回Field[]</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] fds2 = cla.getDeclaredFields();</span><br><span class="line">	<span class="keyword">for</span> (Field f : fds2) &#123;</span><br><span class="line">		System.out.println(<span class="string">"获取属性名---------------"</span>+f.getName());</span><br><span class="line">		System.out.println(<span class="string">"获取修饰符---------------"</span>+f.getModifiers());</span><br><span class="line">		System.out.println(<span class="string">"获取类型---------------"</span>+f.getType());<span class="comment">//返回的是类型的Class对象</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>getField(String name) 获取指定的公共字段包括父类        返回Field</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field f = cla.getField(<span class="string">"pname"</span>);<span class="comment">//指定获取公共字段及其父类公共字段</span></span><br><span class="line">	System.out.println(f.getName());</span><br></pre></td></tr></table></figure></li>
<li><strong>getDeclaredField(String name)    获取指定的声明字段（不包括父类）    返回Field</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field f2 = cla.getDeclaredField(<span class="string">"money"</span>);<span class="comment">//指定获取该类的的所有字段</span></span><br><span class="line">	System.out.println(f2.getName());</span><br></pre></td></tr></table></figure></li>
<li><strong>获取父类的所有声明字段</strong></li>
<li><strong>获取子类对象，通过子类的cla0.getSuperclass()反射获取到父类对象，再通过getDeclaredFields()或者getDeclaredField(String name)</strong>获取父类全部声明对象或者指定声明对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field f3 = cla.getSuperclass().getDeclaredField(<span class="string">"page"</span>);</span><br><span class="line">	System.out.println(f3.getName());</span><br></pre></td></tr></table></figure></li>
<li>3.操作字段值</li>
<li>静态属性值    <ul>
<li>Field fs = cla.getDeclaredField(“money”);</li>
<li><strong>fs.set(null, 2000);-静态为null</strong></li>
<li>System.out.println(fs.get(null));</li>
</ul>
</li>
<li>非静态属性值<ul>
<li>Field fd = cla.getDeclaredField(“sname”);</li>
<li><strong>Object obj = cla.newInstance();-cla.newInstance()为获取类对象的实例化</strong></li>
<li><strong>fd.set(obj, “李四”);</strong></li>
<li>System.out.println(fd.get(obj));</li>
</ul>
</li>
<li>暴力反射操作私有化属性（了解）<ul>
<li>Object obj2 = cla.newInstance();–获取实例化对象</li>
<li>Field fd2 = cla.getDeclaredField(“ssex”);–暴力反射，操作私有属性，不安全</li>
<li><strong>fd2.setAccessible(true);</strong></li>
<li>fd2.set(obj2, “女”);</li>
<li>System.out.println(fd2.get(obj2));</li>
</ul>
</li>
</ul>
<h2 id="反射操作类方法"><a href="#反射操作类方法" class="headerlink" title="反射操作类方法"></a>反射操作类方法</h2><ul>
<li>1.获取类对象</li>
<li><strong>Class cla = Class.forName(“Bean.Student”);</strong></li>
<li>2.获取类方法对象</li>
<li><strong>getMethods() 获取所有的公共方法包括父类</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method[] ms = cla.getMethods();</span><br><span class="line">	<span class="keyword">for</span> (Method m : ms) &#123;</span><br><span class="line">		System.out.println(<span class="string">"获取方法名---&gt;"</span>+m.getName());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>getDeclaredMethods() 获取所有声明方法不包括父类</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method[] ms2 = cla.getDeclaredMethods();</span><br><span class="line">	<span class="keyword">for</span> (Method m : ms2) &#123;</span><br><span class="line">		System.out.println(<span class="string">"获取方法名---&gt;"</span>+m.getName());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>getMethod(String name,Class…cla) 获取指定的公共方法包括父类</strong></li>
<li><strong>String name 表示方法名 Class…cla 表示方法接收的参数类型的类对象</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method m=cla.getMethod(<span class="string">"pHi"</span>, <span class="keyword">int</span>.class,String.class);</span><br><span class="line">System.out.println(m.getName());</span><br></pre></td></tr></table></figure></li>
<li><strong>getDeclaredMethod(String name,Class…cla)        获取指定声明方法不包括父类</strong></li>
<li><strong>String name 表示方法名 Class…cla 表示方法接收的参数类型的类对象</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method m2 = cla.getDeclaredMethod(<span class="string">"sHello"</span>, <span class="keyword">null</span>);</span><br><span class="line">System.out.println(m2.getName());</span><br></pre></td></tr></table></figure></li>
<li>3.执行方法</li>
<li>静态方法<ul>
<li><strong>Method  m3 = cla.getDeclaredMethod(“sHi”, String.class);–方法名，参数类对象</strong></li>
<li><strong>m3.invoke(null, “今天学了反射”);-静态为null，传入参数的值</strong></li>
</ul>
</li>
<li>非静态方法<ul>
<li><strong>Method m4 = cla.getDeclaredMethod(“sHi”, null);-方法名，参数类对象</strong></li>
<li><strong>Object obj = cla.newInstance();-类对象实例化</strong></li>
<li><strong>System.out.println(m4.invoke(obj, null));-类对象实例化，传入参数的值</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC操作学习-5</title>
    <url>/60981.html</url>
    <content><![CDATA[<h2 id="JDBC的封装"><a href="#JDBC的封装" class="headerlink" title="JDBC的封装"></a>JDBC的封装</h2><ul>
<li><p>问题:在数据库操作方法中关于驱动加载和数据库连接对象的代码是重复的.会造成修改数据源特别麻烦.</p>
<ul>
<li><strong>解决1:将jdbc参数在功能类中提取为全局变量</strong></li>
</ul>
</li>
<li><p>问题2:如果使用解决方式1解决后,修改了数据源则必须重启程序.而开发过程中尽量要求,在不重启程序的情况下完成对代码的参数的修改.</p>
<ul>
<li><strong>解决2:将jdbc参数存储到properties属性配置文件中,封装工具类进行获取.</strong><a id="more"></a></li>
</ul>
</li>
<li><p>知识点:</p>
<ul>
<li><strong>properties文件是专门用来存储属性配置的文件,格式要求必须是键值对,以=号隔开.一行一组键值对,并且不能使用分号结尾.可以使用Properties对象来进行读取该文件的内容.</strong>    </li>
</ul>
</li>
<li><p>使用:</p>
<ul>
<li><strong>创建java工具类（Util-JdbcUtil）</strong></li>
<li>创建jdbc参数静态变量</li>
<li>创建静态代码块</li>
<li><strong>创建properties对象（db.properties）</strong></li>
<li>获取properties文件流对象</li>
<li>加载属性配置文件</li>
<li>获取jdbc参数并赋值给静态变量</li>
<li>加载驱动</li>
<li>创建获取Connection对象的静态方法</li>
<li>创建获取PreparedStatement对象的静态方法</li>
<li>创建获取Statement对象的静态方法</li>
<li>创建关闭资源静态方法</li>
<li>创建增删改的封装方法–executeDML</li>
</ul>
</li>
<li><p><strong>注意:需要在src下声明存储了jdbc参数的properties文件(db.properties):</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>= <span class="string">oracle.jdbc.driver.OracleDriver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:oracle:thin:@localhost:1521:XE</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">scott</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">tiger</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   JDBCUtil封装源码:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtil</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">	<span class="comment">//创建properties对象获取属性文件的内容</span></span><br><span class="line">	Properties p=<span class="keyword">new</span> Properties();</span><br><span class="line">	<span class="comment">//获取属性文件的读取流对象</span></span><br><span class="line">	InputStream is=JdbcUtil.class.getResourceAsStream(<span class="string">"/db.properties"</span>);</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">//加载属性配置文件</span></span><br><span class="line">		p.load(is);</span><br><span class="line">		<span class="comment">//获取jdbc参数</span></span><br><span class="line">		driver=p.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">		url=p.getProperty(<span class="string">"url"</span>);</span><br><span class="line">		username=p.getProperty(<span class="string">"username"</span>);</span><br><span class="line">		password=p.getProperty(<span class="string">"password"</span>);</span><br><span class="line">		<span class="comment">//加载驱动</span></span><br><span class="line">		Class.forName(driver);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Connection对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Connection conn=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		 conn=DriverManager.getConnection(url, username, password);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> conn;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装获取PreparedStatement对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PreparedStatement <span class="title">getPreparedStatement</span><span class="params">(String sql,Connection conn)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		ps =conn.prepareStatement(sql);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ps;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装获取Statement对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Statement <span class="title">getStatement</span><span class="params">(Connection conn)</span></span>&#123;</span><br><span class="line">	Statement stmt=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		stmt = conn.createStatement();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> stmt;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(ResultSet rs,Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		rs.close();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		stmt.close();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		conn.close();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装DML</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">executeDML</span><span class="params">(String sql,Object...objs)</span></span>&#123;</span><br><span class="line">	<span class="comment">//创建连接对象</span></span><br><span class="line">	Connection conn=getConnection();</span><br><span class="line">	<span class="comment">//创建sql命令对象</span></span><br><span class="line">	PreparedStatement ps=JdbcUtil.getPreparedStatement(sql, conn);</span><br><span class="line">	<span class="comment">//给占位符赋值</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;objs.length;i++)&#123;</span><br><span class="line">				ps.setObject(i+<span class="number">1</span>, objs[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> i=ps.executeUpdate();</span><br><span class="line">			conn.commit();</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					conn.rollback();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e1.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="comment">//关闭资源</span></span><br><span class="line">			JdbcUtil.closeAll(<span class="keyword">null</span>, ps, conn);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//返回结果</span></span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
        <tag>数据库</tag>
        <tag>JAVA</tag>
        <tag>JDBC封装</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC操作学习-4</title>
    <url>/12020.html</url>
    <content><![CDATA[<h2 id="使用PreparedStatement对象完成数据库的增删改查"><a href="#使用PreparedStatement对象完成数据库的增删改查" class="headerlink" title="使用PreparedStatement对象完成数据库的增删改查"></a>使用PreparedStatement对象完成数据库的增删改查</h2><ul>
<li>特点:<ul>
<li><strong>防止sql注入</strong></li>
<li><strong>提升sql语句的执行效率(当批量执行同一类型的sql语句时)</strong><a id="more"></a></li>
</ul>
</li>
<li>使用:<ul>
<li>创建集合或者实体类对象(可选-查询)    </li>
<li>加载驱动</li>
<li>获取连接对象</li>
<li>设置手动数据提交(可选–增删改)</li>
<li><strong>创建sql命令</strong></li>
<li><strong>获取sql命令对象</strong></li>
<li>给占位符赋值</li>
<li>执行sql语句</li>
<li>遍历执行结果(可选–查询)</li>
<li>提交数据(可选–增删改)</li>
<li>回滚数据(可选-增删改)</li>
<li>关闭资源</li>
<li>返回结果(封装成方法)</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> </span>&#123;	</span><br><span class="line">	<span class="comment">//查询用户信息</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getUserInfo</span><span class="params">(String uname,String upwd)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException</span>&#123;</span><br><span class="line">		<span class="comment">//声明User对象</span></span><br><span class="line">		User u=<span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//加载驱动</span></span><br><span class="line">		Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line">		<span class="comment">//创建连接对象</span></span><br><span class="line">		Connection conn=DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>, <span class="string">"scott"</span>, <span class="string">"oracle"</span>);</span><br><span class="line">		<span class="comment">//创建sql命令</span></span><br><span class="line">		String sql=<span class="string">"select * from t_user where uname=? and upwd=?"</span>;</span><br><span class="line">		<span class="comment">//创建sql命令对象</span></span><br><span class="line">		PreparedStatement ps=conn.prepareStatement(sql);</span><br><span class="line">		<span class="comment">//给占位符赋值(占位符从左到右角标从1开始)</span></span><br><span class="line">		ps.setString(<span class="number">1</span>, uname);</span><br><span class="line">		ps.setString(<span class="number">2</span>, upwd);</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//执行sql命令</span></span><br><span class="line">		ResultSet rs=ps.executeQuery();</span><br><span class="line">		<span class="comment">//遍历查询结果</span></span><br><span class="line">		<span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">			u=<span class="keyword">new</span> User();</span><br><span class="line">			u.setUnum(rs.getInt(<span class="string">"unum"</span>));</span><br><span class="line">			u.setUname(rs.getString(<span class="string">"uname"</span>));</span><br><span class="line">			u.setUpwd(rs.getString(<span class="string">"upwd"</span>));</span><br><span class="line">			<span class="keyword">return</span> u;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//关闭资源</span></span><br><span class="line">		rs.close();</span><br><span class="line">		ps.close();</span><br><span class="line">		conn.close();</span><br><span class="line">		<span class="comment">//返回执行结果</span></span><br><span class="line">		<span class="keyword">return</span> u;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//新增--preparedStatement</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insUser2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException</span>&#123;</span><br><span class="line">			<span class="comment">//加载驱动</span></span><br><span class="line">			Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line">			<span class="comment">//创建连接对象</span></span><br><span class="line">			Connection conn=DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>, <span class="string">"scott"</span>, <span class="string">"oracle"</span>);</span><br><span class="line">			<span class="comment">//创建sql命令</span></span><br><span class="line">			String sql=<span class="string">"insert into t_user values(?,?,?)"</span>;</span><br><span class="line">			<span class="comment">//创建sql命令对象</span></span><br><span class="line">			PreparedStatement ps=conn.prepareStatement(sql);</span><br><span class="line">			<span class="comment">//给占位符赋值</span></span><br><span class="line">				ps.setInt(<span class="number">1</span>, <span class="number">7</span>);</span><br><span class="line">				ps.setString(<span class="number">2</span>,<span class="string">"赵六"</span>);</span><br><span class="line">				ps.setString(<span class="number">3</span>,<span class="string">"666"</span>);</span><br><span class="line">				<span class="comment">//执行sql命令</span></span><br><span class="line">				<span class="keyword">int</span> i=ps.executeUpdate();</span><br><span class="line">			<span class="comment">//关闭资源</span></span><br><span class="line">				ps.close();</span><br><span class="line">				conn.close();</span><br><span class="line">			<span class="comment">//返回结果</span></span><br><span class="line">				<span class="keyword">return</span> i;</span><br><span class="line">		&#125;	</span><br><span class="line">	<span class="comment">//更新</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">upUser</span><span class="params">(String uname,<span class="keyword">int</span> unum)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException</span>&#123;</span><br><span class="line">			<span class="comment">//加载驱动</span></span><br><span class="line">			Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line">			<span class="comment">//获取连接对象</span></span><br><span class="line">			Connection conn=DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>, <span class="string">"scott"</span>, <span class="string">"oracle"</span>);</span><br><span class="line">			<span class="comment">//创建sql命令</span></span><br><span class="line">			String sql=<span class="string">"update t_user set uname=? where unum=?"</span>;</span><br><span class="line">			<span class="comment">//获取sql命令对象</span></span><br><span class="line">			PreparedStatement ps=conn.prepareStatement(sql);</span><br><span class="line">			<span class="comment">//给占位符赋值</span></span><br><span class="line">			ps.setString(<span class="number">1</span>, uname);</span><br><span class="line">			ps.setInt(<span class="number">2</span>, unum);</span><br><span class="line">			<span class="comment">//执行sql命令</span></span><br><span class="line">			<span class="keyword">int</span> i=ps.executeUpdate();</span><br><span class="line">			<span class="comment">//关闭资源</span></span><br><span class="line">			ps.close();</span><br><span class="line">			conn.close();</span><br><span class="line">			<span class="comment">//返回结果	</span></span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;	</span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delUser</span><span class="params">(<span class="keyword">int</span> unum)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException</span>&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//加载驱动</span></span><br><span class="line">			Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line">			<span class="comment">//获取连接对象</span></span><br><span class="line">			Connection conn=DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>, <span class="string">"scott"</span>, <span class="string">"oracle"</span>);</span><br><span class="line">			<span class="comment">//创建sql命令</span></span><br><span class="line">			String sql=<span class="string">"delete from t_user where unum=?"</span>;</span><br><span class="line">			<span class="comment">//获取sql命令对象</span></span><br><span class="line">			PreparedStatement ps=conn.prepareStatement(sql);</span><br><span class="line">			<span class="comment">//给占位符赋值</span></span><br><span class="line">			ps.setObject(<span class="number">1</span>, unum);</span><br><span class="line">			<span class="comment">//执行sql命令</span></span><br><span class="line">			<span class="keyword">int</span> i=ps.executeUpdate();</span><br><span class="line">			<span class="comment">//关闭资源</span></span><br><span class="line">			ps.close();</span><br><span class="line">			conn.close();</span><br><span class="line">			<span class="comment">//返回结果	</span></span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">			</span><br><span class="line">		&#125;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
        <tag>数据库</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC操作学习-3</title>
    <url>/60597.html</url>
    <content><![CDATA[<h2 id="JDBC事务管理"><a href="#JDBC事务管理" class="headerlink" title="JDBC事务管理"></a>JDBC事务管理</h2><p><strong>事务:一个事件的完成需要几个子操作的联合完成,只要有一个子操作执行失败,则数据回滚到原始状态,都成功则提交数据.</strong></p>
<a id="more"></a>
<ul>
<li><p>转账业务</p>
<ul>
<li><p>张三给李四转账1000元.</p>
</li>
<li><p><strong>注意:JDBC中的事务是自动提交的.</strong></p>
</li>
<li><p>问题:如果在业务的处理过程中,某条Sql语句执行失败,但是数据已经被更改了.</p>
</li>
<li><p><strong>解决:设置JDBC的事务为手动提交.sql语句都执行成功后再统一提交,只要有失败的就回滚.</strong></p>
</li>
<li><p>使用:<font color = red><strong>conn.setAutoCommit(false)//设置为手动提交</strong></font></p>
</li>
<li><p>使用try catch进行SQL命令执行的异常处理</p>
<ul>
<li><strong>try中是使用conn.commit() 提交数据</strong></li>
<li><strong>catch中使用conn.rollback()回滚数据</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTran</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">		<span class="comment">//加载驱动</span></span><br><span class="line">			Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line">		<span class="comment">//创建连接对象</span></span><br><span class="line">			Connection conn=DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@localhost:1521:XE"</span>, <span class="string">"scott"</span>,<span class="string">"oracle"</span>);</span><br><span class="line">		<span class="comment">//设置事务为手动提交</span></span><br><span class="line">			conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">		<span class="comment">//创建sql命令对象</span></span><br><span class="line">			Statement stmt=conn.createStatement();</span><br><span class="line">		<span class="comment">//创建sql命令</span></span><br><span class="line">			String sql1=<span class="string">"update student set money=money-1000 where snum=6"</span>;<span class="comment">//转账</span></span><br><span class="line">			String sql2=<span class="string">"update student set money=money2+1000 where snum=7"</span>;<span class="comment">//入账</span></span><br><span class="line">		<span class="comment">//执行sql命令</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">int</span> i1=stmt.executeUpdate(sql1);</span><br><span class="line">				<span class="keyword">int</span> i2=stmt.executeUpdate(sql2);</span><br><span class="line">				System.out.println(i1+<span class="string">"----"</span>+i2);</span><br><span class="line">				conn.commit();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				conn.rollback();<span class="comment">//数据回滚</span></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="comment">//关闭资源</span></span><br><span class="line">			stmt.close();</span><br><span class="line">		    conn.close();	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
        <tag>数据库</tag>
        <tag>JAVA</tag>
        <tag>事务管理</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC操作学习-2</title>
    <url>/11380.html</url>
    <content><![CDATA[<h2 id="JDBC的基本使用流程"><a href="#JDBC的基本使用流程" class="headerlink" title="JDBC的基本使用流程:"></a>JDBC的基本使用流程:</h2><ul>
<li>1 导入jar包:<ul>
<li><strong>oracle安装路径\app\oracle\product\11.2.0\server\jdbc\lib</strong></li>
<li><strong>导入ojdbc6.jar,在项目上右键 builder path–&gt;add to builder path.</strong></li>
</ul>
</li>
<li>2 加载驱动 <ul>
<li><strong>Class.forName(“oracle.jdbc.driver.OracleDriver”);</strong></li>
<li>作用:初始化加载jdbc类到java虚拟机.</li>
<li><strong>注意:ojdbc6.jar使用此包该句可以省略不写.</strong>    <a id="more"></a>    </li>
</ul>
</li>
<li>3 获取数据库连接对象<ul>
<li><strong>Connection conn =DriverMananger.getConnection(“url”,”username”,”password”);</strong></li>
<li>参数含义:<ul>
<li>url:表示要连接的数据地址</li>
<li>username:数据库的用户名</li>
<li>password:数据库的密码</li>
</ul>
</li>
<li>作用:<ul>
<li><strong>连接到指定的数据库并返回连接对象.</strong></li>
</ul>
</li>
</ul>
</li>
<li>4 创建sql命令对象<ul>
<li><strong>Statement stmt=conn.createStatement();</strong></li>
<li>作用:<ul>
<li><strong>编译,发送SQL命令</strong></li>
</ul>
</li>
</ul>
</li>
<li>5 创建sql命令<ul>
<li><strong>String sql=”insert into dept values(92,’’,’’)”;</strong></li>
</ul>
</li>
<li>6 执行sql命令:<ul>
<li>新增sql命令:<ul>
<li><strong>int i=stmt.executeUpdate(sql);(适用增删改))</strong></li>
</ul>
</li>
<li>返回值:<ul>
<li><strong>返回值如果小于0,表示未执行成功</strong></li>
<li><strong>返回值如果大于0,表示成功修改的数据量.</strong></li>
</ul>
</li>
</ul>
</li>
<li>7 关闭资源<ul>
<li>stmt.close();</li>
<li>conn.close();<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInsert2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//声明jdbc变量</span></span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//声明jdbc参数</span></span><br><span class="line">		String driver = <span class="string">"oracle.jdbc.driver.OracleDriver"</span>;</span><br><span class="line">		String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:XE"</span>;</span><br><span class="line">		String username = <span class="string">"scott"</span>;</span><br><span class="line">		String password = <span class="string">"tiger"</span>;</span><br><span class="line">		<span class="comment">//1.加载驱动类</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(driver);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//2.获取数据库连接对象</span></span><br><span class="line">			conn = DriverManager.getConnection(url, username, password);<span class="comment">//XE代表oracle数据库名</span></span><br><span class="line">			<span class="comment">//3.创建sql命令对象</span></span><br><span class="line">			stmt = conn.createStatement();</span><br><span class="line">			<span class="comment">//4.创建sql命令</span></span><br><span class="line">			String sql = <span class="string">"insert into dept values(92,'吃鸡学院','北京')"</span>;</span><br><span class="line">			<span class="comment">//5.执行sql命令</span></span><br><span class="line">			<span class="keyword">int</span> i = stmt.executeUpdate(sql);<span class="comment">//没有执行成功，返回-1.执行成功，返回数等于多少改变多少数据</span></span><br><span class="line">			System.out.println(<span class="string">"执行结果："</span>+i);</span><br><span class="line">		</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">//6.关闭资源</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				stmt.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e1.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="常见的jdbc错误"><a href="#常见的jdbc错误" class="headerlink" title="常见的jdbc错误:"></a>常见的jdbc错误:</h2><ul>
<li>ClassNotFoundException:驱动类未找到.</li>
<li>java.sql.SQLException: No suitable driver found for :thin:@localhost:1521:orcl：URL错误</li>
<li>java.sql.SQLException: ORA-01017: invalid username/password; logon denied：用户名或密码错误</li>
<li>java.sql.SQLSyntaxErrorException: ORA-00900: 无效 SQL 语句：Sql语句错误</li>
<li>java.sql.SQLIntegrityConstraintViolationException: ORA-00001: 违反唯一约束条件 (SCOTT.PK_DEPT)主键冲突</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
        <tag>数据库</tag>
        <tag>JAVA</tag>
        <tag>增删改</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC操作学习-1</title>
    <url>/11572.html</url>
    <content><![CDATA[<h2 id="JAVA的数据获取方式"><a href="#JAVA的数据获取方式" class="headerlink" title="JAVA的数据获取方式:"></a>JAVA的数据获取方式:</h2><ul>
<li>直接声明变量并赋值.</li>
<li>Scanner类控制台输入</li>
<li>IO流(将硬盘存储中的数据读取到java中)</li>
<li>scoket+io</li>
<li><strong>从数据库中获取</strong><a id="more"></a>
<h2 id="JDBC的概念"><a href="#JDBC的概念" class="headerlink" title="JDBC的概念:"></a>JDBC的概念:</h2></li>
<li>问题:<ul>
<li>java和数据库之间的沟通不一致    </li>
</ul>
</li>
<li>解决:<ul>
<li>数据库厂商对外提供java支持的接口</li>
</ul>
</li>
<li>使用:<ul>
<li>创建类实现接口(操作数据库)</li>
<li>数据库厂商对外提供了数据库操作的驱动包.(翻译官)</li>
</ul>
</li>
<li>结论:<ul>
<li><strong>JDBC其实就是数据厂商对外提供的能够对自己的数据进行操作的驱动包也就是jar文件.</strong></li>
</ul>
</li>
<li>JDBC的使用:<ul>
<li>jdbc完成新增</li>
<li>jdbc完成修改</li>
<li>jdbc完成删除</li>
<li>jdbc的事务</li>
<li>jdbc完成查询</li>
<li>jdbc的MVC思想</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JDBC</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
        <tag>数据库</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库-2</title>
    <url>/35176.html</url>
    <content><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>数值类型<ul>
<li>整数类型<ul>
<li>smallint, 2 字节</li>
<li><strong>int, 4 字节</strong><a id="more"></a></li>
<li>Integer, int 的同义词</li>
<li><strong>bigint, 8 字节</strong></li>
</ul>
</li>
<li>浮点数<ul>
<li><strong>float, 4 字节</strong></li>
<li><strong>double, 8 字节</strong></li>
</ul>
</li>
</ul>
</li>
<li>字符类型<ul>
<li>char, 不可变长度</li>
<li>varchar, 可变长度</li>
<li><strong>等同于oracle中的char与varchar2区别</strong></li>
<li><strong>char的存储效率高于varchar(varchar2)</strong></li>
<li><strong>char是开辟指定大小的内存空间，varchar(varchar2)是根据数据大小来开辟空间的大小</strong></li>
</ul>
</li>
<li>日期时间类型<ul>
<li><strong>date, yyyy-mm-dd（同oracle书写格式不一样）</strong></li>
<li>datetime, yyyy-mm-dd hh:mi:ss</li>
<li>time, hh:mi:ss</li>
<li>timestamp, 更精确的时间</li>
<li>year, yyyy</li>
</ul>
</li>
<li>其他类型<ul>
<li>blob, 存放二进制文件</li>
<li>text, 存放大量文本信息</li>
</ul>
</li>
</ul>
<h2 id="SQL语句上的区别"><a href="#SQL语句上的区别" class="headerlink" title="SQL语句上的区别"></a>SQL语句上的区别</h2><ul>
<li>关于delete<ul>
<li><strong>Oracle 中的语法是 delete [from], from 可以省略, 但是MySQL 中, 不能省略 from</strong></li>
</ul>
</li>
<li>关于外连接<ul>
<li><strong>MySQL 中不能使用(+)符号, 所以在外连接时, 应该使用SQL99 的语法.</strong></li>
</ul>
</li>
<li>分页查询<ul>
<li><strong>MySQL 分页需要使用 limit 关键字, limit 后需要跟两个数字, 第一个数字表示查询的起始位置, 第二个数字表示查询的记录数. limit 要写在 order by 之后.</strong></li>
<li><strong>当前页数, page 每页显示的记录数, size</strong></li>
<li><strong>select * from clazz limit (page-1)*size, size;</strong></li>
</ul>
</li>
</ul>
<h2 id="其他区别"><a href="#其他区别" class="headerlink" title="其他区别"></a>其他区别</h2><ul>
<li><strong>MySQL中没有序列 通过auto_increment递增</strong></li>
<li><strong>MySQL不支持检查约束（check），其他约束一样</strong></li>
</ul>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>MySQL与Oracle的区别</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库-1</title>
    <url>/34856.html</url>
    <content><![CDATA[<h2 id="MySQl数据库简介"><a href="#MySQl数据库简介" class="headerlink" title="MySQl数据库简介"></a>MySQl数据库简介</h2><ul>
<li>MySQL是一种关系数据库管理系统，是一种开源软件</li>
<li>由瑞典MySQL AB公司开发，2008年1月16号被Sun公司收购。2009年，SUN又被Oracle收购</li>
<li>MySQL软件采用双授权政策，分为社区版和商业版。由于体积小、速度快、总体拥有成本低，尤其是开放源码特点，一般中小型网站的开发都选择MySQL作为网站数据库。</li>
<li>由于其社区版的性能卓越，搭配PHP和Apache可组成良好的开发环境。</li>
<li>MySQL能够工作在众多不同的平台上<a id="more"></a></li>
<li>端口：3306</li>
<li>默认用户：root</li>
<li>字符集：默认字符集latin1，应设置为gbk或<strong>utf-8</strong></li>
<li>安装时可以启动远程登录、创建匿名账户 可安装图形化操作界面，方便操作</li>
</ul>
<h2 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h2><ul>
<li>连接MySQL<ul>
<li><strong>mysql -u root -p</strong></li>
</ul>
</li>
<li>查看当前所有数据库<ul>
<li><strong>show databases;</strong></li>
</ul>
</li>
<li>创建数据库<ul>
<li><strong>create database 数据库名;</strong></li>
</ul>
</li>
<li>使用（切换）数据库<ul>
<li><strong>user 数据库名;</strong></li>
</ul>
</li>
<li>查看当前数据库的所有表格<ul>
<li><strong>show tables;</strong></li>
</ul>
</li>
<li>退出<ul>
<li><strong>exit;</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库基础知识-12</title>
    <url>/50870.html</url>
    <content><![CDATA[<h2 id="分页查询-rownum"><a href="#分页查询-rownum" class="headerlink" title="分页查询-rownum"></a>分页查询-rownum</h2><p><strong>当一个表中的数据量特别大的时候，如果一次性全部显示给用户，则造成页面过于庞大，体验极差。使用分页查询可以大大改善</strong></p>
<ul>
<li>rownum关键字：oracle对外提供的自动给查询结果编号的关键字，<strong>与每行的数据没有关系。</strong><a id="more"></a></li>
<li><strong>注意：rownum关键字只能做&lt; &lt;=的判断，不能进行&gt; &gt;=的判断</strong></li>
<li>实例<ul>
<li>查询员工信息的前5条数据 第一页数据</li>
<li>select rownum r,e.* from emp e where rownum &lt;=5;</li>
<li><strong>select * from (select rownum r,e.* from emp e where rownum &lt;=5) t where r&gt;0;</strong></li>
<li>查询员工信息的6-10条数据 第二页数据</li>
<li><strong>select rownum,t.* from (select rownum r,e.* from emp e where rownum &lt;=10) t where r&gt;5;</strong></li>
<li>查询员工信息的11-15条数据 第三页数据</li>
<li><strong>select * from (select rownum r,e. * from emp e where rownum&lt;=15) t where r&gt;10;</strong></li>
<li>要分页的表既可以是真实的表，也可以是一个查询语句</li>
<li>分页查询员工信息按照工资排序</li>
<li><strong>select * from (select rownum r,t.* from (select * from emp  order by sal) t where rownum&lt;=10 ) where r&gt;5</strong></li>
</ul>
</li>
<li><strong>分页规律总结：每页显示m条数据，查询第n页数据</strong><ul>
<li><strong>select * from (select rownum r,e. * from 要分页的表 e where rownum&lt;=m<em>n) t where r&gt;m</em>n-m ;</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>分页查询</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库基础知识-11</title>
    <url>/51190.html</url>
    <content><![CDATA[<h2 id="序列-sequence"><a href="#序列-sequence" class="headerlink" title="序列-sequence"></a>序列-sequence</h2><ul>
<li><strong>按照指定的序列初始值，按步长进行增长。数值永不重复</strong></li>
<li><strong>默认没有初始值的，nextval的值默认从1开始，默认每次自增+1</strong></li>
<li><strong>可以使用 序列名.nextval坐为主键使用</strong><a id="more"></a></li>
<li>创建：<ul>
<li>create sequence 序列名</li>
<li><strong>create sequence cnum;</strong></li>
<li>序列名.currval查看当前序列的值。开始是没有的。</li>
<li><strong>select cnum.currval from dual—获取当前序列值</strong></li>
<li>序列名.nextval每次执行都会自增一次，默认步长为1</li>
<li><strong>select cnum.nextval from dual—序列自增后返回当前值</strong></li>
<li><strong>create sequence cc–创建序列</strong></li>
<li><strong>start with 90—设定序列初始值</strong></li>
<li><strong>increment by 5—设定步长</strong></li>
<li>maxvalue 10000—设置最大值</li>
<li>cache  10  —–设置缓存</li>
<li>insert into clazz values(<strong>cc.nextval</strong>,’402班级’,’强班’);</li>
</ul>
</li>
<li><strong>删除序列：drop sequence cc</strong></li>
</ul>
<h2 id="索引-index"><a href="#索引-index" class="headerlink" title="索引-index"></a>索引-index</h2><ul>
<li><strong>当表中数据量比较大的时候，使用条件查询就会出现效率的问题。使用索引提升查询效率</strong></li>
<li><strong>原理：类似于java中数组的折半查找，在数据库中数据使用B树形结构进行数据的存储，</strong></li>
<li>创建：<ul>
<li>create index  表名_index_字段名 on 表名(字段名)</li>
<li><strong>create index emp_index_sal on emp(sal)</strong></li>
<li>显示的创建，隐式的执行。oracle会自动给表的主键创建索引</li>
<li>create index emp_index_sal_desc on emp(sal desc);–创建单排序索引</li>
<li>create index emp_index_sal_desc2 on emp(sal desc,job asc);–创建多条件排序索引</li>
</ul>
</li>
<li><strong>删除索引 drop index 索引名：drop index index_teacher_tname</strong></li>
</ul>
<h2 id="视图-view"><a href="#视图-view" class="headerlink" title="视图-view"></a>视图-view</h2><ul>
<li>保护真实表，隐藏重要字段的数据。保护数据。</li>
<li>在视图中的操作会映射执行到真实表中</li>
<li>可以手动开启只读模式 使用关键字 with read only</li>
<li><strong>视图的创建必须拥有dba权限</strong></li>
<li>创建：<ul>
<li>create view 视图名 as select 对外提供的内容 from 真实表名</li>
<li><strong>create view stu as select sno,sname,sage from  bjsxt.student</strong></li>
<li><strong>create view stu2 as select sno,sname,sage from  student with read only-只读模式</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>序列</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库基础知识-10</title>
    <url>/1847.html</url>
    <content><![CDATA[<h2 id="主键约束-primary-key"><a href="#主键约束-primary-key" class="headerlink" title="主键约束-primary key"></a>主键约束-primary key</h2><ul>
<li>主键：它的值用于唯一地标识表中的某一条记录,且不能为空</li>
<li>创建：<ul>
<li><strong>在确定为主键的字段后添加</strong></li>
<li><strong>primary key关键字：create table student(snum number(10) primary key)</strong><a id="more"></a></li>
<li>在创建表的后面使用</li>
<li>constraints pk_表名_字段名 primary key(字段名)：create table student(snum number(10),constraints pk_student_snum primary key(sum))</li>
<li>在创建表后使用 alter table 表名 add constraints pk_表名_字段名 primary key(字段名)</li>
<li>alter table student add constraints pk_student_snum primary key(snum)</li>
</ul>
</li>
<li><strong>删除主键：alter table 表名 drop constraints pk_表名_字段名</strong></li>
<li><strong>alter table student drop constraints pk_student_snum–删除主键</strong></li>
</ul>
<h2 id="非空约束-not-null"><a href="#非空约束-not-null" class="headerlink" title="非空约束-not null"></a>非空约束-not null</h2><ul>
<li>用于指定的字段添加非空约束，让其字段值不能为空</li>
<li>创建：<ul>
<li>创建表的时候在字段后面添加not null</li>
<li><strong>create table student(snum number(10) not null)</strong></li>
<li>在创建表字段后使用 constraints ck_表名_字段名 check(字段名 is not null)  了解</li>
<li>constraints ck_student_sna check(sna is not null)</li>
<li>在创建表后使用：alter table 表名 modify 字段名 类型 not null</li>
<li>alter table student modify sna varchar2(100) not null;</li>
</ul>
</li>
<li><strong>修改字段可以存储空值：alter table 表名 modify 字段名 类型 null;</strong></li>
<li><strong>alter table student modify sna varchar2(100) null;–修改字段为空</strong></li>
</ul>
<h2 id="检查约束-check"><a href="#检查约束-check" class="headerlink" title="检查约束-check"></a>检查约束-check</h2><ul>
<li>字段按照条件输入，但是会允许空值的出现，并且默认值只有在字段不声明的情况下生效</li>
<li>创建：<ul>
<li>创建表的时候在字段后使用 default 值 check(条件)，</li>
<li><strong>sex char(4) default ‘男’ check(sex=’男’ or sex=’女’) not null</strong></li>
<li>在创建表所有字段后使用：constraints ck_表名_字段名  check(条件)</li>
<li>constraints ck_student_sex  check(sex =’男’ or sex=’女’)</li>
<li>在创建表后使用：alter table 表名 add constraints ck_表名_字段名 check(条件)</li>
<li>alter table student add constraints ck_student_sex check(sex=’男’ or sex=’女’)</li>
</ul>
</li>
<li><strong>alter table student drop constraints ck_student_sex –删除检查约束</strong></li>
</ul>
<h2 id="唯一约束-unique"><a href="#唯一约束-unique" class="headerlink" title="唯一约束-unique"></a>唯一约束-unique</h2><ul>
<li>唯一约束保证在一个字段或者一组字段里的数据与表中其它行的数据相比是唯一的。</li>
<li>创建：<ul>
<li>在字段后直接使用unique关键字</li>
<li><strong>qq number unique</strong></li>
<li>在所有字段后使用：constraints uk_表名_字段名 unique(字段名)</li>
<li>constraints uk_student_qq unique(qq)</li>
<li>在创建表后使用：alter table 表名 add constraints uk_表名_字段名 unique(字段名)</li>
<li>alter table student add constraints uk_student_qq unique(qq)</li>
</ul>
</li>
<li><strong>删除唯一约束：alter table 表名 drop constraints uk_表名_字段名</strong></li>
<li><strong>alter  table student drop constraints uk_student_qq</strong></li>
</ul>
<h2 id="外键约束-foreign-key"><a href="#外键约束-foreign-key" class="headerlink" title="外键约束-foreign key"></a>外键约束-foreign key</h2><ul>
<li><p>用来在两个表的数据之间建立链接，它可以是一列或者多列。一个表可以有一个或多个外键。</p>
</li>
<li><p>外键对应的是参照完整性，一个表的外键可以为空值，若不为空值，则每一个外键的值必须等于另一个表中主键的某个值。</p>
</li>
<li><p>创建：</p>
<ul>
<li>在字段后使用 references 参照表表名(参照字段)</li>
<li><strong>info number(10) references clazz(cid)–外键</strong></li>
<li>在所有字段后使用 constraints fk_表名_字段名 foreign key(字段名) references 参照表名(参照字段名)</li>
<li>constraints fk_stu_cinfo foreign key(cinfo) references clazz(cid)</li>
<li>在创建表后使用alter table 表名 add constraints fk_表名_字段名 foreign key(字段名) references 参照表名(参照字段名)</li>
<li>alter table stu add constraints fk_stu_cinfo foreign key(cinfo) references clazz(cid) –添加外键</li>
</ul>
</li>
<li><p><strong>删除外键 alter table 表名 drop constraints fk_表名_字段名</strong></p>
</li>
<li><p><strong>alter table stu drop constraints fk_stu_cinfo drop table stu</strong></p>
</li>
<li><p>问题：</p>
<ul>
<li>在删除父表数据的时候需要先删除子表数据？</li>
<li>解决方式1：先解除主外键关联，然后删除数据，再然后添加主外键关联</li>
<li>解决方式2：在创建外键的时候使用<strong>级联操作。</strong></li>
<li><strong>级联就是当父表删除或更新数据时，子表进行你指定的相应操作</strong></li>
<li>alter table stu add constraints fk_stu_cinfo foreign key(cinfo) references clazz(cid) <strong>on delete cascade-父表删除时删除子表相应内容</strong></li>
<li>alter table stu add constraints fk_stu_cinfo foreign key(cinfo) references clazz(cid) <strong>on delete set null-父表删除时子表设置为空</strong></li>
</ul>
</li>
<li><p><strong>总结：约束有几种方式可以进行创建，只需熟练掌握一种即可。</strong></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>约束</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库基础知识-9</title>
    <url>/28987.html</url>
    <content><![CDATA[<h2 id="数据库表的管理"><a href="#数据库表的管理" class="headerlink" title="数据库表的管理"></a>数据库表的管理</h2><ul>
<li>表的创建<ul>
<li>创建表的基本语句：<strong>create table 表名（字段名 类型，字段名 类型，字段名 类型….）</strong><a id="more"></a></li>
<li>创建学生表：学号，姓名，性别，年龄，qq号，邮箱</li>
<li>create table student(<br>snum number(10),—指定学号的数字长度为10<br>sname varchar2(100),—指定姓名的存储上限为100个字节<br>sex char(4),<br>age number,<br>qq number,<br>sal number(6,2),–指定工资的整数位为6和小数位为2<br>mail varchar2(50)<br>)</li>
</ul>
</li>
<li>表的修改<ul>
<li>添加新字段  alter table 表名 add 字段名 类型</li>
<li><strong>alter table student add phone number(11)</strong></li>
<li>修改字段类型     alter table 表名 modify 字段名 类型</li>
<li><strong>alter table  student modify sname varchar2(200)</strong></li>
<li>删除字段    alter table 表名 drop column 字段名</li>
<li><strong>alter table student drop column phone</strong></li>
<li>修改表名 rename 表名 to 新的表名</li>
<li><strong>rename student to stu</strong></li>
<li>删除表   drop table 表名</li>
<li><strong>drop table student</strong></li>
</ul>
</li>
</ul>
<h2 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h2><ul>
<li>number类型：数字类型，用来声明存储数字的字段。 number(指定数字的整数长度，指定数字的小数位长度)<ul>
<li>varchar2类型：字符类型，用来声明存储字符的字段。会根据存储的数据自动增长大小，varchar2(存储上限)</li>
<li>char类型：字符类型，用来声明存储字符的字符。会开辟指定大小的内存来存储数据。<ul>
<li><strong>char的存储效率高于varchar2</strong></li>
<li><strong>char是开辟指定大小的内存空间，varchar2是根据数据大小来开辟空间的大小</strong></li>
</ul>
</li>
<li>date类型：存储日期类型</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>表的管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库基础知识-8</title>
    <url>/45562.html</url>
    <content><![CDATA[<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ul>
<li>当前用户介绍：权限级别的分配<ul>
<li>system：系统账户</li>
<li>sys：超级管理员</li>
<li>scott：普通用户</li>
</ul>
</li>
<li>创建自定义用户: create user 用户名 identified by 密码；<ul>
<li>普通用户不具备创建用户的权限，需要使用system账户进行创建。直接创建好的用户不能登录，还需要使用system进行权限的分配（角色：一系列权限的集合）</li>
<li><strong>create user zyp identified by 123456;</strong><a id="more"></a></li>
</ul>
</li>
<li>给创建的用户赋予角色:grant 角色名，角色名…to 用户名；<ul>
<li>grant connect to zyp;–赋予链接库权限</li>
<li>grant resource to zyp;–赋予操作资源权限</li>
<li>grant dba to zyp;–赋予DBA角色</li>
<li>grant dba to zyp</li>
</ul>
</li>
<li>删除用户权限<ul>
<li>revoke dba from zyp–删除dba</li>
<li>revoke connect from zyp–删除连接库权限</li>
</ul>
</li>
<li>删除用户<ul>
<li>drop user zyp</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>Oracle用户管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库基础知识-7</title>
    <url>/46522.html</url>
    <content><![CDATA[<h2 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h2><ul>
<li>单行子查询<ul>
<li><strong>select 内容 from 表名 where 子查询语句</strong></li>
<li>什么时候使用单行子查询？<ul>
<li>在不能直接获取有效信息的时候，考虑使用子查询</li>
</ul>
</li>
<li>单行子查询的注意事项？<ul>
<li>子查询的结果必须只有一个值</li>
<li>可以直接使用算术链接符</li>
<li>子查询出现在where中,一般出现在条件语句的右边<a id="more"></a></li>
</ul>
</li>
<li>实例<ul>
<li>查询所有比雇员“CLARK”工资高的员工信息</li>
<li><strong>select * from emp where sal&gt;(select sal from emp where ename=’CLARK’)</strong></li>
<li>查询工资高于平均工资的员工的名字和工资</li>
<li><strong>select * from emp where sal&gt;(select avg(sal) from emp) order by sal</strong></li>
<li>查询和soctt属于同一部门且工资比他低的员工资料</li>
<li><strong>select * from emp where deptno=(select deptno from emp where ename=’SCOTT’) and sal&lt;(select sal from emp where ename=’SCOTT’)</strong></li>
<li>查询工资最高的员工资料</li>
<li><strong>select * from emp where sal=(select max(sal) from emp)</strong></li>
<li>查询职务和scott相同，雇佣时间早的员工信息</li>
<li><strong>select * from emp where job=(select job from emp where ename=’SCOTT’) and hiredate&lt;(select hiredate from emp where ename=’SCOTT’)</strong></li>
<li>查询工资比scott高或者雇佣时间早的员工编号和名字</li>
<li><strong>select empno,ename from emp where sal&gt;(select sal from emp where ename=’SCOTT’) or hiredate&lt;(select hiredate from emp where ename=’SCOTT’)</strong></li>
<li>查询工资高于任意一个CLERK的所有员工信息</li>
<li><strong>select * from emp where sal&gt;(select min(sal) from emp where job=’CLERK’) and job&lt;&gt;’CLERK’</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h2><ul>
<li>多行子查询 <ul>
<li><strong>多行子查询学习：其实就使用使用关键字：any all in</strong></li>
<li><strong>注意：子查询返回多个值建议使用多行子查询，返回的单个值使用单行子查询</strong></li>
</ul>
</li>
<li>实例<ul>
<li>查询工资高于所有SALESMAN的员工信息</li>
<li><strong>select * from emp where sal&gt;all (select sal from emp where job=’SALESMAN’;</strong></li>
<li>查询部门20中同部门10的雇员工作一样的雇员信息</li>
<li><strong>select * from emp where deptno=’20’ and job= any (select job from emp where deptno=’10’)</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库基础知识-6</title>
    <url>/30075.html</url>
    <content><![CDATA[<h2 id="sql99学习"><a href="#sql99学习" class="headerlink" title="sql99学习"></a>sql99学习</h2><ul>
<li><p>笛卡尔积：一件事情的完成需要很多步骤，而不同的步骤有很多种方式，完成这件事情的所有方式称之为笛卡尔积</p>
</li>
<li><p>交叉连接(了解)-cross join</p>
<ul>
<li>select * from emp cross join dept</li>
<li>查看两表或者多表的笛卡尔积<a id="more"></a></li>
</ul>
</li>
<li><p>自然连接-natural join（<strong>inner join… on…</strong>）</p>
<ul>
<li>自然链接会自动使用多表中所有相同字段（不但值相同，名字也要相同）进行筛选<ul>
<li>前提：多表一定要有同名同值的字段</li>
<li>注意：自然连接会自动使用所有的相同字段进行结果筛选</li>
</ul>
</li>
<li>使用using关键字可以指定字段进行链接查询，但是必须是同名字段   inner join</li>
<li><strong>使用on关键字可以直接在其后书写链接条件，没有限制             inner join</strong></li>
<li>问题：查询员工及员工所在的部门信息<ul>
<li>问题1：假如在链接查询的时候不想使用所有相同字段进行筛选怎么办？<ul>
<li>使用using关键字 select * from dept  join emp using(deptno)</li>
</ul>
</li>
<li>问题2：假如在链接查询中没有同名字段，但是有同值字段怎么筛选？<ul>
<li><strong>使用on关键字 select * from dept inner join emp on dept.deptno=emp.deptno</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>左外连接-left outer join</p>
<ul>
<li>查询没有部门的员工信息及员工和部门信息</li>
<li>select * from emp e left join dept using(deptno);</li>
<li><strong>select * from emp e left join dept d on e.deptno = d.deptno;</strong></li>
</ul>
</li>
<li><p>右外连接-right outer join</p>
<ul>
<li>查询没有员工的部门信息及员工和部门信息</li>
<li><strong>select *  from emp eright outer join dept d on e.deptno=d.deptno</strong></li>
</ul>
</li>
<li><p>全外连接-full outer join</p>
<ul>
<li>查询没有部门的员工信息和没有员工的部门信息及员工和部门信息</li>
<li><strong>select *from emp efull outer join dept d on e.deptno=d.deptno</strong></li>
</ul>
</li>
<li><p>自连接</p>
<ul>
<li>查询员工姓名，职位，薪资，上级领导姓名 </li>
<li><strong>select e.ename,e.job,e.sal,m.enamefrom emp e inner join emp m on e.mgr=m.empno</strong></li>
</ul>
</li>
<li><p>三表联合查询</p>
<ul>
<li>查询员工姓名，工作，薪资，部门名称，城市名称</li>
<li><strong>select e.ename,e.job,e.sal,d.dname,c.cname from emp e inner join dept d on e.deptno=d.deptno inner join city c on d.loc=c.cid</strong></li>
<li>查询工资高于2000的员工姓名，工作，薪资，部门名称，城市名称</li>
<li><strong>select e.ename,e.job,e.sal,d.dname,c.cname from emp e inner join dept d on e.deptno=d.deptno inner join city c on d.loc=c.cid where e.sal&gt;2000</strong></li>
<li>查询内容 查询表 链接表 链接条件 链接表 链接条件 筛选条件</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库基础知识-5</title>
    <url>/29755.html</url>
    <content><![CDATA[<h2 id="sql92学习"><a href="#sql92学习" class="headerlink" title="sql92学习"></a>sql92学习</h2><ul>
<li>笛卡尔积：一件事情的完成需要很多步骤，而不同的步骤有很多种方式，完成这件事情的所有方式称之为笛卡尔积<ul>
<li>select * from emp–14</li>
<li>select * from dept–7</li>
<li>select * from emp,dept order by ename–7*14=98</li>
</ul>
</li>
<li><strong>等值链接，链接条件。等值链接的时候字段的名字可以不相同，但是字段的值要相同。</strong><a id="more"></a>
<ul>
<li>查询员工姓名，工作，薪资，部门名称<br>select * from emp,dept where emp.deptno=dept.deptno–使用等值链接进行结果筛选<br>select ename,job,sal,dname from emp,dept where emp.deptno=dept.deptno;–使用等值链接查询指定字段数据</li>
<li>多表等值链接查询<br>select ename,job,sal,emp.deptno,dname from emp,dept where emp.deptno=dept.deptno;–<strong>多表查询的时候，查看相同字段的值，必须声明所在表</strong><br>select emp.ename,emp.job,emp.sal,emp.deptno,dept.dname from emp,dept where emp.deptno=dept.deptno;–<strong>在查询指定字段值的时候，加上表名提高查询效率</strong><br>  <strong>select e.ename,e.job,e.sal,e.deptno,d.dname from emp e,dept d where e.deptno=d.deptno;–多表查询中使用别名进行表的区分</strong><br>  <strong>select e.ename,e.job,e.sal,e.deptno,d.dname from emp e,dept d where e.deptno=d.deptno order by deptno;–还可以使用order by 排序</strong></li>
</ul>
</li>
<li>非等值链接<ul>
<li>查询员工姓名，工作，工资，工资等级<br>select * from salgrade<br>select * from emp,salgrade order by ename<br>select * from emp,salgrade where sal&gt;losal and sal&lt;hisal<br>  <strong>select e.ename,e.job,e.sal,s.grade from emp e,salgrade s where e.sal&gt;s.losal and e.sal&lt;s.hisal;</strong></li>
</ul>
</li>
<li>自连接:使用频率不是很高，因为自连接的条件要求不同信息共存在一张里，其实就两张相同的表的等值链接。<ul>
<li>查询员工姓名，工作，薪资，及上级领导姓名<br>select * from emp for update<br>create table temp as select * from emp<br>  <strong>select * from emp e,temp t where e.mgr=t.empno</strong></li>
</ul>
</li>
<li>三表联合查询<ul>
<li>查询员工姓名，工作，薪资，部门名称，城市名称<br>elect e.ename,e.job,e.sal,d.dname,c.cname from emp e,dept d,city c where e.deptno=d.deptno and d.loc=c.cid</li>
<li>查询工资高于2000的员工姓名，工作，薪资，部门名称，城市名称<br>select e.ename,e.job,e.sal,d.dname,c.cname from emp e,dept d,city c where e.deptno=d.deptno and d.loc=c.cid and sal&gt;2000</li>
</ul>
</li>
<li><strong>总结：sql92更符合人的思维，但当要查询的表多了起来，就非常的臃肿，不利于他人观看维护。所以推荐使用sql99</strong></li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库基础知识-4</title>
    <url>/46330.html</url>
    <content><![CDATA[<h2 id="插入数据-insert"><a href="#插入数据-insert" class="headerlink" title="插入数据-insert"></a>插入数据-insert</h2><ul>
<li><strong>语法规范  insert into 表名(字段1，字段2，字段3，….)values(‘值1’,’值2’,’值3’…..)</strong></li>
<li>主键：用来唯一标识一条数据的字段通常设置主键，主键是唯一不可以重复的</li>
<li><strong>如果插入的数据是全字段数据，字段可以省略不写。部分字段，必须加上字段说明和字段值，但是主键不能为空</strong></li>
<li><strong>事务：如果一个事件是由多个动作组成，只要有一个动作没有执行成功则自动将数据回滚到原始状态，此们技术称之为事务。保证数据的安全和完整。</strong></li>
<li>事物的提交：使用第三放插件的提交按钮。使用commit语句<a id="more"></a></li>
<li>实例   <ul>
<li>在北京新建了一个名为LOL学院的新部门，请插入<br>insert into dept(deptno,dname,loc)values(‘50’,’lol学院’,’北京’);</li>
<li>如果插入的数据是全字段数据，字段可以省略不写。部分字段，必须加上字段说明和字段值，但是主键不能为空<br>insert into dept values(‘80’,’教学部’,’北京’);<br>insert into dept values(‘90’,’教学部’,’北京’);<br>insert into dept values(100’,’教学部’,’北京’);<br>insert into dept values(‘110’,’教学部’,’北京’);</li>
</ul>
</li>
</ul>
<h2 id="创建数据的备份"><a href="#创建数据的备份" class="headerlink" title="创建数据的备份"></a>创建数据的备份</h2><ul>
<li><strong>create table 表名 as 查询语句</strong>，创建的是和查询结果一样的表，查询结果是什么就会备份一个相同的表</li>
<li>insert into 表名 查询语句，注意：查询出来的结果在结构上必须和插入数据的表相同，字段个数必须相同</li>
<li><strong>注意：备份表只有字段和数据相同，并不会备份约束。</strong></li>
<li>实例<ul>
<li>备份完整的数据和表<br>create table tdept as select * from dept;–备份dept表和数据，只能备份数据和字段。不能备份主键和约束</li>
<li>备份完整表<br>create table tdept1 as select * from dept where 1&gt;2–备份表，不备份数据。</li>
<li>备份部分数据和表<br>  <strong>create table tdept2 as select dname,loc from dept–创建的是和查询结果一样的表，查询结果是什么就会备份一个相同的表</strong></li>
<li>给备份表添加数据 insert into 表名 查询语句–按查询结果添加<br>  <strong>注意：查询出来的结果在结构上必须和插入数据的表相同，字段个数必须相同</strong><br>  <strong>insert into tdept2 select dname,loc from dept where deptno&gt;40</strong></li>
</ul>
</li>
</ul>
<h2 id="数据的更新-update"><a href="#数据的更新-update" class="headerlink" title="数据的更新-update"></a>数据的更新-update</h2><ul>
<li><strong>更新语句：语法结构：update 表名 set 字段名1=’字段值1’,字段名2=’字段值2’，…where 条件</strong></li>
<li>实例<ul>
<li>将部门70的名字改为教学部2<br>  <strong>update dept set dname=’教学部2’ where deptno=’70’</strong><br>  <strong>update dept set dname=’教学部2’,loc=’上海’ where deptno=’70’–多字段更新</strong></li>
</ul>
</li>
</ul>
<h2 id="数据的删除-delete"><a href="#数据的删除-delete" class="headerlink" title="数据的删除-delete"></a>数据的删除-delete</h2><ul>
<li>删除语句：delete 表名 where 条件</li>
<li>实例<ul>
<li>删除部门标号为70的数据<br>  <strong>delete dept where deptno=’70’—删除指定数据</strong></li>
<li>清空表数据<br>  <strong>delete tdept</strong><br>  <strong>truncate table tdept—清空表数据建议使用truncate关键字，但是此关键字不能回滚数据</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库基础知识-3</title>
    <url>/30395.html</url>
    <content><![CDATA[<h2 id="分组-group-by"><a href="#分组-group-by" class="headerlink" title="分组-group by"></a>分组-group by</h2><p><strong>在多行函数中不能直接使用普通字段，除非group by</strong></p>
<p><strong>在多行函数中不能直接使用单行函数，除非group by</strong></p>
<ul>
<li><p><strong>使用group by进行数据分组 select 多行函数，分组字段 from 表名 group by 分组字段</strong></p>
</li>
<li><p>多字段进行分组的时候，按照字段顺序进行分组，第一条件分组完成后，继续使用其他条件依次分组。</p>
<a id="more"></a></li>
<li><p>group by依然可以和order by 联合使用</p>
</li>
<li><p><strong>可以和单行函数联合进行分组，注意使用了单行函数那么在查询语句中必须也要使用</strong></p>
</li>
<li><p>实例</p>
<ul>
<li>查询最高工资和员工数<br>select max(sal),count(*) from emp</li>
<li>查询不同部门的最高工资<br>select * from emp order by deptno<br>  <strong>select  deptno,max(sal) from emp group by deptno–使用group进行分组查询，分组的字段可以出现在查询中，其他字段依然不可以</strong></li>
<li>查询不同工作岗位的员工数<br>select * from emp for update<br>  <strong>select lower(job),count(*) from emp group by lower(job)–使用单行函数进行分组</strong></li>
<li>查询不同部门的不同工作岗位的人数<br>  <strong>select deptno,job ,count(*) from emp group by deptno,job–使用多字段组合进行分组</strong><br>  <strong>select deptno,job ,count(*) from emp group by deptno,job order by deptno</strong></li>
<li>查询不同部门的不同工作岗位的并且人数大于1的信息–<strong>错误</strong><br>select count(<strong>) from emp where count(<em>)&gt;3 group by deptno<br>select deptno,job ,count(</em>) from emp where count(<em>)&gt;1 group by deptno,job order by deptno<br>  *</em>where中不能出现多行函数</strong></li>
<li>查询部门号大于10的不同部门的不同工作岗位的人数<br>select deptno,job ,count(*) from  emp where deptno&gt;10 group by deptno,job order by deptno</li>
</ul>
</li>
</ul>
<h2 id="分组后筛选-having"><a href="#分组后筛选-having" class="headerlink" title="分组后筛选-having"></a>分组后筛选-having</h2><ul>
<li><strong>使用group by分组后在进行数据筛选的时候，where中不能出现多行函数，所以使用新的关键字having进行条件筛选</strong></li>
<li><strong>where条件筛选的执行顺序：from–&gt;where—&gt;group –&gt;select</strong></li>
<li><strong>having条件筛选的执行顺序：from–&gt;group by –&gt;having–&gt;select</strong></li>
<li><strong>where的执行效率比having要高，能使用where的情况下尽量不要使用having</strong></li>
<li>实例<ul>
<li>查询不同部门的不同工作岗位的并且人数大于1的信息<br>select deptno,count(<em>) from emp  group by deptno having count(</em>)&gt;5<br>   <strong>select deptno,job ,count(*) from  emp  group by deptno,job having deptno&gt;10 order by deptno</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库基础知识-2</title>
    <url>/46714.html</url>
    <content><![CDATA[<h2 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h2><ul>
<li><p>字符函数</p>
</li>
<li><p><code>select * from emp;</code></p>
</li>
<li><p><code>select INITCAP(ename) from emp;</code>–initcap函数将首字母大写</p>
<a id="more"></a></li>
<li><p><code>select lower(ename)from emp;</code>–lower 字母小写</p>
</li>
<li><p><code>select replace(ename,&#39;S&#39;,&#39;M&#39;)  from emp;</code>–replace 替换</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
<th align="center">示例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">INITCAP(char)</td>
<td align="center">首字母大写</td>
<td align="center">initcap(‘hello’)</td>
<td align="center">Hello</td>
</tr>
<tr>
<td align="center">LOWER(char)</td>
<td align="center">转换为小写</td>
<td align="center">lower(‘FUN’)</td>
<td align="center">fun</td>
</tr>
<tr>
<td align="center">UPPER(chaor)</td>
<td align="center">转换为大写</td>
<td align="center">upper(‘sun’)</td>
<td align="center">SUN</td>
</tr>
<tr>
<td align="center">LTRIM(char,set)</td>
<td align="center">左裁剪</td>
<td align="center">ltrim(‘xyzadams’,’xyz’)</td>
<td align="center">adams</td>
</tr>
<tr>
<td align="center">RTRIM(char,set)</td>
<td align="center">右裁剪</td>
<td align="center">rtrim(‘xyzadams’,’ams’)</td>
<td align="center">xyzad</td>
</tr>
<tr>
<td align="center">TRANSLATE(char,from,to)</td>
<td align="center">按字符翻译</td>
<td align="center">translate(‘jack’,’abcd’,’1234’)</td>
<td align="center">j13k</td>
</tr>
<tr>
<td align="center">REPLACE(char,search_str,replace_str)</td>
<td align="center">字符串替换</td>
<td align="center">replace(‘jack and jue’,’j’,’bl’)</td>
<td align="center">black and blue</td>
</tr>
<tr>
<td align="center">INSTR(char,substr[,pos])</td>
<td align="center">查找子串的位置</td>
<td align="center">instr(‘worldwide’,’d’)</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">SUBSTR(char,pos,len)</td>
<td align="center">取字符串</td>
<td align="center">substr(‘abcdefg’,3,2)</td>
<td align="center">cd</td>
</tr>
<tr>
<td align="center">CONCAT(char1,char2)</td>
<td align="center">连接字符串</td>
<td align="center">concat(‘Hello’,’world’)</td>
<td align="center">Helloworld</td>
</tr>
</tbody></table>
<ul>
<li><p>数值函数</p>
</li>
<li><p><strong>伪表：dual</strong></p>
</li>
<li><p><code>select * from dual</code></p>
</li>
<li><p><code>select abs(-3) 绝对值，ceil(3.1415926)向上取整,floor(3.1415926)向下取整,power(2,3)幂,round(3.4)四舍五入 from dual</code></p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
<th align="center">示例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ABS(n)</td>
<td align="center">取绝对值</td>
<td align="center">abs(-15)</td>
<td align="center">15</td>
</tr>
<tr>
<td align="center">CEIL(n)</td>
<td align="center">向上取整</td>
<td align="center">ceil(44.778)</td>
<td align="center">45</td>
</tr>
<tr>
<td align="center">SIN(n)</td>
<td align="center">正弦</td>
<td align="center">sin(1.571)</td>
<td align="center">.999999979</td>
</tr>
<tr>
<td align="center">COS(n)</td>
<td align="center">余弦</td>
<td align="center">cos(0)</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">SIGN(n)</td>
<td align="center">取符号</td>
<td align="center">sign(-32)</td>
<td align="center">-1</td>
</tr>
<tr>
<td align="center">FLOOR(n)</td>
<td align="center">向下取整</td>
<td align="center">floor(100.2)</td>
<td align="center">100</td>
</tr>
<tr>
<td align="center">POWER(m,n)</td>
<td align="center">m的n次幂</td>
<td align="center">power(4,2)</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">MOD(m,n)</td>
<td align="center">取余数</td>
<td align="center">mod(10,3)</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">ROUND(m,n)</td>
<td align="center">四舍五入</td>
<td align="center">round(100.256,2)</td>
<td align="center">100.26</td>
</tr>
<tr>
<td align="center">TRUNC(m,n)</td>
<td align="center">截断</td>
<td align="center">trunc(100.256,2)</td>
<td align="center">100.25</td>
</tr>
<tr>
<td align="center">SQRT(n)</td>
<td align="center">平方根</td>
<td align="center">sqrt(4)</td>
<td align="center">2</td>
</tr>
</tbody></table>
<ul>
<li>日期函数</li>
<li><code>select months_between(&#39;13-12月-2016&#39;,&#39;13-10月-2016&#39;) from dual</code>–months_between两个日期之间的月份数</li>
</ul>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
<th align="center">示例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MONTHS_BETWEEN</td>
<td align="center">返回两个日期间的月份</td>
<td align="center">months_between(‘04-11月-05’,’11-1月-01’)</td>
<td align="center">57.7741935</td>
</tr>
<tr>
<td align="center">ADD_MONTHS</td>
<td align="center">返回把月份数加到日期上的新日期</td>
<td align="center">add_months(‘06-2月-03’,1) add_months(‘06-2月-03’,-1)</td>
<td align="center">06-3月-03 06-1月-03</td>
</tr>
<tr>
<td align="center">NEXT_DAY</td>
<td align="center">返回指定日期后的星期对应的新日期</td>
<td align="center">next_day(‘06-2月-03，’星期一’)</td>
<td align="center">10-2月-03</td>
</tr>
<tr>
<td align="center">LAST_DAY</td>
<td align="center">返回指定日期所在月的最后一天</td>
<td align="center">last—_day(‘06-2月-03’)</td>
<td align="center">28-月-03</td>
</tr>
<tr>
<td align="center">ROUND</td>
<td align="center">按指定格式对日期进行四舍五入</td>
<td align="center">round(to_date(‘13-2月-03’),’YEAR’)</td>
<td align="center">01-1月-03</td>
</tr>
<tr>
<td align="center">TRUNC</td>
<td align="center">对日期按指定方式进行截断</td>
<td align="center">trunc(to_date(‘06-2月-03’)，’YEAR’)</td>
<td align="center">01-1月-03</td>
</tr>
</tbody></table>
<h2 id="多行函数"><a href="#多行函数" class="headerlink" title="多行函数"></a>多行函数</h2><ul>
<li><strong>max: max(字段名) 返回此字段的最大值</strong></li>
<li><strong>min：min(字段名) 返回此字段的最小值</strong></li>
<li><strong>avg：avg(字段名) 返回平均值</strong></li>
<li><strong>sum：sum（字段名） 返回字段的和</strong></li>
<li><strong>count：</strong><ul>
<li><strong>count(*)，用来查询表中有多少条记录</strong></li>
<li><strong>count（字段名），用来查询某个字段有值的个数</strong></li>
<li><strong>count(distinct 字段名),可以先去除重复再计数</strong></li>
</ul>
</li>
<li>注意：<ul>
<li><strong>多行函数不能和普通字段直接出现在查询语句中，除非group by</strong> </li>
<li><strong>多行函数和单行函数不能直接出现在查询语句中，除非group by</strong>  </li>
</ul>
</li>
<li>实例<ul>
<li>查看员工的最高工资<br><code>select max(sal),ename from emp</code>–多行函数不能和普通字段直接出现在查询语句中，除非group by<br><code>select max(sal)，lower(ename)from emp</code>–多行函数和单行函数不能直接出现在查询语句中，除非<code>group by select ename from emp</code></li>
<li>查看员工的最低工资<br><code>select min(sal) from emp</code></li>
<li>查看员工的平均工资<br><code>select avg(sal) from emp</code></li>
<li>查看所有的员工工资之和<br><code>select sum(sal) from emp</code></li>
<li>查询公司有多少员工<br><code>select * from emp</code><br><code>select count(*) from emp</code>–使用count(*)来查看一张表中有多少条记录</li>
<li>查询有津贴的员工人数<br><code>select count(comm) from emp</code>–使用count(字段名),查询该字段有值的记录数<br><code>select count(ename) from emp</code></li>
<li>查询公司有多少工作种类<br><code>select count(job) from emp</code><br><code>select  count(distinct job) from emp</code></li>
</ul>
</li>
</ul>
<h2 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h2><p><strong>转换函数:在转换的时候改变的是数据的类型，数据内容不会改变，可以指定格式。</strong></p>
<ul>
<li>to_number：将数字字符转换为数字类型的数值，to_number(数字字符)</li>
<li>to_char：将数字转换为字符类型，将日期转换为字符类型 to_char(数字/日期)</li>
<li>to_date：将字符类型的日期转换为日期类型： to_date(char)</li>
<li>实例<ul>
<li>number–&gt;char 转换的时候使用的是默认格式，<br><code>select  to_char(123) from dual</code>–将数字转换为字符类型，使用to_char(number)<br><code>select sal, to_char(sal) from emp</code></li>
<li><strong>number–&gt;char 使用指定的格式</strong><br>to_char(number,’格式’)<br><code>select to_char(sal),to_char(sal,&#39;L999,999,999&#39;) from emp</code><br><code>select to_char(sal),to_char(sal,&#39;L0000.00&#39;) from emp</code><br>  <strong>$代表美元符，9代码数字占位。例如，L999,999,999表示三位一组的显示方式L代表人民币符号，0代表保留数字个数，不足使用0补充。</strong></li>
<li>char—&gt;number<br>to_number(数字字符)<br><code>select to_number(&#39;123&#39;) from dual</code></li>
<li>char—&gt;date，转换的字符必须是日期格式的字符串，默认格式 dd-mm-yyyy</li>
<li>注意：因为字符串有很多，所以在字符转换为日期的时候，需要指定格式，因为日期是具备一定格式的字符组合。字符转换为日期的时候，指定的格式为字符的日期顺序，无需指定间隔符。<strong>yyyy：表示年  mm:表示月   dd表示日</strong><br><code>select to_date(&#39;05-12月-2016&#39;) from dual;</code><br><code>select to_date(&#39;2016-05-12&#39;,&#39;yyyy-mm-dd&#39;) from dual</code>–使用指定的格式将指定的日期字符串转换为日期<br><code>select to_date(&#39;12-05-2016&#39;,&#39;mm/dd/yyyy&#39;) from dual</code></li>
<li>date—&gt;char</li>
<li>注意：因为日期本身就具备一定的格式在不是指定格式的情况下会默认使用dd-mm-yyyy格式显示数据。指定的格式会作为日期转换为字符串类型的显示格式存在。例如：<br>yyyy-mm-dd’   ‘2016-12-05’<br>yyyy/mm/dd’    ‘2016/12/05’<br>yyyy”年”mm”月”dd”日”‘     2016年12月05日<br><code>select hiredate,to_char(hiredate) from emp</code>–日期转换为字符的时候，不指定格式使用默认格式：dd-mm-yyyy<br><code>select hiredate,to_char(hiredate,&#39;yyyy-mm-dd&#39;) from emp;</code>–使用指定格式将日期转换为字符串类型<br><code>select hiredate,to_char(hiredate,&#39;yyyy/mm/dd&#39;) from emp;</code>–使用指定格式将日期转换为字符串类型<br><code>select hiredate,to_char(hiredate,&#39;yyyy&quot;年&quot;mm&quot;月&quot;dd&quot;日&quot;&#39;) from emp;</code>–使用指定格式将日期转换为字符串类型</li>
<li>查询入职日期在81年10月20日后的员工信息<ul>
<li>自动转型<br><code>select * from emp where hiredate&gt;&#39;20-10月-1981&#39;</code></li>
<li>将日期转换为字符串<br><code>select * from emp where to_char(hiredate,&#39;yyyy-mm-dd&#39;)&gt;&#39;1981-10-20&#39;</code></li>
<li>将日期转换为按指定格式显示的日期格式<br><code>select * from emp where hiredate&gt;to_date(&#39;1981-10-20&#39;,&#39;yyyy/mm/dd&#39;)</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><ul>
<li><strong>nvl():nvl(字段名，执行)–相当于java中的if条件判断</strong></li>
<li><strong>nvl2():nvl2(字段名，值，值)–相当于java中的If(){}else{}判断</strong></li>
<li><strong>decode():decode(字段名，条件1，执行内容1，条件2，执行内容2，条件3，执行内容3，默认执行内容)–相当于java中if(){}else if(){}else if(){}…else{}</strong></li>
<li>实例<ul>
<li>查询所有员工的月薪及姓名和工作<br><code>select * from emp</code><br><code>select ename,sal 基本工资,comm 绩效,sal+comm 月薪 from emp</code>–问题：当comm为空时null，sal+comm会显示为空，而不能正常的显示月薪。<br>  <strong><code>select ename,sal 基本工资,comm 绩效,sal+nvl(comm,0)月薪 from emp</code></strong><br>  <strong>如果comm不为空时，则sal+comm。如果comm为空时，则sal+0。</strong></li>
<li>查询所有员工的月薪及姓名和工作<br>  <strong><code>select ename,sal 基本工资,comm 绩效,nvl2(comm,sal+comm,sal)月薪 from emp</code></strong><br>  <strong>如果comm不为空null，则sal+comm。如果为空null，则sal。</strong></li>
<li>显示员工的职称<br>  <strong><code>select ename,job,decode(job,&#39;MANAGER&#39;,&#39;经理&#39;,&#39;SALESMAN&#39;,&#39;销售人员&#39;,&#39;普通员工&#39;) from emp</code></strong><br>  <strong>在job字段名中，如果job为MANAGER则显示为经理，job为SALESMAN则显示为销售人员，如果不为这两个中的任意一个，默认显示为普通人员</strong></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>Oracle</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库基础知识-1</title>
    <url>/46850.html</url>
    <content><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405125325.jpg"  alt="Oracle" title="Oracle"></p>
<h2 id="Oracle的服务（需要开启的服务）"><a href="#Oracle的服务（需要开启的服务）" class="headerlink" title="Oracle的服务（需要开启的服务）"></a>Oracle的服务（需要开启的服务）</h2><ul>
<li>OrcaleServiceorcl:orcale启动服务</li>
<li>OracleOraDb11g_home1TNSListener:oracle监听器服务</li>
<li>OracleDBConsoleorcl:控制台服务<a id="more"></a>

</li>
</ul>
<h2 id="Oracle账户"><a href="#Oracle账户" class="headerlink" title="Oracle账户"></a>Oracle账户</h2><ul>
<li>sys：   超级管理员（Oracle 工程师）</li>
<li>system：管理员（Oracle 管理人员）</li>
<li>scott： 普通用户 （普通人员）默认密码：tiger</li>
</ul>
<ul>
<li><strong>Oracle 11gxe版本不自带scott账号，需要自行创建</strong></li>
</ul>
<h2 id="Oracle创建用户"><a href="#Oracle创建用户" class="headerlink" title="Oracle创建用户"></a>Oracle创建用户</h2><ul>
<li><strong>创建用户</strong></li>
<li><code>create user  用户名 identified by 密码</code></li>
<li><strong>赋予数据库登录连接权限</strong></li>
<li><code>grant connect to  用户名;</code></li>
<li><strong>赋予资源操纵权限</strong></li>
<li><code>grant resource to 用户名;</code></li>
</ul>
<h2 id="Oracle修改密码"><a href="#Oracle修改密码" class="headerlink" title="Oracle修改密码"></a>Oracle修改密码</h2><ul>
<li><p>第一种方法</p>
<ol>
<li>在cmd命令行中使用命令：<code>sqlplus / as sysdba</code></li>
<li>然后使用命令：<code>alter user 用户名 identified by 新密码;</code></li>
</ol>
</li>
<li><p>第二种方法</p>
<ol>
<li>在cmd命令行中使用命令：<code>sqlplus /nolog</code></li>
<li>然后使用命令：<code>conn as sysdba</code></li>
<li>然后输入一个已知的用户名和密码</li>
<li>然后使用命令：<code>alter user 用户名 identified by 新密码;</code></li>
</ol>
</li>
</ul>
<h2 id="单表查询-select"><a href="#单表查询-select" class="headerlink" title="单表查询-select"></a>单表查询-select</h2><ul>
<li><p>知识点</p>
<ul>
<li>select * from 表名  查询表中所有的数据</li>
<li>select 字段名1，字段名2，..from 表名 查询指定字段的所有值，不同字段之间使用逗号。隔开使用算术表达式：select 字段名(运算符），字段名(运算符）…from 表名</li>
</ul>
</li>
<li><p>案例</p>
<ul>
<li><p><code>select * from emp</code>—查询所有员工信息<br> <strong><code>select ename,job,sal from emp</code>–查询员工姓名，工作，薪资</strong></p>
</li>
<li><p>查询所有员工一年的工资，以及每位员工年终3000后的所有薪资（不包括津贴）<br><strong><code>select ename,job,sal*12,sal*12+3000 from emp</code>  使用运算符</strong>    </p>
</li>
</ul>
</li>
</ul>
<h2 id="别名操作-as"><a href="#别名操作-as" class="headerlink" title="别名操作-as"></a>别名操作-as</h2><ul>
<li>使用操作<ul>
<li>as可以省略不写，如果有特殊字符获取空格使用双引号添加别名</li>
</ul>
</li>
<li>实例<ul>
<li><code>select ename 姓名,job 工作,sal * 12 年资,sal * 12+3000 年薪 from emp</code>          <strong>直接在字段后面添加别名</strong></li>
<li><code>select ename &quot;姓名&quot;,job 工作,sal * 12 ’年资’,sal * 12+3000 年薪 from emp</code>      <strong>使用引号添加别名,不能使用单引号</strong></li>
<li><code>select ename as 姓名,job &quot;工作&quot;,sal * 12 年资,sal * 12+3000 年薪 from emp</code>      <strong>使用as关键字添加别名</strong></li>
<li><code>select ename &quot;姓  名&quot;,job 工作,sal * 12 年资,sal * 12+3000 年薪 from emp</code>      <strong>如果别名中有空格或者其他特殊字符，使用双引号</strong></li>
</ul>
</li>
<li>推荐<ul>
<li>推荐使用别名操作时as不省略，别名加上双引号，方便维护操作<br> <strong><code>select ename as &quot;姓名&quot; from emp;</code></strong></li>
</ul>
</li>
</ul>
<h2 id="链接符操作"><a href="#链接符操作" class="headerlink" title="链接符操作-||"></a>链接符操作-||</h2><ul>
<li>介绍<ul>
<li>链接符就是将两个字符或者字符串链接，在java中链接符为“+”，而在sql中链接符为“||”。</li>
</ul>
</li>
<li>实例<ul>
<li><code>select ename||job,sal from emp;</code>  使用||符号进行字符链接<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405125550.png"  alt=""></li>
<li><code>select ename||&#39;  的工作是  &#39;||job||&#39;  并且月工资是  &#39;||sal from emp;</code>  字符链接，<strong>普通字符使用单引号</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405125552.png"  alt=""></li>
</ul>
</li>
<li>技巧<ul>
<li>由于两个字段名使用链接符操作之后，字段名称也会相应改变。所以我们可以是用as给新生成的字段名起个别名</li>
<li><code>select ename||&#39;  的工作是  &#39;||job||&#39;  并且月工资是  &#39;||sal as &quot;信息&quot; from emp;</code><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405125605.png"  alt=""></li>
</ul>
</li>
</ul>
<h2 id="去重操作-distinct"><a href="#去重操作-distinct" class="headerlink" title="去重操作-distinct"></a>去重操作-distinct</h2><ul>
<li>介绍<ul>
<li>使用distinct关键字进行去重操作</li>
</ul>
</li>
<li>实例<ul>
<li>查看员工工作种类：<code>select distinct job from emp</code>  使用distinct关键字去除重复<br>值</li>
<li>多字段去除重复：<code>select distinct job,sal from emp;</code>  <strong>多字段去除重复，去除的是重复的完全相同一整条信息</strong>                    </li>
</ul>
</li>
</ul>
<h2 id="排序操作-order-by"><a href="#排序操作-order-by" class="headerlink" title="排序操作-order by"></a>排序操作-order by</h2><ul>
<li>知识点<ul>
<li>select *from 表名 order by 字段名</li>
<li>select 字段名，字段名…from 表名 order by 字段名</li>
</ul>
</li>
<li>实例<ul>
<li>查询按照薪资排序的员工姓名，工作，薪资<ul>
<li><code>select ename,job,sal from emp order by sal;</code>（默认升序）</li>
<li><code>select ename,job,sal from emp order by sal desc;</code> （降序）</li>
<li><code>select ename,job,sal from emp order by sal asc</code>（升序）</li>
</ul>
</li>
<li>查询多条件排序<ul>
<li><code>select * from emp order by sal,ename</code> <strong>多字段作为排序条件的时候，优先按照第一个字段排序，然后依次按照其他字段排序。</strong></li>
</ul>
</li>
<li>逻辑运算<ul>
<li><code>select ename,job,sal * 10 from emp order by sal;</code>（按照工资x10升序排序）</li>
</ul>
</li>
<li>别名使用<ul>
<li><code>select ename,job,sal as &quot;工资&quot; from emp order by &quot;工资&quot;;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="简单的where子句"><a href="#简单的where子句" class="headerlink" title="简单的where子句"></a>简单的where子句</h2><ul>
<li>使用<ul>
<li>语法：<code>select * from 表名 where 条件；</code><strong>条件中字段值区分大小写，字段名不区分大小写，字段值使用单引号括起来</strong><ul>
<li>注意：<ul>
<li>1、在where中使用算术表达式 = ,&lt; , &gt; ,&gt;= ,&lt;= ,<strong>&lt;&gt;（不等于）</strong></li>
<li><strong>2、使用order by 对筛选结果进行排序，order by 出现在where后面</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>实例<ul>
<li>查看工资等于1250的员工信息<br> <strong><code>select * from emp where sal=&#39;1250&#39;</code>–筛选条件是个数字也可以使用单引号</strong></li>
<li>查看工作等于CLERK的员工信息<br> <strong><code>select * from emp where job=&#39;CLERK&#39;</code>–在筛选条件中字段值如果是字符需要加上单引号</strong><br> <code>select * from emp where job=&#39;clerk&#39;</code>–在sql语句中字段的值是区分大小写的<br> <code>select * from emp where JOB=&#39;CLERK&#39;</code>–在sql中字段是不区分大小写的</li>
<li>查看工资大于1250的员工姓名和工作<br> <strong><code>select ename,job ,sal from emp   where sal&gt;&#39;1250&#39; order by sal</code>–使用order by 对筛选结果进行排序，order by 出现在where后面</strong></li>
<li>查看工资大于等于2000的员工信息<br> <code>select * from emp where sal&gt;=2000;</code></li>
<li>查看工资小于等于2000的员工信息；<br> <code>select * from emp where sal&lt;=2000</code></li>
<li>查看工资不等于1500的员工信息<br> <strong><code>select * from emp where sal&lt;&gt;1500 order by sal</code></strong></li>
<li>查看入职日期在81年后的员工信息<br> <code>select * from emp where hiredate&gt;&#39;1981年12月31号&#39;</code><br> <code>select * from emp where hiredate&gt;&#39;1981/12/31&#39;</code><br> <strong><code>select * from emp where hiredate&gt;&#39;31-12月-1981&#39;</code>–使用日期的默认格式查询符合要求的数据，日-月-年</strong></li>
<li><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405125451.png"  alt="image-20200211171201957"></li>
</ul>
</li>
</ul>
<h2 id="where子句使用关键字"><a href="#where子句使用关键字" class="headerlink" title="where子句使用关键字"></a>where子句使用关键字</h2><ul>
<li>知识点 <ul>
<li>and 用于多条件的与筛选：<code>select * from 表名 where 条件 and 条件 and ....</code></li>
<li>or 用于多条件的或筛选： <code>select * from 表名 where 条件 or 条件 or 条件....</code></li>
<li>in 用于多条件的或筛选： <code>select * from 表名 where 字段名 in(值，值，值....)</code></li>
<li>like用于模糊查询：      <code>select * from 表名 where 字段名 like &#39;%值%&#39; 包含</code></li>
<li>is null 和is not null 用来判断字段是否为空  <code>select * from 表名　where 字段名 is null</code></li>
</ul>
</li>
<li>实例<ul>
<li>查询工资在2000-3000之间的员工信息<br> <code>select * from emp where sal&gt;=2000 and sal&lt;=3000</code>–使用and关键字进行”与”的多条件筛选；<br> <code>select * from emp where sal between 2000 and 3000;</code>–使用between and 关键字进行筛选；</li>
<li>查询工作为SALESMAN,ANALYST,MANAGER的员工信息<br> <code>select  * from emp where job=&#39;SALESMAN&#39; or job=&#39;ANALYST&#39; or job=&#39;MANAGER&#39;</code>–使用or关键字进行”或”的多条件筛选<br> <strong><code>select * from emp where job in(&#39;SALESMAN&#39;,&#39;ANALYST&#39;,&#39;MANAGER&#39;);</code>–使用in关键字进行”或”的多条件筛选</strong><br> <code>select  * from emp where job=&#39;ANALYST&#39;</code></li>
<li>查询姓名中包含s的，以s开头的，以s结尾的，第二个字符为A的。<br> <strong><code>select * from emp where ename like &#39;%S%&#39;;</code>–使用like关键字，姓名中包含S的,%代表任意多个字符</strong><br> <strong><code>select * from emp where ename like &#39;S%&#39;;</code>–使用like关键字，以S开头的</strong><br> <strong><code>select * from emp where ename like &#39;%S&#39;;</code>–以S结尾的</strong><br> <strong><code>select * from emp where ename like &#39;_A%&#39;</code>–使用”<em>“指定位置包含指定字符的信息，”</em>“代表任意一个字符</strong></li>
<li>查询名字中包含下划线的用户信息<br> <strong><code>select * from emp where ename like &#39;%A_%&#39;escape &#39;A&#39;;</code>–使用escape关键字将普通字符设置成为转译字符。</strong></li>
<li>查询有津贴的员工信息<br> <strong><code>select * from emp where comm is not null;</code></strong><br> <strong><code>select * from emp where comm is null;</code>–查询没有津贴的员工信息</strong></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>数据库</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>英语单词-4</title>
    <url>/3098.html</url>
    <content><![CDATA[<p><strong>sponge：n.海绵 vt.用湿海绵（或布）擦，揩</strong></p>
<p><strong>hostile：adj.敌对的，不友善的</strong></p>
<p><strong>chord：n.和弦,和音,弦,心弦;</strong></p>
<a id="more"></a>

<p><strong>feeble: adj.虚弱的,衰弱的,无力的,无效的,无益的</strong></p>
<p><strong>spontaneous: adj.自发的,无意识的;自然的,天真率直的</strong></p>
<p><strong>spouse: n.配偶</strong></p>
<p><strong>sparkle: n.闪光,闪耀,闪烁;活力,生气 vi.发光,活跃(才智),焕发;</strong></p>
<p><strong>receipt: n.发票,收据;收入,接到</strong></p>
<p><strong>compliment: n.赞美(话),恭维(话);致意,问候; vt.赞美,恭维</strong></p>
<p><strong>poverty: n.贫困,贫穷</strong></p>
<p><strong>scandal: n.丑闻,丑事;流言蜚语;反感,愤慨</strong></p>
<p><strong>overthrow: n.终止,推翻,结束; vt.使终止,摒弃</strong></p>
<p><strong>abstract: n.摘要;抽象派艺术品; adj.抽象的,抽象派的; vt.做…摘要;提取,抽取</strong></p>
<p><strong>ensue: vi.接着发生,接踵而来,因…而产生</strong></p>
<p><strong>cognitive: adj.认知的,认知能力的</strong></p>
<p><strong>notion: n.概念,观念;意图,想法,(怪)念头</strong></p>
<p><strong>lubricate: vt.使润滑,给…加润滑油</strong></p>
]]></content>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>英语单词-3</title>
    <url>/52827.html</url>
    <content><![CDATA[<p><strong>premier: n.首相,总理 adj.首要的,最著名的;第一的</strong></p>
<p><strong>casual: adj.偶然的;非正式的,漠不关心的;临时的</strong></p>
<p><strong>severe: adj.严重的,严厉的,严格的;严峻的,艰难的;朴素的,不加装饰的;</strong></p>
<a id="more"></a>
<p><strong>cult: n.(对生活方式,态度,观念等的)狂热,时尚,崇拜;(有极端宗教信仰的)异教团体;宗教信仰;</strong></p>
<p><strong>propel: vt.激励;推进,推动;驱使</strong></p>
<p><strong>authorize: vt.授权,批准</strong></p>
<p><strong>instruct: vt.指示,通知;教授,传授</strong></p>
<p><strong>lure: n.诱惑物,吸引力;诱饵,鱼饵 vt.吸引,诱惑</strong></p>
<p><strong>genuine: adj.真的,真正的;真诚的</strong></p>
<p><strong>emergency: n.紧急情况,突发事件</strong></p>
<p><strong>proceedings: n.进程,过程;议程;诉讼,诉讼程序;公报</strong></p>
<p><strong>consensus: n(意见等)一致,一致同意</strong></p>
<p><strong>artery: n.动脉,干线,要道</strong></p>
<p><strong>internal: adj.内在的,国内的;内心的</strong></p>
<p><strong>splash: n.溅泼声,溅出的水(或泥浆等);(光,色等的)斑点 v.溅,泼</strong></p>
<p><strong>calorie: n.卡路里</strong></p>
<p><strong>accommodation: n.住处</strong></p>
<p><strong>background : n.出身背景,经历;背景资料;(画等的)背景,底子</strong></p>
<p><strong>spoil: n.战利品,掠夺物;vt.损坏,糟蹋;宠坏,溺爱 vt.(食物)变质</strong></p>
<p><strong>represent: vt.作为…代表;表示,象征;描绘,表现</strong></p>
]]></content>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>英语单词-2</title>
    <url>/3738.html</url>
    <content><![CDATA[<p><strong>define: vt. 给…下定义，限定；</strong></p>
<p><strong>harmony: n.调和，协调；和谐</strong></p>
<p><strong>arrogant：adj.傲慢的，自大的；</strong></p>
<a id="more"></a>
<p><strong>lucrative： adj.赚钱的，有利可图的；</strong></p>
<p><strong>afford：vt.担负的起;提供</strong></p>
<p><strong>argue: vi.争论,争辩;辩论 vt.(坚决)主张,说服;</strong></p>
<p><strong>paradise: n.天堂.乐园;</strong></p>
<p><strong>plea: n.恳请,请求;抗辩,答辩,辩护;借口,托词;</strong></p>
<p><strong>merely: adv.仅仅,只不过</strong></p>
<p><strong>barracks： n.兵营，营房；（一片）简陋的大房子</strong></p>
<p><strong>abide：v. 容忍，忍受；遵守；停留</strong></p>
<p><strong>erode：v.侵蚀,腐蚀;逐渐毁坏;削弱;</strong></p>
<p><strong>flat: n.一套房子,单元住宅;adj.平的;(价格)固定的;漏气的;单调的,沉闷的;浅的 adv.平直的;直截了当的</strong></p>
<p><strong>ponder: v.沉思;思索,考虑</strong></p>
<p><strong>ignite: vt.点燃,引发;v.着火</strong></p>
<p><strong>asset: n.资产,财产;有价值的特性或者技能,优点</strong></p>
<p><strong>decent: adj 像样的;体面的;宽厚的,大方的;正派的;合乎礼仪的,得体的;</strong></p>
<p><strong>recipe: n.烹饪法,食谱;方法,秘诀,诀窍</strong></p>
]]></content>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title> 英语单词-1</title>
    <url>/6138.html</url>
    <content><![CDATA[<p><strong>spite：n.恶意，怨恨；不顾 vt 刁难，欺悔</strong></p>
<p> <strong>pyramid：n.金字塔，锥体</strong></p>
<p> <strong>tenure：n.任期；保佑权（土地），保有期；（教师等）终身职位</strong><br> <a id="more"></a></p>
<p> <strong>carbohydrate：n. 碳水化合物；糖类；</strong></p>
<p> <strong>query：n.询问,疑问; v.怀疑;表示疑虑;询问</strong></p>
<p> <strong>luxury: n.奢侈,奢侈品</strong></p>
<p> <strong>accommodate: vt.容纳;向…提供出处;使适应,顺应</strong></p>
<p> <strong>eradicate: vt.根除,灭绝</strong></p>
<p> <strong>tertiary: adj.第三位的,第三级的;第三代的;</strong></p>
<p> <strong>ranch: n.大牧场,饲养场</strong></p>
<p> <strong>primarily: adv.首先;主要地</strong></p>
<p> <strong>lotion: n.洁肤液;护肤液</strong></p>
<p> <strong>setback: n.挫折,倒退;失败</strong></p>
<p> <strong>carton: n(尤指装食品或液体的)硬纸盒;塑料盒;塑料管;(内装小盒的)大包装盒</strong></p>
<p> <strong>restrain: vt.抑制,阻止,控制,遏制;</strong></p>
<p> <strong>abbreviation: n.缩写(词),缩略语</strong></p>
<p> <strong>lottery: n.彩票,碰运气的事</strong></p>
<p> <strong>gossip: n.流言蜚语;爱说长道短的人 vi.闲谈;传播流言蜚语,说长道短</strong></p>
<p> <strong>reward: n.报答,奖酬;报酬,酬金 vt 报答,酬谢;奖励</strong></p>
<p> <strong>deadlock: n.僵持 v. 相持不下</strong></p>
<p> <strong>maintain: vt.维持; 维修,保养;主张;赡养</strong></p>
]]></content>
      <tags>
        <tag>英语</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-break,continue,return的含义</title>
    <url>/2632.html</url>
    <content><![CDATA[<h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><ul>
<li>在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环， 不执行循环中剩余的语句。(break语句还可用于多支语句switch中) <a id="more"></a>

</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;  </span><br><span class="line">System.out.println(“Begin”);       </span><br><span class="line">     <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;     </span><br><span class="line">            total++;     </span><br><span class="line">            <span class="keyword">int</span> i = (<span class="keyword">int</span>)Math.round(<span class="number">100</span> *  Math.random());     </span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">88</span>) <span class="keyword">break</span>; </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>生成0-100随机数，直到生成88为止，停止循环</p>
<h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><ul>
<li>continue 语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的 语句，接着进行下一次是否执行循环的判定。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">150</span>; i++) &#123;     </span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) </span><br><span class="line">    <span class="keyword">continue</span>; </span><br><span class="line">    System.out.println(i); </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>把100~150之间不能被3整除的数输出</p>
<h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><ul>
<li>return语句从当前方法退出，返回到调用该方法的语句处，并从该语句的下条语句处继 续执行程序。 </li>
<li>返回语句的两种格式（具体到方法时详细讲解） <ul>
<li>return expression • 返回一个值给调用该方法的语句。 <ul>
<li>返回值的数据类型必须和方法声明中的返回值类型一致或是精度低于声明的数据类型。 </li>
</ul>
</li>
<li>return <ul>
<li>当方法声明中用void声明返回类型为空时，应使用这种返回类型，它不返回任何值。</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-数据类型和运算符</title>
    <url>/60172.html</url>
    <content><![CDATA[<p><img src="/img/loading.gif" class="lazyload" data-src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=443701145,3690542412&fm=26&gp=0.jpg"  alt=""></p>
<p>Java是一种强类型语言，每个变量都必须声明其类型。 </p>
<ul>
<li><p>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。 </p>
<a id="more"></a></li>
<li><p>变量在使用前必须对其声明, 只有在变量声明以后，才能为其分配相应长度的存储单元,声明格式为： <strong>type  varName  [=value] [{,varName[=value]}]</strong> ；</p>
</li>
<li><p>例如：String name = “Java”,int age = 20;</p>
<h2 id="整型常量"><a href="#整型常量" class="headerlink" title="整型常量"></a>整型常量</h2><ul>
<li>十进制整数，如：99, -500, 0 </li>
<li>八进制整数，要求以 0 开头，如：015 </li>
<li>十六进制数，要求 0x 或 0X 开头，如：0x15</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th align="center">占用存储间</th>
<th align="right">表数范围</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td align="center">1字节</td>
<td align="right">-128~127</td>
</tr>
<tr>
<td>short</td>
<td align="center">2字节</td>
<td align="right">-2^15 ~ -2^15 -1</td>
</tr>
<tr>
<td>int</td>
<td align="center">4字节</td>
<td align="right">-2 ^31 ~ 2^31 -1</td>
</tr>
<tr>
<td>long</td>
<td align="center">8字节</td>
<td align="right">-2^63 ~ 2^63 -1</td>
</tr>
</tbody></table>
<h2 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h2><table>
<thead>
<tr>
<th>转义符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td>\b</td>
<td align="left">退格</td>
</tr>
<tr>
<td>\n</td>
<td align="left">换行</td>
</tr>
<tr>
<td>\r</td>
<td align="left">回车</td>
</tr>
<tr>
<td>\t</td>
<td align="left">制表符</td>
</tr>
</tbody></table>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul>
<li>所有变量，方法，类名：见名如意</li>
<li>变量，方法名：<ul>
<li>首写字母小写和驼峰原则</li>
<li>run(), runRun(),  age     ageNew   monthSalary </li>
</ul>
</li>
<li>常量：<ul>
<li>大写字母和下划线：MAX_VALUE </li>
</ul>
</li>
<li>类名：<ul>
<li>首字母大写和驼峰原则:  Man, GoodMan</li>
</ul>
</li>
</ul>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><ul>
<li>二元运算符类型提升： <ul>
<li>整数运算： </li>
<li>如果两个操作数有一个为Long, 则结果也为long </li>
<li>没有long时，结果为int。即使操作数全为shot,byte，结果也是int. </li>
<li>浮点运算： </li>
<li>如果两个操作数有一个为double, 则结果为double. • 只有两个操作数都是float, 则结果才为float. </li>
</ul>
</li>
<li>一元运算符(++, –)： <ul>
<li>int a = 3; • int b = a++;   //执行完后,b=3。先给b赋值，再自增。 </li>
<li>int c = ++a;   //执行完后,c=5。先自增,再给b赋值</li>
</ul>
</li>
</ul>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul>
<li><p>逻辑运算符与布尔操作数一起使用，组成逻辑表达式 </p>
</li>
<li><p>逻辑表达式的结果是布尔值 </p>
</li>
<li><p>&amp;和&amp;&amp;的区别 </p>
<ul>
<li>“&amp;”:无论任何情况，“&amp;”两边的表达式都会参与计算。 </li>
<li>“&amp;&amp;”: 当“&amp;&amp;”的左边为false，则将不会计算其右边的表达式。即左false则false </li>
</ul>
</li>
<li><p>“|”和“||”的区别</p>
<ul>
<li><p>“|”只要左右两边有一个为false，则为false；只有全部都为true的时候，结果为true</p>
</li>
<li><p>“||” 只要符号左边为false，则结果为false；当左右都为true时，则结果为true</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+yilia 如何上传本地图片到博客</title>
    <url>/34263.html</url>
    <content><![CDATA[<p>首先，我们要在博客的根目录下找到 <strong>_config.yml</strong>文件，查找<strong>post_asset_folder</strong> 字 确定post_asset_folder 设置为true -&gt; post_asset_folder:<strong>true</strong>。</p>
<a id="more"></a>

<p>然后，我们在博客根本录下打开<strong>Git Bash</strong> 输入<strong>cnpm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> –save</strong><br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405125825.png"  alt="图片"><br>下载成功之后，以后每创建一篇新文章（hexo n “xxx”）都会在 <strong>source/_posts</strong>目录下出现一个相对应的文件夹。</p>
<p>以新建一篇名为“本地图片文章为例”，在 Git Bash 输入 hexo n  “本地图片文章”<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405125826.png"  alt="图片"><br>创建完成之后，我们进入到<strong>source/_posts</strong>目录下，发现一个和文章标题相同名字的文件夹。<br><img src="/img/loading.gif" class="lazyload" data-src="https://gitee.com/kylincw/images/raw/master/img/20200405125827.png"  alt="图片"><br>于是我们就可以把想要上传到本地的图片，放在每篇文章相对应的目录下, 再运用<code>![](图片名)</code>就可以了！</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/15650.html</url>
    <content><![CDATA[<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><a id="more"></a>
<h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>加粗</strong><br><em>斜体</em><br><strong><em>斜体加粗</em></strong><br><del>删除线</del><br><img src="/img/loading.gif" class="lazyload" data-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1566560333016&di=a5d994a096ef4007bf587abb5056353d&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201806%2F09%2F20180609173111_4JhLd.jpeg"  alt="图片" title="图片"><br><a href="https://space.bilibili.com/53836035" target="_blank" rel="noopener">bilibili</a></p>
<p>(<code>)
    function fun(){
         echo &quot;这是一句非常牛逼的代码&quot;;
    }
    fun();
(</code>)</p>
]]></content>
  </entry>
</search>
